{
    "tactics": [
        {
            "ID": "TA0501",
            "name": "Initial Access",
            "short_description": "The adversary is attempting to gain unauthorised access to the UGV’s systems or networks.",
            "full_description": "Initial Access consists of techniques that adversaries use as entry vectors to establish a foothold within UGV systems or networks.\nEntry points targeted by adversaries include ground station, telematics units, infotainment systems, and wireless interfaces (Wi-Fi, Bluetooth, cellular or other custom connections). They may exploit vulnerabilities in manufacturer services, mobile applications, or cloud-based APIs that handle remote access and vehicle data. Physical interfaces, such as OBD-II ports, removable devices, and aftermarket dongles, can also be used as techniques to gain initial unauthorised access to the system.\nFootholds gained through initial access may enable additional attack tactics and techniques.\nThis tactic was adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5010", "T5015", "T5011", "T5008","T5017","T5002","T5014","T5003","T5016","T5007"]
        },
        {
            "ID": "TA0502",
            "name": "Execution",
            "short_description": "The adversary is trying to run malicious code or manipulate UGV's functions and data without authorisation.",
            "full_description": "Execution consists of techniques that allow adversary-controlled code to run on a vehicle’s service, network, control unit, application, firmware, or other asset.\nThese attacks may involve direct code injection, unauthorised commands, or malicious payloads delivered through network interfaces, firmware updates, or compromised software. \nAttackers can exploit communication protocols such as the Controller Area Network (CAN) and Unified Diagnostic Services (UDS) to inject malicious messages and manipulate vehicle behUGViour. They may also execute code on vulnerable telematics units, infotainment systems, OTA update services or mobile-connected services.\nAdditionally, adversaries can tamper with UGV sensor inputs, such as LiDAR, radar, and GPS, to disrupt perception systems and trigger unintended vehicle responses.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5024","T5019","T5020","T5027","T5028","T5023","T5022","T5025","T5021","T5018","T5026"]
        },
        {
            "ID": "TA0503",
            "name": "Persistence",
            "short_description": "The adversary attempts to maintain a foothold within the UGV’s systems.",
            "full_description": "Persistence consists of techniques that enable long-term access, allowing adversaries to execute future attacks or retain control over compromised components.\nAdversaries can achieve persistence through various means, such as malicious OTA updates, unauthorised firmware modifications, or backdoors in telematics units and ECUs. These backdoors may remain active even after system reboots.\nFor example, attackers may tamper with firmware integrity mechanisms like Secure Boot to prevent recovery or install persistent malware in infotainment or telematics systems. This allows them to conduct long-term surveillance, execute unauthorised commands, and move laterally across the vehicle network.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5029","T5031","T5033","T5032","T5036"]
        },
        {
            "ID": "TA0504",
            "name": "Privilege Escalation",
            "short_description": "The adversary is attempting to obtain elevated permissions within the UGV’s systems.",
            "full_description": "Privilege escalation consists of techniques that allow adversaries to gain higher-level access within an UGV system or network. With elevated privileges, they can execute administrative commands, control vehicle components, and disable security measures.\nAdversaries often start with limited access and escalate their privileges by exploiting system weaknesses, misconfigurations, or vulnerabilities.\nExamples of elevated access include: User accounts with extended permissions, root level of infotainment system, root level of telematic system, root level of central gateway system. Once attackers gain administrative access, they can run arbitrary commands, alter vehicle firmware, and disable security features to enable further attacks.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5039","T5040","T5038"]
        },
        {
            "ID": "TA0505",
            "name": "Defense Evasion",
            "short_description": "The adversary is trying to bypass or disable the UGV's security measures.",
            "full_description": "Defense evasion consists of techniques adversaries use to disable or bypass security mechanisms within an UGV system. Unlike traditional ATT&CK approaches that focus on UGVoiding detection, these methods allow attackers to directly neutralize security controls. This enables them to execute malicious code, advance their attacks, or manipulate the system without interference.\nCommon techniques include:\n\t- Disabling or bypassing security mechanisms in the telematics system to maintain access.\n\t- Exploiting software update processes and code integrity checks to insert malicious code undetected.\n\t- Disabling vehicle IDS to evade monitoring and alerts.\n\t- Bypassing security controls in diagnostic functions to perform unauthorised operations.\nThis tactic is adapted from AUTO-ISAC ATM.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5041","T5044","T5042","T5043"]
        },
        {
            "ID": "TA0506",
            "name": "Credential Access",
            "short_description": "The adversary is trying to steal UGV authentication credentials, such as passwords, access tokens, or cryptographic keys.",
            "full_description": "Credential access consists of techniques such as compromising mobile apps or wireless network to steal authentication credentials, exploiting vulnerabilities in keyless entry systems to gain unauthorised vehicle access, and intercepting communication to obtain session tokens or API keys. These methods enable attackers to bypass security controls, execute unauthorised actions, and further infiltrate the system.\nCommon credential access techniques may include:\n\t- Compromising mobile apps or wireless network to intercept authentication credentials like tokens, passwords, and keys.\n\t- Exploiting vulnerabilities in key fob systems or remote keyless entry (RKE) to gain unauthorised access.\n\t- Targeting mobile apps or infotainment systems to steal sensitive information like vehicle identification numbers (VINs).\n\t- Intercepting vehicle-to-cloud communications to obtain session tokens or API keys that enable backend system access.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5048","T5045","T5047","T5046","T5049"]
        },
		{
            "ID": "TA0507",
            "name": "Discovery",
            "short_description": "The adversary is trying to understand the vehicle network and environment.",
            "full_description": "Discovery consists of techniques for exploring a vehicle's network, interfaces, and communication protocols to identify vulnerable components within the autonomous vehicle.\nThrough analysing system structures, scanning networks, and probing interfaces, adversaries can map attack surfaces and find exploitable vulnerabilities.\nCommon discovery techniques include intercepting and analysing network traffic or CAN messages to understand vehicle communication structures, scanning and mapping internal vehicle networks to identify vulnerabilities and access points, and exploring interfaces like OBD-II ports, telematics systems, and sensors to find misconfigurations or security weaknesses.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5052","T5037","T5050","T5051"]
        },
        {
            "ID": "TA0508",
            "name": "Lateral Movement",
            "short_description": "The adversary is trying to move through the UGV’s network or systems.",
            "full_description": "Lateral movement consists of techniques that allow adversaries to traverse the vehicle’s internal network, pivot between components to access additional resources and escalate their attack. \nBy exploiting vulnerabilities, leveraging trusted communication channels, remote services or uploading malicious tools, attackers can extend their control and compromise additional vehicle functions.\nCommon lateral movement techniques include: moving from infotainment or telematics systems to other ECUs to control critical functions (via SSH, Telnet, direct connections, or shared CAN buses); transitioning from non-critical to critical CAN buses to access safety-critical components through diagnostic functions; and uploading tools to the head unit for exploitation, control, and automated spreading across connected vehicles through cellular networks.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5076","T5054","T5053","T5055"]
        },
        {
            "ID": "TA0509",
            "name": "Collection",
            "short_description": "The adversary is collecting data of interest from the UGV’s systems or environment.",
            "full_description": "Collection consists of techniques used to capture, extract, and analyse data from vehicle networks, internal systems, and external interfaces. By obtaining critical information, attackers can gain insights into vehicle operations, exfiltrate data, and plan further exploits.\nCommon data sources include CAN bus messages, important UGV files like VIN numbers and system logs, and vehicle data such as location, camera images, phone calls, software/firmware versions, and real-time status.\nAdversaries typically collect data through network sniffing, exploiting web service vulnerabilities, or directly accessing local vehicle systems. \nThis tactic is adapted from AUTO-ISAC ATM.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5057","T5059","T5056", "T5071","T5058"]
        },
        {
            "ID": "TA0510",
            "name": "Command and Control",
            "short_description": "The adversary is trying to communicate with compromised UGV systems to control them.",
            "full_description": "Command and control consists of techniques that adversaries use to maintain communication (typically remote) and issue malicious commands to vehicles. By establishing covert communication channels, attackers can manipulate UGV functions, steal data, or launch additional attacks while UGVoiding detection.\nCommon command and control techniques include using removable devices, modifying firmware, establishing reverse shells, or installing malicious applications to gain and maintain long-term remote control over compromised UGV systems.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5062","T5060","T5061"]
        },
		{
            "ID": "TA0511",
            "name": "Impair Process Control",
            "short_description": "The adversary is trying to manipulate, disable, or damage physical control processes within UGV.",
            "full_description": "Impair Process Control consists of techniques that interfere with the vehicle's operational processes by altering control logic, modifying system parameters, or manipulating reporting mechanisms. These techniques can result in unsafe driving conditions, compromised safety features, or loss of vehicle control.\nCommon techniques for this tactic include replaying normal diagnostic responses to emulate a healthy airbag system, or injecting malicious code into the control program to corrupt vehicle stability and response.\nThis tactic is adapted from MITRE ATT&CK (ICS domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5064","T5063"]
        },
		{
            "ID": "TA0512",
            "name": "Inhibit Response Function",
            "short_description": "The adversary is trying to prevent safety, protection, and operator intervention functions from responding to a failure, hazard, or unsafe state.",
            "full_description": "Inhibit Response Function consists of techniques that interfere with a vehicle's ability to detect and respond to threats, manipulate safety mechanisms, and suppress critical alerts. Through blocking or altering response functions, attackers can create unsafe driving conditions, disable security features, and cause system failures.\nCommon techniques include suppressing anti-theft systems, spoofing emergency brake data, forcing unnecessary stops by creating false obstacles, and jamming radar and ultrasonic sensors. These actions prevent the vehicle from detecting real obstacles, which can lead to collisions or failure to respond to actual threats.\nThis tactic is adapted from MITRE ATT&CK (ICS domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5065","T5066"]
        },		
        {
            "ID": "TA0513",
            "name": "Exfiltration",
            "short_description": "The adversary is attempting to steal data from the UGV and transmit it externally.",
            "full_description": "Exfiltration refers to techniques that adversaries use to steal data from vehicles. After collecting data, adversaries typically package it using compression and encryption to UGVoid detection during removal.\nData can be exfiltrated manually or through automated processes using command and control channels or alternative pathways. Adversaries may exploit various vehicle connectivity features, such as mobile applications, telematics data loggers, cellular networks, Wi-Fi, or Bluetooth, to extract and transmit stolen information.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5068","T5070","T5067"]
        },    
        {
            "ID": "TA0514",
            "name": "Impact",
            "short_description": "The adversary is attempting to manipulate, disrupt, or damage the UGV's systems or its operational environment.",
            "full_description": "Impact consists of techniques that degrade vehicle functionality, compromise safety, or exploit vulnerabilities at scale. Through malicious commands, system output manipulation, or disruption of essential operations, attackers can inflict physical harm, cause financial losses, and create widespread security breaches, threatening safety, security, and privacy.\nCommon impact techniques include forcing vehicles off-road, causing accidents, initiating emergency shutdowns, and impairing safe operation. Attackers may also steal sensitive vehicle data, including operational and security-critical information, or exploit vulnerabilities across identical vehicle models to launch large-scale attacks after breaching a single vehicle.\nThis tactic is adapted from MITRE ATT&CK (Enterprise and ICS domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique_ids": ["T5004","T5078","T5081","T5069","T5077","T5073","T5075","T5074","T5079","T5072","T5006","T5005","T5080"]
        }
    ],
    "techniques": [
		{
            "ID": "T5002",
            "name": "Physical Access (new)",
            "short_description": "Adversaries may gain physical access to autonomous vehicles to enable further attacks or establish a foothold in the system.",
            "full_description": "Adversaries may begin their attack by obtaining physical access to the vehicle. This technique represents a crucial entry point, particularly for attacks requiring direct interaction with in-vehicle components such as the OBD-II port, exposed wiring, or internal ECUs. \n Physical access allows attackers to connect diagnostic tools, rogue devices, or removable media, enabling further compromise of the vehicle’s network and control systems. \n This method is especially relevant for unmanned ground vehicles, which may be more vulnerable due to their compact size, remote deployment, or lack of onboard supervision. \n In many real-world case studies, initial access was only possible after physical access was achieved, making it a foundational step for subsequent techniques under Initial Access, Persistence, or Execution tactics.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5047"],
            "example": [
                {
					"reference ID": "RE0009",
					"description": "Researchers need first physical access to the vehicle to connect an OBD device and laptop to access the internal network."
				},
				{
					"reference ID": "RE0016",
					"description": "Researchers need physical access to the vehicle to inject removable devices into the vehicle."
				},
				{
					"reference ID": "RE0034",
					"description": "Researchers need first physical access to the vehicle to connect a rogue device to the exposed wires to access the CAN network."
				}
            ],
            "reference ID": ["RE0009", "RE0016","RE0034"]
        },
		{
            "ID": "T5003",
            "name": "Supply Chain Compromise",
            "short_description": "Adversaries may manipulate products or product delivery mechanisms, such as software or hardware components during the supply chain lifecycle to gain access to or compromise vehicle systems.",
            "full_description": " AV are composed of numerous interconnected components sourced from multiple original equipment manufacturers (OEMs), tiered suppliers, and third-party vendors. Adversaries may target these components during manufacturing, integration, or distribution phases to implant malicious modifications before the vehicle reaches the end user. \n A compromise can occur at any stage of the supply chain, including: \n\t - Manipulation of software during development or integration by OEMs or suppliers \n\t - Injection of malicious code in firmware or update mechanisms \n\t - Replacement of legitimate hardware components with altered or counterfeit versions \n\t - Insertion of malware through factory-infected removable media \n\t - Modification of vehicle sensors or physical environment elements to deceive perception systems \n While this technique is harder to detect and defend against, it presents a high-impact risk. In the AV context, this may include the insertion of backdoors in control units, manipulation of camera or LiDAR drivers, or the pre-installation of vulnerable firmware. \n This technique often enables other tactics such as Execution, Persistence, or Initial Access once the compromised component is active within the vehicle.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5004", "M5022", "M5043", "M5045", "M5046"],
            "example": [],
            "reference ID": ["RE0042"]
        },
		{
            "ID": "T5004",
            "name": "Adversarial Machine Learning (new)",
            "short_description": "Adversaries may try to use adversarial machine learning techniques to cause vehicle perception systems to misclassify objects, fail to detect obstacles, misinterpret road signs, respond inappropriately to road conditions, and others.",
            "full_description": "Adversarial Machine Learning (AML) attacks target machine learning models used in vehicle perception, security, and decision-making systems. By manipulating model outputs, these attacks can cause misclassification, system failure, or unsafe driving behavior. \n AML attacks on autonomous vehicles primarily affect sensor systems and intrusion detection systems (IDS). In sensor attacks, adversarial inputs trick machine learning models into misclassifying obstacles or detecting nonexistent ones, leading to navigation errors and safety risks. In IDS attacks, adversarial modifications to network data cause misclassification, making malicious traffic appear benign. \n The impact of these attacks is severe. A compromised perception system can lead to traffic accidents, navigation failures, or vehicle immobilization. Meanwhile, attacks on cybersecurity defenses can bypass anomaly detection, exposing critical vehicle components to further exploitation.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": ["T5004.001", "T5004.002"],
            "mitigation_ids": ["M5002", "M5037"],
            "example": [
                {
                    "reference ID": "RE0025",
                    "description": "Reseachers using physical adversarial patches in the form of road decals to mislead object detection systems in autonomous vehicles, causing incorrect object recognition and disrupt AV navigation."
                },
				{
					"reference ID": "RE0019",
					"description": "Researchers demonstrated an adversarial sensor attack on LiDAR-based perception. The attack created false 'front-near obstacles' within five meters, causing incorrect driving decisions such as emergency braking or vehicle freezing at intersections. "
				},
				{
					"reference ID": "RE0027",
					"description": "Researchers tested adversarial attacks on ML-based IDS models, including Deep Neural Network (DNN), Decision Tree (DT), Random Forest (RF), Extra Trees (ET), and XGBoost. Findings indicate that these IDS models are highly susceptible to adversarial perturbations, leading to significant misclassification of network traffic."
				},
				{
					"reference ID": "RE0028",
					"description": "Researchers examined adversarial attacks on two IDS models: a Deep Neural Network (DNN) and a Multi-Tier Hybrid IDS (MTH-IDS). The adversarial messages altered only the data payload fields (D0–D7) while maintaining CAN IDs and DLC values unchanged. The study observed a high attack success rate, with up to 52.34% of normal frames being misclassified as malicious."
				}
            ],
            "reference ID": ["RE0019", "RE0020", "RE0025","RE0026","RE0027","RE0028"]
        },
		{
            "ID": "T5005",
            "name": "Sensor Manipulation (new)",
            "short_description": "Adversaries may manipulate vehicle sensors such as LIDAR, RADAR, ultrasonic, and GPS to create false object detection, distance readings, or positioning",
            "full_description": "Sensor manipulation attacks pose significant threats to vehicle perception systems. These attacks primarily target five key sensor types, such as Camera, LIDAR, RADAR, and SONAR, motion and position sensor. \n Adversaries may inject crafted or replayed signals into a vehicle’s sensor systems to create specific false outputs. These attacks mislead the perception system by spoofing sensor inputs, injecting false echoes, or replaying captured data. The goal is often to trick the system into detecting phantom obstacles, incorrect distances, or altered positions. \n While these attacks can severely impact a vehicle's perception and navigation capabilities, their effects typically remain isolated to the perception layer without directly compromising deeper vehicle systems, unless these manipulated inputs lead to incorrect decisions at higher processing levels. \n It is important to distinguish Sensor Manipulation from Adversarial Attacks and Sensor Interference. Adversarial Attacks also target perception systems like LIDAR or Camera but focus on exploiting AI-based algorithms rather than manipulating sensor signals. They deceive machine learning models using crafted inputs, such as perturbing images to mislead object classification. In contrast, Sensor Interference disrupts the sensor's ability to function correctly by overwhelming or blocking signals, such as through jamming, blinding, or physical obstruction, without injecting false data.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": ["T5005.001", "T5005.002", "T5005.003", "T5005.004"],
            "mitigation_ids": ["M5002", "M5028"],
            "example": [
                {
                    "reference ID": "RE0017",
                    "description": "LIDAR Replay Attack - Researchers intercept and retransmit LiDAR pulses from a different location, creating false reflections at unintended positions."
                },
				{
                    "reference ID": "RE0021",
                    "description": "Ultrasonic Spoofing attack - Researchers injects synthetic ultrasonic signals with modified frequency modulation patterns to create false object detections or alter measured distances."
                },
				{
                    "reference ID": "RE0021",
                    "description": "Millimeter-Wave Radar Spoofing attack - Researchers injects synthetic radar signals with altered frequency modulation patterns, tricking the radar into detecting false objects or incorrect distances."
                },
				{
                    "reference ID": "RE0015",
                    "description": "Researchers injected false inertial sensor readings during flight, causing incorrect roll estimation and crash of the quadrotor."
                }
            ],
            "reference ID": ["RE0015","RE0017","RE0021"]
        },
		{
            "ID": "T5006",
            "name": "Sensor Interference (new)",
            "short_description": "Adversaries may interfere with vehicle sensors by jamming, blinding, or physically blocking signals to degrade their accuracy or disable them.",
            "full_description": "Sensor interference attacks disrupt perception sensors by overwhelming, blinding, or physically obstructing them. These attacks cause confusion, signal loss, or degraded readings through methods like laser blinding, radar jamming, or acoustic interference. \n By distorting sensor inputs, adversaries can disrupt object detection, mislead distance measurements, or create phantom obstacles. \n While these attacks can severely impact a vehicle's perception and navigation capabilities, their effects typically remain isolated to the perception layer. They don't directly compromise deeper vehicle systems. \n This technique differs from Sensor Manipulation and Adversarial Attacks. Sensor Interference focuses on degrading or disabling sensor functionality through physical or electromagnetic disruption (jamming, blinding, or blocking) without injecting false signals. In contrast, Sensor Manipulation actively feeds false data to create misleading outputs, while Adversarial Attacks exploit AI-based perception algorithms using crafted inputs to deceive object recognition or classification models.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": ["T5006.001", "T5006.002", "T5006.003"],
            "mitigation_ids": ["M5002", "M5028"],
            "example": [
                {
                    "reference ID": "RE0017",
                    "description": "CAMERA Confusing Attack - Researchers use rapid bursts of light to force the camera to continuously adjust exposure settings, creating time lag in the auto-adjustment process and causing missed object detection."
                },
				{
                    "reference ID": "RE0021",
                    "description": "CAMERA Binding Attack - Researchers uses three different light sources to temporarily or permanently blind the vehicle’s camera, obstructing recognition of lane markings, traffic signs, and obstacles."
                },
				{
                    "reference ID": "RE0018",
                    "description": "Ultrasonic Blinding attack - Researchers disrupting sensor accuracy by covering sensors or using thin objects or acoustic materials."
                },
				{
                    "reference ID": "RE0021",
                    "description": "Millimeter-Wave Radar Jamming attack - Researchers transmit high-power electromagnetic signals to interfere with the vehicle’s radar system, preventing accurate object detection."
                }
            ],
            "reference ID": ["RE0017", "RE0018", "RE0021"]
        },
		{
            "ID": "T5007",
            "name": "Wireless Compromise",
            "short_description": "Adversaries may exploit wireless communication channels to gain unauthorised access to an autonomous vehicle's network and systems. Wireless compromise can occur through the manipulation or emulation of wireless infrastructure such as cellular base stations, Wi-Fi access points, or short-range communication modules.",
            "full_description": "Wireless compromise refers to an adversary’s use of wireless communication vectors, such as cellular, Wi-Fi, Bluetooth, or other short- and long-range protocols, to establish unauthorised access to autonomous vehicle systems. This can serve as a gateway for more complex attacks that manipulate internal ECUs and applications, compromise firmware, or inject malicious commands over in-vehicle networks. \n By exploiting these interfaces, adversaries can bypass perimeter security, perform man-in-the-middle  attacks, downgrade connections to insecure protocols, or jam communication channels. Sub-techniques include the use of rogue cellular base stations, rogue Wi-Fi access points, downgrade attacks, and jamming or denial-of-service attack. \n Although other wireless-based attacks like sensor manipulation or remote keyless entry spoofing also involve wireless exploitation, they often target isolated functions and do not typically provide access deeper into the AV system or network. In contrast, wireless compromise techniques under this category are characterised by their ability to create an initial foothold that enables further attack stages, including execution of additional techniques or transition to new tactics such as lateral movement, command injection, or persistence.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": ["T5007.001", "T5007.002", "T5007.003", "T5007.004", "T5007.005"],
            "mitigation_ids": ["M5005", "M5010", "M5013", "M5026", "M5027"],
            "example": [
                {
                    "reference ID": "RE0013",
                    "description": "Researchers used a rogue GSM base station to intercept TCP messages and escalate access to BMW’s NBT Head Unit and Telematic Communication Box (TCB)."
                },
				{
                    "reference ID": "RE0011",
                    "description": "Researchers spoofed Tesla Guest Wi-Fi, a trusted network used by Tesla body shops and superchargers, to trick vehicles into auto-connecting. By redirecting browser traffic, they found out the vulnerabilities in QtCarBrowser."
                },
				{
                    "reference ID": "RE0023",
                    "description": "Researchers downgraded a vehicle’s T-Box from LTE to GSM using a rogue base station (USRP + OpenBTS), enabling them to intercept GSM text messages."
                },
				{
                    "reference ID": "RE0024",
                    "description": "Researchers sends deauthentication frames to disconnect the Tesla from its Wi-Fi network"
                }
            ],
            "reference ID": ["RE0011","RE0012","RE0013","RE0014","RE0023","RE0024"]
        },
		{
            "ID": "T5008",
            "name": "Hardware Additions",
            "short_description": "Adversaries may physically attach malicious hardware components to a vehicle's interface ports or wiring to gain access, inject commands, or establish a foothold for further exploitation.",
			"full_description": "Adversaries may introduce rogue or modified hardware devices into a vehicle's internal network via diagnostic ports (e.g., OBD-II), exposed wiring, or aftermarket modules. Unlike simple payload delivery via removable media, hardware additions provide persistent and versatile access that can enable deeper attacks. \n Such devices may include custom development boards, commercial diagnostic tools, CAN injectors, or wireless-enabled components. These hardware additions can serve various purposes, ranging from injecting malicious CAN messages and intercepting communications to bridging connectivity with external controllers (e.g., mobile apps or remote command servers). \n This technique differs from basic replication through removable media by offering expanded functionality and long-term access. A successful hardware addition can open new capabilities for the attacker, enabling lateral movement, manipulation of ECU behaviour, persistent backdoors, or launching additional techniques from within the vehicle’s internal systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5007", "M5021", "M5035"],
            "example": [
                {
					"reference ID": "RE0009",
					"description": "Researchers connected a laptop and an Atmel AT90CAN128 development board (Olimex AVR-CAN) with custom firmware to the OBD-II port, allowing them to inject malicious CAN packets into the vehicle network."
				},
				{
					"reference ID": "RE0016",
					"description": "Researchers used Vector CANoe and a diagnostic tester connected via the OBD-II port to inject crafted CAN messages."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers connected a PassThru device to the OBD-II port, allowing them to reprogram and diagnostic the vehicle."
				},
				{
					"reference ID": "RE0034",
					"description": "Researchers connected a rogue device, referred to as a CAN Injector, to exposed headlight wiring, allowing them to inject malicious messages directly into the CAN bus and mimic key fob authentication."
				},
				{
					"reference ID": "RE0035",
					"description": "Researchers analyzed 77 wireless OBD-II dongles that connect directly to vehicle internal networks and communicate wirelessly with external apps or services, enabling vehicle control and in-vehicle network infiltration."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers installed an OBD-II scan tool on the vehicle that communicated with a malicious mobile application. This enabled remote diagnostics and injection of malicious messages via the scan tool interface."
				}				
            ],
            "reference ID": ["RE0009", "RE0016", "RE0010", "RE0022", "RE0034", "RE0035"]
        },
		{
            "ID": "T5010",
            "name": "Equipment Hijacking (new)",
            "short_description": "Adversaries may physically hijack a UGV to gain initial access and establish control over its systems, enabling further exploitation or manipulation.",
            "full_description": "Due to their compact size and often limited physical security, Unmanned Ground Vehicles (UGVs) can be physically hijacked by adversaries in the field. In contrast to larger or stationary systems, UGVs are more susceptible to physical takeover, especially in scenarios where they operate in unmonitored or vulnerable environments. \n Although documented hijacking cases are more common with aerial drones, similar risks apply to ground-based platforms. The physical capture of a UGV may allow attackers to gain full control of the equipment. Once under their control, adversaries can perform further actions such as connecting malicious hardware, reprogramming onboard firmware, extracting sensitive mission or sensor data, or establishing a long-term backdoor. This technique is classified as an initial access vector, as the successful hijacking of a UGV grants direct entry into its subsystems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5047"],
            "example": [
                {
					"reference ID": "RE0036",
					"description": "Researchers mentioned a risk that robotic devices are also prone to physical theft or hijacking and control. A notable vulnerability lies in the de-authentication process, which attackers can exploit to disconnect legitimate users and take control of the devices. "
					},
				{
					"reference ID": "RE0036",
					"description": "Researchers mentioned that state-sponsored hackers can hijacking military robots, potentially accessing classified design documents and experimental data related to combat robots."
				}
            ],
            "reference ID": ["RE0036"]
        },
		{
            "ID": "T5011",
            "name": "External Remote Service",
            "short_description": "Adversaries may exploit externally accessible remote services, such as telematics interfaces, vehicle APIs, or exposed dashboards to gain initial access to vehicle systems without physical proximity.",
            "full_description": "External-facing remote services in AV may include telematics systems (accessed via cellular call, SMS, or data), manufacturer-provided APIs and remote diagnostic portals. These services are designed to allow legitimate users or service providers to interact with the vehicle remotely. Access can be achieved through weak or missing authentication mechanisms, credential theft (e.g., via phishing), misconfigured access control, insecurely exposed APIs or third-party dashboards, or protocol-level vulnerabilities in cellular-based telematics system. \n A successful compromise of an external remote service may allow attackers to issue remote commands, extract vehicle data, or establish persistent control, serving as a launch point for further tactics such as execution, lateral movement, or data exfiltration.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5025", "M5026", "M5032", "M5043"],
            "example": [
                {
                    "reference ID": "RE0010",
                    "description": "Researchers exploited weak random seed generation in a vehicle telematics unit, allowing them to bypass authentication by repeatedly calling the vehicle over the public cellular network and executing remote code."
                },
				{
                    "reference ID": "RE0038",
                    "description": "Reseachers discovered that some TeslaMate dashboards were exposed online without authentication, allowing them to extract Tesla API tokens and use them to remotely control multiple Tesla vehicles via Tesla’s backend API."
                },
				{
                    "reference ID": "RE0037",
                    "description": "Researchers found that several automakers' web services and APIs had weak SSO implementations and access control flaws. These allowed remote vehicle control, user account takeover, and access to sensitive backend systems."
                }
            ],
            "reference ID": ["RE0010", "RE0037", "RE0038"]
        },
        {
            "ID": "T5014",
            "name": "Replication Through Removable Media.",
            "short_description": "Adversaries can leverage removable media such as USB drives or CDs to deliver malicious files or firmware updates to in-vehicle systems, especially during service or infotainment operations.",
            "full_description": "Unlike enterprise systems where removable media may enable broader lateral movement or initial access, vehicles typically accept limited media input, mostly for firmware updates or infotainment purposes. Nonetheless, adversaries may exploit these channels to introduce malicious software, particularly in cases where update processes lack cryptographic validation or integrity checks. \n In the automotive domain, USB remains a significant attack surface, commonly used to load firmware, update navigation data, or interact with infotainment systems. If the vehicle does not enforce strict authentication or validation of update files, an attacker could use a manipulated USB device to inject code, establish persistence, or deliver crafted payloads targeting CAN-connected components. Malicious media content (e.g., specially crafted audio files) may be interpreted differently by infotainment systems, triggering unexpected behaviour or message injection over in-vehicle networks. \n This technique may be particularly relevant in service or dealership environments, or in scenarios where vehicles are temporarily left unattended with physical access.",
            "created": "02/01/2023",
            "modified": "02/01/2024",
            "sub_technique_ids": [
                "T5014.001",
                "T5014.002"
            ],
            "mitigation_ids": ["M5005", "M5021"],
            "example": [
				{
					"reference ID": "RE0010",
					"description": "Researchers used a CD with a modified WMA audio file, which plays normally on a PC but sends arbitrary CAN packets when played by the vehicle's media player"
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers inserted a USB stick with a valid ISO to initiate an update, then replaced it with a modified ISO to force a malicious update."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers inserted a USB stick with a crafted manage_upd.nzdf file to force the HU-Intel system's navigation map to update with the malicious file."
				}
            ],
            "reference ID": ["RE0010", "RE0013"]
        },
		{
            "ID": "T5015",
            "name": "Exploit Public Facing Application",
            "short_description": "Adversaries may exploit vulnerabilities in public-facing vehicle applications or services, such as diagnostic portals, infotainment application, or navigation service to gain unauthorised access to vehicle systems.",
            "full_description": "Adversaries may exploit software flaws, misconfigurations, or implementation bugs in these applications to gain initial access to the vehicle or backend systems. Vulnerabilities can include stack overflows, shell injection, insecure inter-process communication (e.g., D-Bus), and other logic flaws. Exploitation may allow attackers to execute arbitrary code, bypass authentication, or manipulate vehicle components. \n Unlike External Remote Service, which targets legitimate interfaces designed for remote access (e.g., telematics APIs or mobile companion apps), Exploit Public-Facing Application refers to abusing unintended flaws in software or services that happen to be exposed to a network interface. These vulnerabilities may exist in infotainment systems, telematics units, diagnostic software, or dealership pass-through tools with network exposure. \n Successful exploitation may result in full access to exposed services, privilege escalation, or lateral movement into in-vehicle networks or backend infrastructure, depending on the scope and location of the vulnerable application.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5005", "M5006", "M5015", "M5028", "M5032", "M5035", "M5036", "M5045", "M5046"],
            "example": [
				 {
					"reference ID": "RE0003",
					"description": "Researchers discovered a stack overflow vulnerability in the Android OS used on Field Personal Digital Devices (FPDDs). The flaw allowed adversaries to inject malicious code, creating a side channel to exfiltrate sensitive data."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers identified an unauthenticated Wi-Fi-based API exposed by a dealership PassThru diagnostic tool. The API was vulnerable to shell injection, enabling remote code execution without user authentication."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers exploited a D-Bus service exposed on TCP port 6667 by the UConnect infotainment system, gaining unauthorised access to internal vehicle functionality through remote message injection."
				}	
            ],
            "reference ID": ["RE0003","RE0010","RE0014"]
        },
		{
            "ID": "T5016",
            "name": "Valid Account",
            "short_description": "Adversaries may abuse valid credentials for vehicle-related public-facing web services or APIs to remotely access user accounts, control limited vehicle functions, or retrieve sensitive data.",
			"full_description": "In the automotive domain, valid account abuse typically targets public-facing web platforms, mobile apps, and third-party dashboards that interact with vehicles through backend APIs or cloud services. These accounts may be compromised through weak authentication, exposed tokens, default credentials, or web-based logic flaws, allowing adversaries to impersonate legitimate users. \n  Most abused accounts are tied to services that offer limited or user-facing functionality—such as locking/unlocking doors, honking horns, checking GPS location, or viewing service history. \n While direct control over safety-critical vehicle systems is rarely achieved through this technique, the risks increase substantially when web platforms are closely integrated with the manufacturer's internal infrastructure, particularly firmware distribution servers or backend cloud networks. In these situations, attackers can use valid accounts as stepping stones for further exploitation or movement toward critical systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5004", "M5034", "M5036"],
            "example": [
                {
					"reference ID": "RE0037",
					"description": "Researchers discovered weak authentication and misconfigured SSO in several automotive web services, allowing attackers to access user and backend accounts to issue remote vehicle commands and extract sensitive data."
				},
				{
					"reference ID": "RE0038",
					"description": "Researchers accessed exposed TeslaMate dashboards lacking authentication, allowing retrieval of valid Tesla API tokens and remote control of over 25 vehicles using legitimate backend APIs."
				},
				{
					"reference ID": "RE0040",
					"description": "Researchers bypassed login validation in Toyota’s CRM system by modifying client-side JavaScript, allowing access to production APIs and retrieval of sensitive customer and vehicle data without proper authentication."
				}
            ],
            "reference ID": ["RE0037", "RE0038", "RE0040"]
        },
		{
            "ID": "T5017",
            "name": "Phishing",
            "short_description": "Adversaries may use phishing to steal credentials for external services or mobile apps that interface with connected vehicles, enabling remote access to limited vehicle functions or sensitive user data.",
            "full_description": "In the automotive domain, phishing is used to obtain valid credentials for accounts tied to external remote services, such as vehicle companion apps, telematics dashboards, or fleet management platforms. These services often expose limited vehicle controls (e.g., lock/unlock, horn, lights) and access to personal or operational data. \n Phishing may involve emails, social media, or fake websites impersonating manufacturers or third-party providers. Unlike enterprise environments where phishing may grant deep network access, in AV systems it typically enables attackers to abuse non-critical functions or extract user-related data. While the impact is limited in scope, successful phishing may result in loss of availability (e.g., spamming door locks or horns) and compromise of personal or fleet data.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5003", "M5031", "M5035"],
            "example": [
                {
                    "reference ID": "RE0039",
                    "description": "At Pwn2Own Automotive 2024, researchers used phishing to steal vehicle owner credentials and sent remote control commands (unlock, start engine, honk horn) through the manufacturer’s backend API, relayed to the telematics unit via cellular."
                }
            ],
            "reference ID": ["RE0039"]
        },
		{
            "ID": "T5018",
            "name": "Modify Controller Tasking",
            "short_description": "Adversaries may modify the execution logic or tasking schedule of a controller to manipulate manipulate its execution flow and behavior.",
            "full_description": "In autonomous vehicles and robotic systems, attackers can alter control loop logic, adjust program execution order, or inject new instructions into controllers to change system behavior. \n Unlike traditional payload injection or scripting, this technique focuses on manipulating the underlying control schedules and logic blocks, such as actuation signals or navigation response timing. This typically requires firmware analysis or direct access to the control binary. \n These modifications enable persistent influence over system movements, timing, and decisions, which can facilitate further techniques like Defense Evasion.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5001", "M5008", "M5009", "M5011"],
            "example": [
                {
                    "reference ID": "RE0015",
                    "description": "Reseachers inserted signal-manipulation code into the motor pulse width modulation (PWM) to adjust the rotation of motors/rotors."
                }
            ],
            "reference ID": ["RE0015"]
        },
		{
            "ID": "T5019",
            "name": "Change Operation Mode",
            "short_description": "Adversaries may switch an ECU or vehicle component into a diagnostic or special-purpose mode to enable additional functionality, such as remote firmware updates or diagnostic commands.",
            "full_description": "Adversaries may change the operating mode of an in-vehicle controller, particularly through diagnostic interfaces such as UDS (Unified Diagnostic Services), to gain unauthorised control or control additional functions. In the automotive domain, these modes are accessed via services like Diagnostic Session Control (0x10) or RoutineControl (0x31), often used during maintenance or updates.\n Attackers may exploit these modes to suppress normal ECU behaviour, inject diagnostic commands, reset systems, or initiate firmware updates. \n The impact depends on the privileges granted in the diagnostic mode, ranging from ECU silencing to direct manipulation of vehicle functions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5008", "M5011", "M5030", "M5032"],
            "example": [
				{
                    "reference ID": "RE0001",
                    "description": "Researchers noted that in a replay attack, rebroadcasting a previous message can elicit a reaction that forces the system into a reset state."
                },
				{
                    "reference ID": "RE0011",
                    "description": "Researchers sets ECU into some special diagnostic mode, such as programming mode to make ECU stop sending CAN message or to update firmware."                
                },
				{
                    "reference ID": "RE0013",
                    "description": "Researchers invoked a UDS RoutineControl service through the LastStateCall function to send diagnostic messages via the Central Gateway, enabling unauthorised actions such as ECU reset."                
                }				
            ],
            "reference ID": ["RE0001", "RE0011", "RE0013"]
        },
		{
			"ID": "T5020",
			"name": "Command and Scripting Interpreter",
			"short_description": "Adversaries may abuse command and scripting interpreters, particularly Unix shells, to execute malicious commands within automotive systems, often to inject CAN messages.",
			"full_description": "Attackers in the autonomous vehicle domain commonly use command and scripting interpreters, particularly Unix shells accessed through remote or local code execution to run commands within vehicle systems. After gaining access, they use these interpreters to send specially crafted CAN messages across the in-vehicle network. \n These messages can enable various attacks, including spoofing, replay, fuzzing, impersonation, and denial-of-service (DoS). \n Attackers typically inject these messages through command-line tools or scripts. They may also use specialized tools like CANoe and CARShark alongside command interpreters to craft and inject messages.  \nThese techniques, usually executed from OBD-II port, compromised head units, telematics devices or central gateway, can give attackers control over critical vehicle functions.",
			"created": "25/02/2025",
			"modified": "03/04/2025",
			"sub_technique_ids": [],
			"mitigation_ids": ["M5001", "M5005", "M5010", "M5011", "M5013", "M5023", "M5028", "M5029", "M5030", "M5031"],
			"example": [
				{
					"reference ID": "RE0016",
					"description": "Researchers used CANoe application to send CAN message and control ECU."
				},
				{
					"reference ID": "RE0009",
					"description": "Researchers used CARShark tool to sniff and send CAN message and control ECU."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers used a Unix shell via remote code execution to inject CAN messages and run arbitrary commands inside the head unit."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers used a Unix shell within the infotainment unit (IC or CID) to execute arbitrary commands and inject malicious CAN messages to control vehicle systems."
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers used local shell access in the infotainment system to send diagnostic and CAN control commands across components."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers used root shell of the NBT Head Unit to inject arbitrary CAN messages."
				},
				{
					"reference ID": "RE0004",
					"description": "Researchers used ROS “rostopic” commands to execute malicious navigation instructions."
				}
			],
			"reference ID": ["RE0004", "RE0009", "RE0011", "RE0012", "RE0013", "RE0014", "RE0016"]
		},
		{
            "ID": "T5027",
            "name": "Content Injection (new)",
            "short_description": "Adversaries may execute malicious code by injecting crafted non-executable content into vehicle systems",
            "full_description": "In autonomous vehicles, attackers can execute malicious code by injecting crafted content like media files that legitimate vehicle software processes. \n This technique differs from execution via commands, APIs, applications, or diagnostic tools—instead, it exploits how vehicle subsystems handle and interpret files. Infotainment units that process music, video, images, or documents may have vulnerabilities in their file parsing routines. Attackers can exploit these weaknesses by delivering specially crafted files (such as WMA, MP4, JPG, or PDF) that, when opened, force the target system to execute unauthorized code.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5002"],
            "example": [
				{
					"reference ID": "RE0010",
					"description": "Researchers transferred crafted WMA files to the vehicle's media player which, when played, exploited a buffer overflow vulnerability in the media player to send malicious CAN messages."
				}
            ],
            "reference ID": ["RE0010"]
        },
		{
            "ID": "T5021",
            "name": "Inter-Process Communication",
            "short_description": "Adversaries may abuse inter-process communication mechanisms to execute commands or manipulate vehicle behaviour.",
            "full_description": "Inter-process communication (IPC) allows software components in vehicle systems to exchange data and coordinate actions. Through IPC abuse, attackers can execute code or commands indirectly without compromising low-level firmware. Any attack that leverages software-level messaging between processes (rather than external interfaces or firmware) falls into this category. \n For autonomous vehicles, middleware systems like ROS (Robot Operating System) use IPC mechanisms, such as publish/subscribe messaging to share sensor data and control signals.\n Adversaries who gain access to a privileged node or process can abuse these IPC mechanisms to inject messages, hijack topics, or disrupt system coordination.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5004", "M5036"],
            "example": [
                {
					"reference ID": "RE0022",
					"description": "Researchers used compromised nodes to inject fake ROS messages to topics like drive state, generator mode, or brakes, resulting in system disruptions."
				}
            ],
            "reference ID": ["RE0022"]
        },
		{
            "ID": "T5022",
            "name": "Exploitation for Client Execution",
            "short_description": "Adversaries may exploit software vulnerabilities in vehicle subsystems to achieve remote or local code execution.",
            "full_description": "Specifically, adversaries may exploit software vulnerabilities in client-facing ECUs, primarily the infotainment system, telematics unit, or other service-exposed modules to execute arbitrary code. These components often run complex operating systems (e.g., QNX, Linux) and embed third-party software libraries (e.g., QtWebkit, WebKit, Bluetooth stack), which may contain security flaws. \n Successfully exploiting such vulnerabilities allows adversaries to establish persistence, or escalate privileges inside the vehicle system.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5006", "M5015", "M5044", "M5045", "M5046"],
            "example": [
                {
					"reference ID": "RE0010",
					"description": "Researchers exploited buffer overflow vulnerability in Bluetooth stack and telematics firmware allows arbitrary code execution."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers exploited two vulnerabilities in QtWebkit of Central Information Display system to achieve arbitrary code execution"
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers discovered and exploited one zero-day vulnerability in QtWebkit of Central Information Display system to achieve arbitrary code execution"
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers exploited a heap buffer overflow in WebKit engine of QNX OS in Head Unit."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers exploited stack overflow vulnerability in provisioning updates."
				}
            ],
            "reference ID": ["RE0010", "RE0011", "RE0012","RE0013"]
        },
		{
            "ID": "T5023",
            "name": "Execution Through Firmware Modification (new)",
            "short_description": "Adversaries may modify ECU firmware to execute malicious logic within vehicle systems. This modification requires understanding the firmware layout, using chip-specific compilers or disassemblers, and uploading code through diagnostic reprogramming services.",
            "full_description": "Attackers can modify electronic control unit firmware to inject privileged malicious code. This allows them to run arbitrary code on the ECU, send CAN messages, suppress normal behavior, or survive system resets. \n Unlike command injection or diagnostic-based attacks, firmware modification embeds malicious code directly into the ECU's binary code or exploits firmware update vulnerabilities. This approach provides deeper system access, enabling attackers to move laterally, evade detection, and sabotage vehicle systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5009", "M5011", "M5018", "M5029"],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers modified firmware running on a Renesas V850 chip to execute crafted logic that allowed CAN message injection. The code was embedded using a patched assembler and executed via RoutineControl service."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers reverse-engineered the Toyota firmware update process and uploaded custom assembly code using diagnostic commands such as WriteMemory and RoutineControl to achieve arbitrary ECU control."
				}
            ],
            "reference ID": ["RE0014"]
        },
		{
            "ID": "T5024",
            "name": "Abuse Diagnostic Command (new)",
            "short_description": "Adversaries may exploit diagnostic services such as UDS to send unauthorised commands and gain control over vehicle components.",
            "full_description": "Unified Diagnostic Services  is the most widely used diagnostic protocol in the automotive domain, designed to execute service routines and commands within an Electronic Control Unit. These services are typically intended for maintenance, firmware updates, or system resets. \n  This technique involves sending specially crafted diagnostic messages, such as Diagnostic Session Control (0x10), SecurityAccess (0x27), RoutineControl (0x31), or WriteMemoryByAddress (0x34), to force an ECU into a special-purpose diagnostic mode. Once an ECU is placed in an extended or programming diagnostic session (e.g., via 0x10), and security access is granted (via 0x27), an adversary can suppress normal behaviours, disable safety-critical functions, or issue privileged commands, including firmware updates or memory reprogramming. \n Unlike the Command and Scripting Interpreter technique, which leverages Unix shells or ROS tools to run scripts or command-line utilities inside compromised systems, Diagnostic Command Execution does not rely on general-purpose interpreters. Instead, it directly utilises automotive-specific diagnostic protocols and formats. These commands are typically initiated from diagnostic tester devices, either physically connected (e.g., via the OBD-II port) or remotely executed through compromised vehicle subsystems such as telematics or infotainment units. \n This capability significantly broadens the attack surface, allowing an adversary to pivot to other tactics such as Persistence, Defense Evasion or Discovery.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5001", "M5002", "M5004", "M5008", "M5011", "M5013", "M5018", "M5023", "M5026", "M5029", "M5031", "M5032"],
            "example": [
                {
                    "reference ID": "RE0011",
                    "description": "Researchers found a weakness in Security Access service, which used fixed seed and simple XOR operations and AES algorithm, which allow them to bypass and do some privileged operations on ECUs."
                },
				{
                    "reference ID": "RE0013",
                    "description": "Researchers used internal tester, including NBT Head Unit and TCB to send UDS messages via RoutineControl, WriteDataByIdentifie and ECU reset service, to Reset, control or Reconfigure different ECUs."
                },				
				{
					"reference ID": "RE0041",
					"description": "Researchers used DiagnosticSessionControl and RoutineControl to invoke pre-programmed routines on ECUs, enabling control over actuators like seatbelt tensioners and pre-collision braking."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers used SecurityAccess service to request a seed and send the calculated key to unlock privileged diagnostic access on ECUs."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers used RequestDownload and TransferData services to upload data to ECUs, showcasing how firmware could be altered via diagnostic protocols."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers injected InputOutputControl and WriteDataByIdentifier messages to simulate sensor values and control vehicle states via diagnostic interfaces."
				}
            ],
            "reference ID": ["RE0011","RE0013","RE0041"]
        },
		{
            "ID": "T5025",
            "name": "External application (new)",
            "short_description": "Adversaries may use external applications to execute payloads or send crafted messages into the in-vehicle network.",
            "full_description": "Adversarials can use external applications, especially those on mobile devices connected to vehicles, to send malicious commands or run harmful code on vehicle systems. They can exploit vehicle connections like OBD2 Bluetooth adapters or in-car WiFi to send commands from a remote server to the vehicle's internal network. \n Unlike other execution techniques that target the vehicle's control units, this technique uses external applications. This strategy gives attackers deeper system access through user-installed software, allowing them to move on to other attacks like maintaining access, gaining higher privileges, avoiding detection, or gathering information.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5004", "M5005", "M5006", "M5007", "M5026"],
            "example": [
                {
					"reference ID": "RE0022",
					"description": "Researchers used an infected application on the mobile phone to send commands to the vehicle and communicate with the attacker's server."
				}
            ],
            "reference ID": ["RE0022"]
        },
		{
            "ID": "T5026",
            "name": "OTA Process Manipulation (new)",
            "short_description": "Adversaries may use the OTA update process to deliver and execute unauthorised code or firmware in vehicle systems.",
            "full_description": "Adversaries may use OTA update mechanisms to deliver and execute unauthorised code on in-vehicle components. This involves exploiting flaws in the OTA process, such as bypassing code-signing protections, manipulating update metadata, or abusing update daemons to install and run modified firmware or executables. \n Unlike local firmware modification via physical access or diagnostics, OTA process manipulation enables remote execution across telematics, infotainment, or critical ECUs. This can lead to persistent backdoors, or enable follow-on techniques such as lateral movement, privilege escalation, and persistence.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5005", "M5009", "M5013", "M5018", "M5022", "M5039"],
            "example": [
                {
                    "reference ID": "RE0012",
                    "description": "Researchers exploited Tesla's OTA update process by bypassing code signing checks in the update packages and abusing the OTA update daemons such as 'cid-updater' and 'ape-updater' to flash malicious firmware onto ECUs. They manipulated update metadata (e.g., JSON manifests and versioning files) to insert custom payloads and used remote triggers to execute the OTA flow, successfully compromising the Gateway, Body Control Module (BCM), and Autopilot ECUs."
                }
            ],
            "reference ID": ["RE0012"]
        },
		{
            "ID": "T5028",
            "name": "Execution through API",
            "short_description": "Adversaries may abuse exposed or insecure APIs to execute remote vehicle commands or retrieve sensitive vehicle and user information.",
            "full_description": "In the automotive industry, APIs enable remote services like vehicle locking/unlocking, engine starting, GPS tracking, and fleet management. These APIs integrate with telematics units and mobile apps through backend infrastructure. \n Attackers can exploit API vulnerabilities including weak authentication, default credentials, incorrect permissions, or exposed endpoints. Such access could enable control of non-critical vehicle functions, like horn activation or door unlocking and expose sensitive data such as vehicle location and personal information. \n While these attacks typically cannot access the in-vehicle network directly, they may provide a foothold for deeper penetration into poorly secured manufacturer cloud systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5005", "M5008"],
            "example": [
                {
					"reference ID": "RE0037",
					"description": "Researchers discovered API flaws in multiple brands that allowed remote control of vehicle functions such as unlocking, starting engines, and honking the horn due to weak authentication and misconfigured access controls."
				},
				{
					"reference ID": "RE0038",
					"description": "An exposed TeslaMate dashboard allowed access to Tesla API tokens, enabling remote actions like honking the horn or locating vehicles."
				},
				{
					"reference ID": "RE0039",
					"description": "At Pwn2Own Automotive 2024, researchers used stolen credentials to send commands via backend APIs to control vehicles remotely."
				},
				{
					"reference ID": "RE0040",
					"description": "Toyota's CRM system exposed vehicle APIs without proper server-side validation, allowing attackers to access customer data by modifying client-side JavaScript. "
				}
            ],
            "reference ID": []
        },
		{
            "ID": "T5029",
            "name": "Account Manipulation",
            "short_description": "Adversaries may manipulate or reuse system accounts to maintain persistent access within the vehicle network.",
            "full_description": "Adversaries may manipulate system accounts to retain or elevate access to autonomous vehicle components. This may involve reusing session credentials, such as SSH keys, modifying authentication parameters, or assigning elevated roles to accounts. \n Unlike initial access techniques, this persistence tactic enables continued control over vehicle systems even after reboots or attempted resets.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5032", "M5035", "M5036"],
            "example": [
                {
                    "reference ID": "RE0004",
                    "description": "Researchers reused administrative SSH access via session hijacking to persistently control the ROS-based navigation of a Husky UGV, even overriding the legitimate operator."
                }
            ],
            "reference ID": ["RE0004"]
        },		
		{
            "ID": "T5031",
            "name": "Create or Modify System Process",
            "short_description": "Adversaries may create or modify system configuration or process files within vehicle components to enable automatic execution of malicious behaviour during system start-up or runtime.",
            "full_description": "Adversaries can achieve persistence by modifying system process configurations , including launch files, service configurations, and runtime-triggered scripts  within electronic control units or domain controllers. These files and scripts execute automatically during the boot process or system runtime without user interaction. \n Such modifications enable persistent execution across reboots or environmental triggers. \n Unlike techniques in the Enterprise domain that rely on traditional operating system services, these methods exploit startup logic and embedded system mechanisms specific to automotive software.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5009", "M5022", "M5036"],
            "example": [
                {
                    "reference ID": "RE0005",
                    "description": "Researchers modify ROS config/launch files to alter node behaviour on startup. These modifications take effect after a restart and changes persist across reboots."
                },
				{
                    "reference ID": "RE0013",
                    "description": "Researchers modify pdm_nbt.xml, which is loaded and executed by the system's telematics functions. This will executes diagnostic messages onto K-CAN without user interaction."
                }
            ],
            "reference ID": ["RE0005", "RE0013"]
        },
		{
            "ID": "T5032",
            "name": "Modify Program",
            "short_description": "Adversaries may inject or modify a program or a file in a vehicle’s firmware to maintain persistence. This could involve adding new functionality, altering existing code, or injecting malware to gain long-term control over the system.",
            "full_description": "In autonomous vehicles, adversaries can maintain persistence by modifying firmware or injecting programs into the vehicle's systems. This involves altering existing program code in the ECU, such as adding new functions, changing logic, or inserting malware during firmware updates. \n These modifications persistently alter vehicle behavior, allowing adversaries to control the system or trigger malicious actions. This technique pairs effectively with ``Event triggered execution`` to set specific activation conditions. \n Unlike the ``Pre-OS Boot: System Firmware`` technique, which involves major system changes, this technique makes smaller, targeted modifications to existing firmware or injects minor programs.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5008", "M5009", "M5018", "M5022", "M5039"],
            "example": [
                {
                    "reference ID": "RE0012",
                    "description": "Reseachers provides some patching on the Easter Eggs functions to change the motion list and skip signal check, to make the vehicle do custom move."
                },	
{
                    "reference ID": "RE0012",
                    "description": "Reseachers modify gtw.hex in Gateway ECU to open a backdoor, to send CAN bus when car is running."
                },				
				{
                    "reference ID": "RE0010",
                    "description": "Reseachers add a program which contacts with PassThru device, exploit it and modify startup script to make it always enabled."
                },
				{
					"reference ID": "RE0046",
					"description": "Researchers uploaded modified firmware to the Parking Assist Module and Electronic Parking Brake from within the vehicle’s network to enable persistent control."
				}
            ],
            "reference ID": ["RE0046","RE0010", "RE0012"]
        },
		{
            "ID": "T5033",
            "name": "Event triggered execution",
            "short_description": "Adversaries may establish persistence by adding malicious code that runs only when certain events happen in the vehicle.",
            "full_description": "In autonomous or connected vehicles, attackers can maintain persistence or hide malicious code by embedding triggers that activate at specific events, such as reaching certain vehicle speeds, steering angles, gear positions, or sensor readings. These event-driven mechanisms are typically embedded in ECU firmware, diagnostic routines, or control logic. \n Since these triggers are based on functional states or ECU-specific logic rather than typical operating system events, they're more difficult to identify during static analysis or early testing phases.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5036", "M5045", "M5046"],
            "example": [
                {
					"reference ID": "RE0016",
					"description": "Researchers added malicious code with a predefined condition: when the car's speed exceeds 200 km/h, the code replays the CAN message that triggers the driver's window to open."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers developed a program that sends malicious messages when a PassThru device connects to the vehicle. This program waits for specific environmental triggers, such as a predefined date and time, before sending messages."
				}
            ],
            "reference ID": ["RE0010","RE0016"]
        },
		{
            "ID": "T5036",
            "name": "Pre-OS Boot",
            "short_description": "Adversaries can modify or flash firmware on a vehicle's Electronic Control Units to establish persistence, gaining control over the system before it fully boots.",
            "full_description": "Adversaries gain persistence by modifying or flashing system firmware during the boot process. This involves altering firmware on the ECU, to install custom functions or malware before the operating system loads. \n These modifications persist across reboots and are difficult to detect because they occur below the operating system, making them bypass host-based defenses. This technique ensures the adversary retains control over the vehicle's systems, enabling them to manipulate ECU behavior even if the operating system is reset or reinstalled. \nCompared to the Modify Program technique, this technique involves more fundamental changes. It typically requires flashing or replacing large portions of the firmware at a system level, making it a more invasive and detectable attack.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5009", "M5018", "M5022", "M5036", "M5039", "M5045"],
            "example": [
                {
					"reference ID": "RE0011",
					"description": "Researchers modified Gateway firmware and edited boot.img to bypass update verification, enabling persistent execution after every reboot"
				},				
				{
					"reference ID": "RE0012",
					"description": "Researchers flashed custom firmware onto the Gateway, BCMs, and APE, making the attack persist after reboots."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers reflashed the TPMS firmware to install code that detects and sends specific CAN packets to the in-vehicle network."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers reprogrammed the V850 firmware to maintain long-term access and enable repeated CAN message injection."
				}
            ],
            "reference ID": ["RE0011", "RE0012", "RE0010", "RE0014"]
        },
		{
            "ID": "T5038",
            "name": "Valid Accounts",
            "short_description": "Adversaries may exploit valid credentials to access autonomous vehicle systems or services, bypassing authentication to gain unauthorized control or maintain persistent access.",
            "full_description": "In autonomous vehicles, adversaries may exploit default, weak, or misconfigured accounts to access internal systems such as infotainment units, telematics control units, or ROS-based environments. \n These accounts often exposed via SSH, Telnet, or web services, and may lack password protection or rely on default credentials. \n Common targets include: \n\t - Default or hardcoded Linux accounts (e.g., root on infotainment systems) \n\t - Remote shell services (SSH/Telnet)\n\t - Cloud-based telemetry or OTA management portals. \n\t - Third-party applications. \n Unlike exploitation techniques that leverage software flaws, this method relies on using legitimate credentials and often allowing full system access without triggering alarms.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5004", "M5034", "M5036"],
            "example": [
                {
					"reference ID": "RE0004",
					"description": "Researchers' SSH session with administrator privileges enables full control of ROS packages."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers demonstrate that the Central Information Display system can SSH to the Instrument Cluster and gain root privileges without a password."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers show that the Central Information Display system can telnet to the Parrot system without password authentication or restrictions."
				}
            ],
            "reference ID": ["RE0004","RE0013"]
        },
		{
            "ID": "T5039",
            "name": "Abuse Elevation Control Mechanisms",
            "short_description": "Adversaries may abuse or bypass built-in permission controls to gain higher-level access in a vehicle system.",
            "full_description": "Autonomous vehicles use access control mechanisms, such as diagnostic security levels, or authentication protocols to restrict access to critical functions. Adversaries may abuse these mechanisms by exploiting weak configurations or protocol flaws to elevate privileges. For example, bypassing UDS Security Access to perform ECU reprogramming or abusing default permissions to activate diagnostic services. \n This technique differs from Exploitation for Privilege Escalation, which involves exploiting software vulnerabilities to gain higher privileges. In contrast, Abuse Elevation Control Mechanisms relies on misusing or tricking existing controls rather than exploiting coding flaws. It typically targets design weaknesses or poor enforcement of permissions, rather than programming bugs.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5029", "M5036", "M5045"],
            "example": [
                {
					"reference ID": "RE0009",
					"description": "Researchers exploited weak protocol standard access controls to gain permission for diagnostic services and ECU updates."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers bypassed the Security Access function to gain permission for critical actions."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers can inject diagnostic messages into critical ECUs by exploiting the control features in the Gateway unit."
				},
				{
					"reference ID": "RE0016",
					"description": "Researchers exploit OBD-II filtering to gain elevated permissions for accessing critical CAN communications."
				}
            ],
            "reference ID": ["RE0009","RE0016", "RE0011", "RE0013"]
        },
		{
            "ID": "T5040",
            "name": "Exploitation for Privilege Escalation",
            "short_description": "Adversaries may exploit software vulnerabilities in AV systems to gain elevated privileges and execute unauthorised actions.",
            "full_description": "Adversaries may exploit vulnerabilities in operating systems or services—especially within infotainment or telematics units running Linux-based environments—to gain root or administrative access. \n Unlike embedded ECUs that often lack a traditional access control model, infotainment and telematic systems provide clearer privilege boundaries. Exploiting these systems allows adversaries to gain high-level control and potentially pivot to other components via internal networks. \n This technique differs from Abuse Elevation Control Mechanisms, which targets weak or misused access controls rather than software flaws.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5006", "M5015", "M5035", "M5044", "M5045", "M5046"],
            "example": [
                {
					"reference ID": "RE0012",
					"description": "Researchers exploited a kernel vulnerability (CVE-2017-6261) to gain root access to the CID."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers exploited a vulnerability to gain elevated permissions and root privileges on the Head Unit and TCB."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers gained root access to the Uconnect head unit by exploiting command injection vulnerabilities in the D-Bus."
				}
            ],
            "reference ID": ["RE0012","RE0013","RE0014"]
        },
		{
            "ID": "T5041",
            "name": "Impair Defenses",
            "short_description": "Adversaries may disable or modify defensive mechanisms in autonomous vehicle systems to evade detection and enable further malicious activity.",
            "full_description": "This includes modifying or disabling native system protections such as kernel-level security modules, loggers, and firewall rules. These protections are primarily found in Linux-based platforms, which are common in telematics and infotainment control units. \n In some cases, adversaries tamper with system-level operations to erase traces of malicious activity by wiping logs or removing attack code after execution. These actions aim to evade forensic analysis, prevent alert generation, and suppress security policies. \n The impact of impairing defenses not only conceals the attacker's presence but also enables other tactics, such as Persistence, Discovery, Execution, or Lateral Movement to be carried out.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5023"],
            "example": [
                {
					"reference ID": "RE0011",
					"description": "Researchers invoked reset_security_ops() to disable AppArmor and gain root access on CID"
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers patched aa_g_profile_mode in the kernel to disable AppArmor security protections"
				},
				{
					"reference ID": "RE0009",
					"description": "Researchers embedded attack code within telematics ECU and erased evidence after the attack"
				}
            ],
            "reference ID": ["RE0011","RE0012","RE0009"]
        },
		{
            "ID": "T5042",
            "name": "Obfuscated Files or Information",
            "short_description": "Adversaries may hide malicious content within files to evade detection or analysis.",
            "full_description": "Adversaries may use obfuscation techniques, such as encoding, encryption, or deceptive formatting to hide malicious content within files used by the vehicle system. \n  In autonomous vehicles, this may involve disguising payloads inside media files, configuration scripts, firmware packages, or diagnostic instructions to evade detection by security mechanisms and analysts. These files appear harmless to the system or user while delivering hidden functionality for initial access, execution, or further evasion.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5003"],
            "example": [
               {
					"reference ID": "RE0010",
					"description": "Researchers designed malicious WMA files that appeared as normal audio tracks but contained malicious information"
				}
            ],
            "reference ID": ["RE0010"]
        },
		{
            "ID": "T5043",
            "name": "Bypass Authentication Challenge (new)",
            "short_description": "Adversaries may bypass authentication challenges to disable protections and gain unauthorised access to restricted vehicle functions or data.",
            "full_description": "Authentication challenges are typically implemented through diagnostic protocols (e.g., UDS Security Access), backdoor mechanisms, or other ECU-level access controls. Attackers can evade these protections by exploiting weak algorithms, replaying static seeds, or using fault injection to disrupt security checks. This allows them to bypass security barriers without alerts or valid credentials, gaining access to restricted commands, memory, and configuration functions while circumventing normal authentication processes. \n Such authentication bypasses often enable broader attacks like firmware extraction, unauthorized command execution, or ECU reconfiguration. They may serve as stepping stones to persistence, execution, or system impact.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5029"],
            "example": [
				{
					"reference ID": "RE0011",
					"description": "Researchers bypassed the UDS Security Access service by breaking a weak algorithm in the challenge-response mechanism."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers bypassed the security token of the backdoor by discovering that the token was static in the IC firmware."
				},
				{
					"reference ID": "RE0041",
					"description": "Since Ford vehicles always send the same seed, the response remains constant, allowing researchers to sniff and replay the message to bypass the challenge-response mechanism."
				},
				{
					"reference ID": "RE0043",
					"description": "Researchers targeted the privilege check inside ReadMemoryByAddress by sending commands over the CAN bus. They triggered a voltage glitch during the 1700-microsecond delay before the ECU response. This glitch disrupted the privilege-check logic, causing the ECU to return protected memory data without authentication verification. By repeating this glitch approximately 300,000 times, they extracted the full 512 KB firmware over 3 days."
				}
            ],
            "reference ID": ["RE0011", "RE0041", "RE0043"]
        },
		{
            "ID": "T5044",
            "name": "Bypass Code Integrity Checks(new)",
            "short_description": "Adversaries may bypass code integrity checks to weaken protection mechanisms and install unauthorised code without detection.",
            "full_description": "Adversaries may bypass code integrity mechanisms, such as signing checks or checksums to weaken built-in protections and avoid detection. These protections ensure that ECUs and other components accept only authentic code or messages. \n In autonomous vehicle systems, this may include: \n\t - Bypassing signature checks to install malicious firmware on ECUs \n\t - Circumventing checksum validation to inject fake but seemingly legitimate CAN messages \n\t - Disabling code integrity checks to run modified software. \n When bypassed, unauthorized firmware or crafted messages can enter the system without triggering security controls. \n Successfully evading these integrity checks enables attackers to install persistent code, inject malicious messages, or escalate privileges within the vehicle network.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5029"],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers reverse engineered the Renesas V850 chip to bypass the checksum and data integrity technique to craft arbitrary messages that would be valid to the ECUs listening"
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers bypassed the code signing in the Gateway to install custom firmware."
				},
				{
					"reference ID": "RE0023",
					"description": "Researchers bypassed the code signing mechanism to flash a custom SH2A MCU firmware after the T-Box system was compromised."
				}
            ],
            "reference ID": ["RE0014", "RE0012", "RE0023"]
        },
		{
            "ID": "T5048",
            "name": "Adversary-in-the-Middle",
            "short_description": "Adversaries may intercept authentication-related traffic between vehicle components or external devices to steal credentials or pairing data.",
            "full_description": "Adversaries may position themselves between two communicating entities within or around the vehicle system to intercept authentication materials such as tokens, challenge–response values, or Bluetooth pairing keys. This adversary-in-the-middle position enables the attacker to monitor or manipulate traffic during authentication flows, potentially allowing them to steal credentials and gain unauthorised access to vehicle systems. \n In the automotive context, this may involve sniffing seed-key exchanges during ECU programming (e.g., UDS SecurityAccess), or intercepting Bluetooth pairing attempts to recover MAC addresses and PINs. These credentials can then be replayed or used to impersonate legitimate devices and unlock vehicle functions without detection.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5017", "M5031", "M5032"],
            "example": [
                {
					"reference ID": "RE0011",
					"description": "Researchers sniffed UDS SecurityAccess seed and key values during an ECU firmware flashing process. They discovered that the ECU returned a fixed seed and accepted a predictable key, allowing them to replay these values and unlock the ECU without computing the correct response."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers sniffed Bluetooth MAC addresses using open-source tools like Bluesniff and a USRP-based software radio when the car initiated pairing with a known device. After identifying the MAC address, they brute-forced the PIN required for pairing."
				}			
            ],
            "reference ID": ["RE0010", "RE0011"]
        },
		{
            "ID": "T5045",
            "name": "Brute Force",
            "short_description": "Adversaries may use brute force techniques to gain access to credentials used by vehicle systems or connected services.",
            "full_description": "Adversaries may use brute force techniques to obtain valid credentials when passwords, PINs, or keys are unknown. This includes repeatedly guessing login information through direct interaction with services (e.g., SSH, Bluetooth pairing) or offline analysis (e.g., cracking WPA2 handshakes). \n In autonomous vehicle systems, targets may include OS-level accounts, wireless authentication (e.g., Wi-Fi, Bluetooth), vehicle-connected applications, or cloud services integrated with the vehicle. \n Successful brute forcing can enable access to restricted functions or data, supporting further tactics such as Lateral Movement, Execution, or Discovery.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5028", "M5035"],
            "example": [
                {
					"reference ID": "RE0003",
					"description": "Researchers performed a disassociation attack on a UAV's Wi-Fi connection to repeatedly trigger WPA2 four-way handshakes. By eavesdropping on these handshakes, they intercepted the Message Integrity Code, which can be used to guess the WPA2 pre-shared key and derive encryption keys."
				},
				{
					"reference ID": "RE0004",
					"description": "Researchers conducted a dictionary-based brute force attack on SSH authentication of the Husky UGV onboard computer."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers brute-forced Bluetooth PINs to enable pairing without driver awareness."
				}
            ],
            "reference ID": ["RE0003", "RE0004", "RE0010"]
        },
		{
            "ID": "T5046",
            "name": "Modify Authentication Process",
            "short_description": "Adversaries may alter the authentication process to bypass access controls or impersonate legitimate users.",
            "full_description": "They may modify authentication logic in vehicle systems or connected platforms to gain unauthorised access without using valid credentials. This may include altering firmware-level checks within ECUs, crafting fake authentication messages or manipulating client-side code in web interfaces that interact with vehicle services. \n By changing how authentication is handled, attackers can access vehicle functions, user data, or backend systems. This technique may be used to unlock vehicles, access internal tools, or impersonate users without triggering standard access controls.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5036"],
            "example": [
                {
				  "reference ID": "RE0031",
				  "description": "Researchers reverse-engineered the ECU firmware in VW Group vehicles and discovered a global master key used for authentication. They then modify the authentication logic flow by creating their own “valid” authentication packets using the known master key, tricking the vehicle into granting access."
				},
				{
				  "reference ID": "RE0040",
				  "description": "Researchers modified the JavaScript login logic in the dev version of Toyota's CRM app to trick the app into thinking a user was logged in, bypassing the authentication process entirely.."
				}
            ],
            "reference ID": ["RE0031", "RE0040"]
        },
		{
            "ID": "T5047",
            "name": "Exploitation for  Credential Access",
            "short_description": "Adversaries may exploit software vulnerabilities or misconfigurations to gain access to credentials or authenticated systems.",
            "full_description": "Adversaries may exploit vulnerabilities or logic flaws in vehicle-connected systems, mobile apps, cloud services, or identity platforms to obtain credentials or bypass authentication mechanisms.\n  This can involve modifying application behaviour, abusing insecure API interactions, or exploiting misconfigured authentication flows such as Single Sign-On (SSO). \n In the AV ecosystem, successful exploitation can expose credentials for backend services, user accounts, or cloud-connected vehicle platforms, potentially leading to further access and control across systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5004", "M5006", "M5015", "M5044", "M5045", "M5046"],
            "example": [
                {
					"reference ID": "RE0040",
					"description": "Researchers bypassed login security by modifying the development application's JavaScript and redirecting it to production APIs that lacked authentication, which allowed access to actual customer credentials and data."
				},
				{
					"reference ID": "RE0037",
					"description": "Researchers exploited misconfigurations in Single Sign-On portals to perform password resets, gaining complete control over employee and contractor accounts."
				}
            ],
            "reference ID": ["RE0037","RE0040"]
        },
		{
            "ID": "T5049",
            "name": "Steal Application Access Token",
            "short_description": "Adversaries may steal access tokens from vehicle-connected applications to gain unauthorised access to remote systems or services.",
            "full_description": "Application access tokens are used to authenticate API requests on behalf of a user or service. In autonomous vehicle ecosystems, tokens may be used by mobile apps, third-party platforms, or telematics systems to access vehicle functions, user data, or backend services.\n Adversaries may exploit insecure token storage, misconfigurations, or exposed dashboards in third-party applications to extract valid access tokens. \n For example, researchers accessed misconfigured TeslaMate dashboards and extracted Tesla API tokens, which allowed unauthorised remote control over multiple vehicles. Once stolen, tokens can be used to interact with vehicle APIs with the same permissions as the legitimate user, potentially enabling actions like unlocking doors, disabling protections, or tracking location.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5004", "M5036", "M5034", "M5031"],
            "example": [
                {
					"reference ID": "RE0038",			
					"description": "Tesla owners use third-party applications like TeslaMate that have misconfigurations and security weaknesses. These applications store sensitive information, including Tesla API keys, without adequate protection. Researchers can exploit these vulnerabilities to extract the API keys from exposed TeslaMate dashboards."
				}
            ],
            "reference ID": ["RE0038"]
        },
		{
            "ID": "T5050",
            "name": "Network Sniffing",
            "short_description": "Adversaries may passively capture in-vehicle or external network traffic to identify communication structures, credentials, or operational data.",
            "full_description": "Network sniffing refers to the passive monitoring or capture of data on a vehicle’s internal or external network interfaces. Adversaries may leverage direct access, such as OBD-II or Ethernet ports, to place the interface into monitoring mode and intercept messages transmitted between Electronic Control Units (ECUs) or backend servers. In-vehicle network sniffing typically focuses on CAN bus communication, revealing message IDs, control commands, and diagnostic exchanges. \n Vehicles may also use Ethernet or wireless connections for communication with external services, often over protocols such as HTTP, HTTPS, or MQTT. If unencrypted or misconfigured, these channels may expose sensitive operational data, update requests, or credentials to sniffing attacks. \n This technique provides attackers with knowledge required for further activities such as replay, spoofing, or remote exploitation.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": ["T5050.001"],
            "mitigation_ids": ["M5010", "M5011", "M5013", "M5026"],
            "example": [
                {
					"reference ID": "RE0016",
					"description": "Researchers sniff communication to capture the CAN messages between ECUs and diagnostic messages between ECUs and gateway."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers sniff and capture CAN messages from the vehicle via OBD-II port and diagnostic application."
				},
				{
					"reference ID": "RE0044",
					"description": "Researchers describes how attackers can connect to the OBD-II port and use sniffing tools like can-utils to monitor CAN traffic. By observing message IDs and data patterns."
				}
            ],
            "reference ID": ["RE0014","RE0016", "RE0022", "RE0044", "RE0011"]
        },
		{
            "ID": "T5037",
            "name": "Network Service Discovery",
            "short_description": "Adversaries may attempt to identify services running on remote systems within the in-vehicle network or on connected external interfaces.",
            "full_description": "This is often done to discover services that can be exploited for lateral movement, remote code execution, or privilege escalation.\n Within connected and autonomous vehicles, this discovery may involve scanning the in-vehicle Ethernet network between components such as the head unit, telematics unit, and gateways. Tools like nmap can be used after gaining local access to identify open ports and active daemons, such as HTTP servers, D-Bus over IP, SSH, or custom diagnostic services.\n Externally, adversaries may scan communication links between the vehicle and backend infrastructure, such as over Wi-Fi, cellular, or OTA update channels to enumerate exposed services. Discovering these services allows attackers to understand system architecture, assess attack surfaces, and plan subsequent actions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5032"],
            "example": [
                {
					"reference ID": "RE0013",
					"description": "Researchers gained access to the vehicle’s internal Ethernet network via a USB-to-Ethernet adapter. They ran nmap scans to identify open ports and running services on different IP addresses. This scanning revealed remote services that might be exploitable."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers performed an nmap scan on a Jeep Cherokee vehicle to identify exposed TCP services. The scan revealed multiple open ports prior to the patch, including 6667 and 6010, which were D-Bus over IP ports used for inter-process communication (IPC) and remote procedure call (RPC) mechanisms."
				}
            ],
            "reference ID": ["RE0013","RE0014"]
        },
		{
            "ID": "T5051",
            "name": "System Network Connection Discovery",
            "short_description": "Adversaries may attempt to get a listing of network connections between ECUs or to/from a compromised vehicle system by querying internal communication paths",
            "full_description": "This technique involves discovering current or potential network connections between components within the vehicle or between the vehicle and external systems. \n Within the vehicle, attackers may use utilities such as `netstat` or inspect Ethernet and wireless interfaces to identify active communication links across domains like infotainment, telematics, and gateways. In addition to standard system tools, adversaries in the automotive domain may actively probe the internal network by sending crafted diagnostic or CAN messages and observing which ECUs respond. \n Unlike Network Sniffing, which passively captures data, or Network Service Discovery, which scans for listening services (e.g., with nmap), this technique focuses on uncovering ``who is talking to whom`` within the system or over internal/external interfaces. \n  This knowledge enables targeted lateral movement, injection, or denial-of-service attacks on connected modules.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5029", "M5032", "M5031"],
            "example": [
                {
					"reference ID": "RE0010",
					"description": "Researchers compromised a PassThru device connected to a vehicle’s OBD-II port and used it to send pre-programmed messages over the CAN bus to discover connected ECUs and internal communication structure."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers used netstat on the Uconnect system to list active TCP listeners and identify ports such as 6010, 6667, and 6020."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers inspected the network interfaces on the Uconnect system, identifying internal (uap0) and external (ppp) interfaces used for Wi-Fi and cellular communication. This provided insight into system-level communication paths and data flow."
				}
            ],
            "reference ID": ["RE0010", "RE0014"]
        },
		{
            "ID": "T5052",
            "name": "File and Directory Discovery",
            "short_description": "Adversaries may search for files or directories on vehicle systems to locate valuable information or components.",
            "full_description": "Adversaries may explore the file system of in-vehicle components, such as infotainment units, telematics ECUs, or gateways to discover configuration files, upgrade packages, debug logs, or binaries. These files may reveal system behaviours, hardware support, or update mechanisms that support further exploitation. File and directory discovery may occur via shell access, firmware unpacking, or by analysing mounted storage devices such as USB drives or SD cards.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5025"],
            "example": [
                {
					"reference ID": "RE0040",
					"description": "Researchers analyzed the Uconnect file system to locate sensitive configuration files and binaries."
				},
				{
					"reference ID": "RE0037",
					"description": "Researchers discovered the USB configuration file in NBT Head Unit which revealed that it supports several specific USB-to-ETHERNET adapters by default."
				},
				{
					"reference ID": "RE0038",			
					"description": "Researchers discovered that the vehicle's gateway connects to an SD card, allowing them to find debug and upgrade files."
				}
            ],
            "reference ID": ["RE0037","RE0038","RE0040"]
        },
		{
            "ID": "T5053",
            "name": "Remote Services",
            "short_description": "Adversaries may abuse remote services to gain access and move laterally.",
            "full_description": "In autonomous vehicles, remote access services, such as SSH, Telnet, or manufacturer-defined command ports allow attackers to move laterally between components once initial access is obtained. \n These services may be accessible due to weak configurations (e.g., hard-coded credentials, anonymous access, or improper key management). By logging in through these legitimate remote services, attackers can interact with or control critical ECUs. \n Unlike Exploitation of Remote Services techniques, this method relies on valid credentials or insecure service configurations rather than software vulnerabilities.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5036", "M5034", "M5031", "M5035"],
            "example": [
                {
					"reference ID": "RE0011",
					"description": "Researchers accessed the Instrument Cluster (IC) via SSH using stored private keys without a password, enabling full root access for lateral movement from the CID."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers connected to the Parrot system via Telnet through an open port without authentication, gaining control over the component."
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers used command port 3500 on the gateway to trigger a Telnet shell on port 23, which could be accessed using a hard-coded password, allowing remote login and further actions."
				}
            ],
            "reference ID": ["RE0011", "RE0012"]
        },
		{
            "ID": "T5076",
            "name": "Exploitation of Remote Services",
            "short_description": "Adversaries may exploit software vulnerabilities in remote services to move laterally within the vehicle network",
            "full_description": "In autonomous vehicles, remote services include diagnostic interfaces, inter-process communication channels, testing tools, and network protocols running on components like head units, gateway ECUs, and telematics units. These exploits enable unauthorized code execution or control over other ECUs without requiring valid credentials. \n Successful exploitation allows lateral movement across the in-vehicle network, letting adversaries inject CAN or UDS messages, flash firmware, manipulate system behavior, and affect safety-critical functions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5006", "M5015", "M5023", "M5032", "M5036", "M5044", "M5045", "M5046"],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers exploited a vulnerability in the D-Bus service running on the head unit to achieve lateral movement towards other systems connected via the CAN bus."
				},
				{
					  "reference ID": "RE0011",
					  "description": "Researchers identified and exploited software vulnerabilities in the CID and gateway ECUs, enabling them to remotely inject CAN messages and manipulate other ECUs within the vehicle network."
				},
				{
					  "reference ID": "RE0013",
					  "description": "Researchers exploited vulnerabilities in the Head Unit and Telematics Control Box (TCB) to gain root privileges, allowing them to remotely transmit CAN and UDS messages to control downstream ECUs."
				}
            ],
            "reference ID": ["RE0011", "RE0013","RE0014"]
        },
		{
            "ID": "T5054",
            "name": "Lateral Tool Transfer",
            "short_description": "Adversaries may transfer tools or payloads between systems within the in-vehicle network to facilitate further lateral movement actions.",
            "full_description": "After gaining access to a vehicle's internal network, adversaries can move malicious tools, scripts, or custom payloads between components, for example, from the head unit to other ECUs. \n This typically involves uploading SSH keys, configuration files, or modified firmware images to exploit vulnerabilities or establish control. These transfers occur through legitimate update mechanisms, diagnostic sessions, OBD-II port interfaces, or custom protocols. \n This technique allows attackers to move laterally across ECUs to launch additional attacks or maintain persistent access to the system.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5017", "M5023"],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researcher uploaded SSH public key and configuration file to the head unit for further exploitation and control."
				},
				{
					  "reference ID": "RE0010",
					  "description": "Researchers use already-compromised PassThru devices to install malicious binaries on vehicles during routine service. The malware could propagate to the vehicle’s telematics ECU, and even act as a worm to infect more PassThru devices and cars."
				}
            ],
            "reference ID": ["RE0010","RE0014"]
        },
		{
            "ID": "T5055",
            "name": "Vehicle Worm Propagation (new)",
            "short_description": "Adversaries may deploy self-replicating malware that autonomously spreads across connected vehicles, enabling lateral movement through vehicular networks.",
			"full_description": "In autonomous vehicles, adversaries may design self-replicating malware capable of automatically scanning and spreading across multiple vehicles.\n  Unlike traditional lateral movement that targets a single system, this technique focuses on propagation across vehicle fleets connected via cellular networks, Wi-Fi, or vehicle-to-vehicle (V2V) communication. After compromising an initial vehicle, the worm can exploit the same vulnerability in neighboring vehicles without requiring further attacker interaction. \n Though this type of attack hasn't been demonstrated in practice, researchers have proposed it as a highly feasible and impactful scenario, especially in urban areas where vehicles frequently cluster. \n Successful execution of this technique could lead to mass compromise, coordinated vehicle manipulation, or widespread disruption of transportation systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5003"],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers proposed the idea of a vehicle worm that would automate scanning, exploitation, and remote control across vulnerable vehicles connected via cellular networks."
				},
				{
					"reference ID": "RE0047",
					"description": "Researchers proposed an epidemic model for vehicular worm propagation using V2V communication. The study demonstrated how worms could autonomously spread through urban traffic, infecting a large portion of the fleet in minutes under high mobility conditions."
				}

            ],
            "reference ID": ["RE0014", "RE0047"]
        },
		{
            "ID": "T5056",
            "name": "Data from Local System",
            "short_description": "Adversaries may collect data stored locally within vehicle systems to support their objectives.",
            "full_description": "This data includes configuration files, navigation history, GPS coordinates, vehicle identifiers, and internal communication logs (e.g., CAN messages). \n Data collection can occur through either physical access or remote compromise. Attackers retrieve data from local nonvolatile memory, flash storage, file systems, or inter-process communication channels. They may also use connected mobile applications or external devices to access data from in-vehicle networks. \n This information enables attackers to understand system behavior, identify vulnerabilities, track user movement, or facilitate further attacks.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5033", "M5025", "M5028", "M5007", "M5034"],
            "example": [
                {
					"reference ID": "RE0002",
					"description": "Researchers targeted local data stored in nonvolatile memory in the unmanned system to extract sensitive information."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers exploited UConnect to collect multiple file systems from NAND flash memory, including Multimedia Card, Embedded Transaction File System and QNX file system."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers collected GPS data via D-Bus to track vehicle locations without user knowledge."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers collected CAN data from a malicious application on a mobile phone connected to the vehicle."
				}
            ],
            "reference ID": ["RE0002", "RE0014", "RE0022"]
        },
		{
            "ID": "T5071",
            "name": "Data from Removable Media",
            "short_description": "Adversaries may collect sensitive files from removable media connected to vehicle systems.",
            "full_description": "In automotive environments, removable media use is rare and typically limited to specific functions like infotainment systems, diagnostics, and firmware updates. When such media is connected and accessible, attackers with network or physical access can extract sensitive information, including logs, media files, and configuration data. \n For example, an SD card connected to a central gateway might store system updates, logs, and state information that could be valuable to attackers. \n While this technique isn't commonly seen due to the limited presence of removable media in most vehicles, it remains a potential security vulnerability in certain system designs",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5021"],
            "example": [
                {
					"reference ID": "RE0035",
					"description": "Researchers collected all files from the SD card connected to the Central Gateway after remotely gaining access to the vehicle's internal network."
				}
            ],
            "reference ID": ["RE0011"]
        },
		{
            "ID": "T5057",
            "name": "Adversary-in-the-Middle",
            "short_description": "Adversaries may intercept communication between vehicle systems or between the vehicle and external entities to collect sensitive data.",
            "full_description": "Adversaries may position themselves between communicating components, either within the vehicle (e.g., ECUs and gateways) or between the vehicle and external systems (e.g., backend servers, mobile apps, diagnostic tools). From this position, they can collect valuable information such as CAN messages, credentials, diagnostic data, and communication protocols. \n This technique can be used actively to support further attacks, such as replay or data injection. It often involves exploiting in-vehicle ECUs or external interfaces like Wi-Fi, Bluetooth, or cellular connections.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5017", "M5032"],
            "example": [
                {
					"reference ID": "RE0009",
					"description": "Researchers used CARShark to collect traffic on the CAN bus to reveal how to control vehicle functions."
				},
				{
					"reference ID": "RE0016",
					"description": "Researchers collected logs and memory dumps from ECU for further investigation and forensic support."
				},				
				{
					"reference ID": "RE0016",
					"description": "Researchers actively collected CAN data between ECUs by listening from the Gateway to analyze CAN message IDs and data for further attacks."
				},
				{
					"reference ID": "RE0023",
					"description": "Researchers collected SSID and passphrase from HeadUnit to T-box by listening to the CAN bus. This information allowed them to connect to more TCP and UDP ports."
				}
            ],
            "reference ID": ["RE0009", "RE0016", "RE0023"]
        },
		{
            "ID": "T5058",
            "name": "Input Capture",
            "short_description": "Adversaries may capture data inputs exchanged between processes within the vehicle system to collect sensitive information.",
            "full_description": "Unlike traditional computer networks where input capture involves keyboards or mice, in automotive systems, `input` refers to any data transmitted between processes. This data typically comes from ECUs, sensors, or subsystems and flows through inter-process communication (IPC) or internal messaging services (like PPS or D-Bus). These channels exchange various types of information, including GPS coordinates, media settings, and control signals. \n If accessible, adversaries can exploit these interfaces to observe or intercept such inputs without detection.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5033", "M5007", "M5036"],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers exploited the exposed D-Bus and PPS services on the Uconnect system to capture GPS coordinates and other inter-process data, such as media control commands."
				}
            ],
            "reference ID": ["RE0014"]
        },
		{
            "ID": "T5059",
            "name": "Data from Cloud Storage",
            "short_description": "Adversaries may collect data from cloud-based services associated with vehicles.",
            "full_description": "Adversaries may exploit vulnerabilities in cloud-based services or associated applications to collect sensitive vehicle data, including GPS locations, vehicle status, personal information, and telemetry. \n They can gain unauthorized access through compromised credentials, insecure APIs, or vulnerabilities in third-party applications.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5017"],
            "example": [
                {
					"reference ID": "RE0037",
					"description": "Researchers discovered vulnerabilities in telematics systems that allowed unauthorized access to GPS data, personal information, and vehicle control functions."
				},
				{
					"reference ID": "RE0038",
					"description": "Researchers gained remote access to more than 25 Tesla vehicles worldwide by exploiting a vulnerability in a third-party application, enabling them to collect GPS data and execute commands."
				},
				{
					"reference ID": "RE0039",
					"description": "Researchers demonstrated how an API vulnerability enabled remote vehicle interaction and location data access."
				}
            ],
            "reference ID": ["RE0037", "RE0038", "RE0039"]
        },
		{
            "ID": "T5060",
            "name": "Communication Through Removable Media",
            "short_description": "Adversaries may perform command and control using removable media devices to transmit commands to a vehicle system.",
            "full_description": "Attackers can control compromised vehicle components or communicate between a compromised external device and the vehicle using removable media (e.g., OBD-II dongles, PassThru devices, or USB devices). These devices act as bridges to transmit commands, diagnostic messages, or malicious payloads when network segmentation or air-gapped systems prevent direct communication. \n This approach enables attackers to maintain control and send commands to vehicles without needing real-time wireless connections.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5021", "M5007", "M5026", "M5015"],
            "example": [
                {
					"reference ID": "RE0010",
					"description": "Researchers used PassThru devices to compromise connected vehicles, perform diagnostics, and inject vehicle control commands."
				},
				{
					"reference ID": "RE0035",
					"description": "Researchers used wireless OBD-II dongles that connect directly to vehicle internal networks and communicate wirelessly with external applications to send vehicle control commands."
				}
            ],
            "reference ID": ["RE0010", "RE0035"]
        },
		{
            "ID": "T5061",
            "name": "Remote Access Software",
            "short_description": "Adversaries may use remote access software to establish command and control channels to in-vehicle systems.",
            "full_description": "In-vehicle systems contain command and control channels through pre-installed services (like Telnet, VNC, or manufacturer remote support tools) and third-party applications on connected devices such as smartphones. \n Attackers can exploit weak security configurations, including unauthenticated access and weak credentials to execute system commands or inject CAN messages. \n Once compromised, remote access software enables persistent access, allowing attackers to send commands to ECUs and orchestrate further attacks.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5017", "M5021"],
            "example": [
                {
					"reference ID": "RE0024",
					"description": "Researchers executed arbitrary system commands from Tesla's Parrot module via an unauthenticated Telnet port."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers remotely injected CAN messages through a malicious application installed on the driver's smartphone."
				}
            ],
            "reference ID": ["RE0022","RE0024"]
        },
		{
            "ID": "T5062",
            "name": "Application Layer Protocol",
            "short_description": "Adversaries may use standard application-layer protocols to send commands to in-vehicle systems or maintain communication with compromised components.",
            "full_description": "In autonomous vehicles, attackers can use application-layer protocols like TCP, HTTP, IRC, or proprietary communication formats to establish command and control channels and transmit malicious messages. These protocols, operating at the application layer (OSI Layer 7), normally handle legitimate functions such as media control, system services, and OTA updates. \n Attackers embed malicious commands or payloads within this seemingly normal traffic to evade detection and bypass network filtering. \n Unlike the Remote Access Software technique, this approach specifically leverages the protocols themselves for communication, rather than using a complete remote-control interface.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5017"],
            "example": [
				{
					"reference ID": "RE0011",
					"description": "Researchers connected to a D-Bus daemon over TCP and invoked a remote method to open a reverse shell, allowing commands to be sent and received over the network using application-layer protocol communication."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers established an IRC-based command and control channel over a cellular network to broadcast and deliver control messages to the vehicle."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers remotely sent CAN injection commands via a smartphone application that communicated over 3G/4G networks using standard application-layer protocols."
				}
            ],
            "reference ID": ["RE0010", "RE0011", "RE0022"]
        },
		{
            "ID": "T5063",
            "name": "Spoof report message",
            "short_description": "Adversaries may spoof reporting messages in autonomous vehicle systems to mislead diagnostic tools, monitoring components, or safety checks",
            "full_description": "Reporting messages in AVs often include diagnostic responses, sensor health, or module status data used to determine system readiness and safety state.\n By replaying or injecting spoofed report messages, adversaries can create the illusion that a system is functioning normally when it is not. For example, spoofing a diagnostic message that reports a healthy airbag system may prevent safety alerts or inhibit protective actions. This can also support other techniques such as Alarm Suppression or Block Command Message by concealing true system conditions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5010", "M5017", "M5030", "M5032"],
            "example": [
                {
					"reference ID": "RE0016",
					"description": "Researcher replayed normal diagnostic responses to emulate a healthy airbag system."
				}
            ],
            "reference ID": ["RE0016"]
        },
		{
            "ID": "T5064",
            "name": "Modify Parameter",
            "short_description": "Adversaries may modify parameters within control logic or embedded software to alter the behaviour of autonomous vehicle systems.",
            "full_description": "These parameters may influence decision thresholds, timing, or control responsiveness. For example, modifying PID controller gains during runtime can corrupt vehicle stability or trajectory following.\n  By adjusting these internal values, adversaries may cause the system to behave unpredictably, overreact, or underperform during critical operations.\n Unlike CAN injection or command message execution, which instruct the ECU from the outside, Modify Parameter alters the internal logic and how the ECU responds to those instructions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5008"],
            "example": [
                {
					"reference ID": "RE0015",
					"description": "Researcher injects malicious code into the control program, modifying PID controller parameters(e.g. proportional, integral and derivative gain) at runtime to corrupt vehicle stability and response."
				}
            ],
            "reference ID": ["RE0015"]
        },
		{
            "ID": "T5065",
            "name": "Alarm Suppression",
            "short_description": "Adversaries may target vehicle alarm systems to prevent them from notifying drivers or safety modules of abnormal or unsafe conditions.",
            "full_description": "Adversaries may suppress or tamper with vehicle alarm systems to prevent warnings from being triggered or noticed. \n In AVs, alarms may include seatbelt reminders, door ajar warnings, airbag malfunction indicators, brake system alerts, anti-theft notifications, check engine lights, and other dashboard related to safety-critical systems.\n Alarm suppression may involve injecting spoofed CAN messages, disabling ECU functions, tampering with memory values, or modifying firmware to hide the true state of the vehicle. \n By preventing visual, audible, or logged alerts, adversaries aim to inhibit operator response or safety system intervention.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5030", "M5032"],
            "example": [
				{
					"reference ID": "RE0016",
					"description": "Researchers disable the airbag warning notification, leaving the vehicle occupants unprotected in case of an accident."
				},
                {
					"reference ID": "RE0016",
					"description": "Researcher inject `light OFF` commands to suppress the anti-theft system."
				}
            ],
            "reference ID": ["R0016"]
        },
		{
            "ID": "T5066",
            "name": "Block Command Message",
            "short_description": "Adversarials may block critical command messages in vehicle systems, preventing normal response functions and control actions from executing.",
            "full_description": "In autonomous vehicles, Electronic Control Units send these command messages through CAN, FlexRay, or Ethernet networks. \n Blocking can happen in two ways: through signal manipulation, where sensor interference prevents the control system from issuing commands, or through low-level bus attacks like CAN dominant override, which keeps the bus in a busy state to block all other traffic. \n When these commands can't reach their destinations, attackers can disable safety features, slow down system responses, or create dangerous conditions. \n Unlike Alarm Suppression, which merely hides warnings, Block Command Message prevents actual, legitimate messages from executing.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5030"],
            "example": [
                {
					"reference ID": "RE0019",
					"description": "Researchers demonstrated an Emergency Brake attack in which an autonomous vehicle misinterpreted spoofed data as an obstacle, triggering an emergency stop."
				},
				{
					"reference ID": "RE0021",
					"description": "Researchers demonstrated radar and ultrasonic sensor jamming attacks that prevented the autonomous vehicle from detecting real obstacles, potentially leading to collisions or failure to respond to genuine threats."
				},
				{
					"reference ID": "RE0034",
					"description": "Researchers used dominant-override mode in a CAN injector to block other CAN devices from transmitting. By maintaining a continuous dominant signal, the attacker prevented legitimate control messages from reaching their intended ECUs"
				}
            ],
            "reference ID": ["RE0019", "RE0021"]
        },
		{
            "ID": "T5067",
            "name": "Exfiltration Over other network medium",
            "short_description": "Adversaries may exfiltrate collected data over a different communication medium than the vehicle's primary network interface.",
            "full_description": "Attackers can bypass normal vehicle communication channels by exfiltrating data through alternative network paths. For instance, while a vehicle may typically communicate with cloud services via a telematics LTE module, attackers might exploit Wi-Fi, Bluetooth, or separate mobile network connections to steal data. \n This technique is particularly relevant in automotive systems when data theft occurs through channels outside the vehicle's monitoring systems. For example, a malicious app on the vehicle's Android system could funnel sensitive data to another app with Internet access, or an OBD-II-connected device could transmit CAN data through its own cellular connection.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5021", "M5025", "M5026"],
            "example": [
                {
					"reference ID": "RE0022",
					"description": "Researchers used a malicious self-diagnostic app and attacker's server to exfiltrate CAN data through the smartphone's mobile network (3G/4G/LTE), which differs from the typical vehicle backend network."
				},
				{
					"reference ID": "RE0045",
					"description": "Researchers demonstrated that third-party apps on Android Automotive can exploit system intents to force other apps with Internet access to leak data. This technique bypasses permission controls and enables data exfiltration without direct network access."
				}
            ],
            "reference ID": ["RE0022", "RE0045"]
        },
		{
            "ID": "T5070",
            "name": "Exfiltration Over C2 Channel",
            "short_description": "Adversaries may exfiltrate data using the same communication channel established for command and control (C2) purposes",
            "full_description": "In automotive environments, command and control (C2) channels may include cloud-based APIs (e.g., Tesla API), compromised telematics units over cellular networks, OBD-II-based interfaces, or custom protocols such as IRC. Once the C2 connection is active, attackers may retrieve GPS location, microphone recordings, fleet data or diagnostic information directly through the same pathway used to issue commands.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5025", "M5026"],
            "example": [
                {
					"reference ID": "RE0038",
					"description": "Researcher used legitimate Tesla API credentials from third-party app misconfigurations to access multiple vehicles remotely. Through the same API channel, the attacker issued commands (e.g., unlock doors, disable sentry mode) and exfiltrated GPS location data."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers modified the telematics ECU to connect to an IRC server over a cellular data connection. The vehicle could then exfiltrate GPS location and in-cabin audio to the IRC server"
				}
            ],
            "reference ID": ["RE0010", "RE0038"]
        },
		{
            "ID": "T5068",
            "name": "Automated Exfiltration",
            "short_description": "Adversaries may exfiltrate collected data through automated mechanisms embedded in malicious code, using pre-defined intervals or triggers.",
            "full_description": "The data may include sensitive information like location, sensor logs, and cabin audio. Attackers can use automated routines embedded in malicious software deployed in AV systems. After collecting data from ECUs or sensors, the malicious code can initiate exfiltration at set intervals or specific triggers without requiring additional attacker interaction. \n This automated exfiltration can occur through cellular, Wi-Fi, or Internet-based channels via compromised telematics units, infotainment systems, or connected mobile applications. The malicious application may also delegate transmission to another component with network access to bypass permission controls. \n While this technique emphasizes automated exfiltration, it typically works in conjunction with other methods like Exfiltration Over C2 Channel or Exfiltration Over Other Network Medium.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5025"],
            "example": [
                {
					"reference ID": "RE0010",
					"description": "Researchers modified telematics exploit payload to download and run a small IRC client post-compromise. The code allows them to periodically “tweets” the GPS location of the vehicle and another that records cabin audio conversations and sends the recorded data to our servers over the Internet."
				},
				{
					"reference ID": "RE0045",
					"description": "Researchers developed a malicious app that records audio for every 5 seconds and automatically exfiltrates it to an attacker-controlled server using intent-based redirection. The app does not require Internet permission, however, it relied on other apps to carry out the transmission."
				}
            ],
            "reference ID": ["RE0010","RE0045"]
        },
		{
            "ID": "T5081",
            "name": "Denial of Control",
            "short_description": "Attackers can temporarily disrupt vehicle control by jamming or blocking communications, preventing commands from reaching their destination during the attack.",
            "full_description": "In autonomous vehicles, denial of control attacks aim to prevent targeted ECUs from executing or responding to commands during the active period of the attack. This can result from communication blocking, jamming, or exploiting CAN error-handling mechanisms to force the ECU into a bus-off state. \n Unlike 'Loss of Control', which reflects a sustained or unrecoverable inability to operate, denial of control is typically temporary and may be used to perform follow-up actions such as spoofing. \n Examples include sending high-priority CAN messages (e.g., with ID 0000) to monopolise the bus or injecting bit-level faults to exploit CAN's fault handling mechanism.\n This technique falls under the `Impact` tactic and may overlap with other techniques (Denial of Service); however, its core objective is to temporarily suppress the control of a specific function or ECU to enable further malicious activity.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5001", "M5010", "M5016", "M5037"],
            "example": [
                {
					"reference ID": "RE0041",
					"description": "Researchers sent a CAN message with ID 0000, which is considered the highest priority. This prevented other packets from being transmitted, resulting in denial of the transmitted function."
				},
				{
					"reference ID": "RE0048",
					"description": "Researchers exploited error handling by injecting dominant bits during CAN message transmission to increment the transmitter's error counter. After 32 bit-level disruptions, the target ECU entered bus-off state, causing complete denial of control of the parking sensor module."
				},
				{
					"reference ID": "RE0049",
					"description": "Researchers performed a spoofing attack by first inducing bus-off state on a target ECU using dominant bit flooding in one CAN frame. After the legitimate ECU was silenced, they injected spoofed messages with matching timing and ID."
				},
				{
					"reference ID": "RE0050",
					"description": "Researchers demonstrated a stealthy bus-off attack by injecting recessive bits during dominant bits in a target ECU's message. The victim ECU's transmit error counter increased to 255, causing it to enter bus-off state and fully disable its communication while the attacker remained active."
				}
            ],
            "reference ID": ["RE0041","RE0048","RE0049", "RE0050"]
        },
		{
            "ID": "T5069",
            "name": "Denial of Service",
            "short_description": "Adversaries may disrupt the availability of vehicle systems by overwhelming networks or exhausting system resources, leading to degraded or lost functionality.",
            "full_description": "In autonomous vehicles, denial of service attacks aim to make systems or components temporarily or permanently unavailable. These attacks may target in-vehicle networks (e.g., CAN), external communication links (e.g., telematics or control centre), or endpoint devices such as ECUs and ROS nodes. \n The result may be lost control, delayed response, or system crash. Unlike other impacts that modify behaviour or inject commands, DoS prevents normal operation altogether.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": ["T5069.001", "T5069.002"],
            "mitigation_ids": ["M5010", "M5017", "M5023", "M5030", "M5031"],
            "example": [
                {
					"reference ID": "RE0001",
					"description": "Researchers mention that a broadcast storm can disable communication channels and disrupt the control system."
				},
				{
					"reference ID": "RE0003",
					"description": "Researchers describe a network flooding attack between ground control systems and Field Personal Digital Devices that disrupts normal functioning."
				},
				{
					"reference ID": "RE0005",
					"description": "Flooding the network with fake UDP packets causes latency and disconnects telemetry and video feed."
				},
				{
					"reference ID": "RE0005",
					"description": "Overloading hardware resources (CPU, RAM, or disk) through excessive requests degrades system performance."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers send crafted CAN messages to the Power Steering Control Module to overload the CAN network and disable steering control."
				}
            ],
            "reference ID": ["RE0001","RE0003","RE0005", "RE0041"]
        },
		{
            "ID": "T5072",
            "name": "Manipulation of Control",
            "short_description": "Adversaries may manipulate vehicle control functions by injecting malicious commands, altering sensor inputs, or modifying firmware to override normal operations.",
            "full_description": "Adversaries may interfere with control processes to change the vehicle’s behaviour without driver intent. This can involve injecting CAN messages, spoofing sensor data, or modifying firmware to issue unauthorised commands to critical systems such as throttle, brake, steering, or navigation. \n These attacks allow adversaries to redirect movement, disable safety actions, or control the vehicle remotely. \n Unlike Loss of Control, which disables functionality, Manipulation of Control alters the vehicle’s operation by actively issuing false or malicious instructions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5001", "M5002", "M5010", "M5011", "M5016", "M5037"],
            "example": [
				{
					"reference ID": "RE0001",
					"description": "Researchers noted that GPS jamming and spoofing attacks could redirect an aircraft and cause unintended landings."
				},
				{
					"reference ID": "RE0004",
					"description": "Researchers overwrote velocity control commands to alter the UGV’s navigation path."
				},
				{
					"reference ID": "RE0005",
					"description": "Researchers disabled the emergency stop function and changed the UGV’s movement direction."
				},
				{
					"reference ID": "RE0006",
					"description": "Researchers identified unauthenticated command and control data as a major vulnerability in UGV systems."
				},
				{
					"reference ID": "RE0009",
					"description": "Researchers manipulated throttle values and disrupted steering functionality in the test vehicle."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers injected malicious CAN messages to control critical units such as the braking system."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers injected malicious CAN messages to disable systems like ESP and ABS, and manipulate functions such as door unlocking."
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers manipulated body control functions by injecting malicious CAN messages."
				}
            ],
            "reference ID": ["RE0001","RE0004", "RE0005", "RE0006","RE0009","RE0010", "RE0011", "RE0012", "RE0013", "RE0014","RE0016"]
        },
		{
            "ID": "T5073",
            "name": "Loss of control",
            "short_description": "Adversaries can cause vehicles to experience persistent loss of control, where critical functions remain unresponsive even after the initial interference has stopped.",
            "full_description": "This can happen when a function is overridden by injected firmware, disrupted by crafted diagnostic commands, or when communication is blocked in a way that prevents system recovery.\n This differs from Denial of Control, which typically results from temporary network jamming or communication blocks that stop commands from reaching their targets but may recover when interference ends. It also differs from Manipulation of Control, where attackers actively inject commands to steer or control the vehicle in a specific way. In Loss of Control, the system or function cannot be controlled at all. This can lead to severe safety risks, as the vehicle may be unable to move or respond to any input.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5001", "M5008", "M5010", "M5016", "M5037"],
            "example": [
                {
					"reference ID": "RE0002",
					"description": "Researchers observed that disrupting communication or spoofing signals caused the unmanned system to lose functionality."
				},	
				{
					"reference ID": "RE0012",
					"description": "Researchers patched CID firmware to implement custom control of the Body Control Module."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers sent reset commands to ECUs that caused the vehicle to lose control and temporarily disabled functions."
				}
            ],
            "reference ID": ["RE0002", "RE0012", "RE0013"]
        },
		{
            "ID": "T5074",
            "name": "Loss of Safety",
            "short_description": "Adversaries may compromise safety-critical functions by disabling systems or allowing dangerous conditions to persist undetected.",
            "full_description": "Adversaries may target and disable safety system functions designed to protect vehicles during abnormal or hazardous conditions. These functions include the airbag system, anti-lock braking system, emergency braking, traction control, and autonomous driving modules such as ADAS or Autopilot. \n By injecting malicious firmware, disabling safety checks, or concealing system failures, attackers can prevent vehicles from responding appropriately to unsafe scenarios. \n Loss of safety differs from Loss of Protection because Loss of Safety directly affects a vehicle's ability to perform critical safety actions while Loss of Protection affects a vehicle's ability to detect or mitigate threats. \n Disabling or bypassing these safety functions can lead to catastrophic outcomes, including undetected system failures, unsafe operation, and physical harm. This technique can also serve as a stepping stone for further attacks or magnify the impact of other system compromises.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5010"],
            "example": [
                {
					"reference ID": "RE0016",
					"description": "Researchers concealing airbag system missing, make the vehicle run normally even when airbag system is missing."
				},
				{
					"reference ID": "RE0009",
					"description": "Researchers disable safety critical functions, such as locked wheels and release the brakes and prevent them from being enabled."
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers inject custom firmware in Autopilot can cause safety issuse in autonomous driving mode."
				}
            ],
            "reference ID": ["RE0009", "RE0016","RE0012"]
        },
		{
            "ID": "T5075",
            "name": "Loss of protection",
            "short_description": "Adversaries may disable or degrade protective systems in autonomous vehicles, leaving the vehicle vulnerable to faults, hazards, or attacks.",
            "full_description": "Adversaries may target and compromise protective systems that safeguard vehicles and their occupants. These systems include safety-critical components such as alarming system, and intrusion detection systems (IDS). \n By disabling or degrading these protections, attackers can create unsafe conditions, enable undetected attacks, and increase the risk of harm. \n This technique often serves to enable further malicious actions or ensure that faults and abnormal conditions remain undetected. The consequences can include physical damage, safety hazards, and service disruption.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": ["T5004.002"],
            "mitigation_ids": ["M5002", "M5037", "M5031"],
            "example": [
                {
					"reference ID": "RE0016",
					"description": "Researchers disable the airbag warning notification, leaving the vehicle occupants unprotected in case of an accident."
				},
				{
					"reference ID": "RE0016",
					"description": "Researchers suppress the anti-theft system by inject light OFF commands."
				},
				{
					"reference ID": "RE0028",
					"description": "Researchers examined adversarial attacks on two IDS models: a Deep Neural Network (DNN) and a Multi-Tier Hybrid IDS (MTH-IDS). The adversarial messages altered only the data payload fields (D0–D7) while maintaining CAN IDs and DLC values unchanged. The study observed a high attack success rate, with up to 52.34% of normal frames being misclassified as malicious."
				},				
				{
					"reference ID": "RE0026",
					"description": "Researchers evaluated machine learning and deep learning-based IDSs against adversarial examples designed to appear normal while containing attacks. The results demonstrate that ML-based IDS models are vulnerable to adversarial data manipulation."
				}
            ],
            "reference ID": ["RE0016","RE0026", "RE0027", "RE0028"]
        },		
		{
            "ID": "T5077",
            "name": "Device Theft (new)",
            "short_description": "Adversaries may steal a vehicle by exploiting weaknesses in access and authentication systems, allowing them to unlock, start, and drive away without authorisation",
            "full_description": "Adversaries may physically steal vehicles by bypassing or compromising access control mechanisms. Modern vehicles rely on digital key systems, including Remote Keyless Entry and immobilizers, which are vulnerable to wireless or diagnostic-based attacks. \n After gaining access, attackers often manipulate internal systems, such as reprogramming the ECU or disabling tracking modules to complete the theft and prevent vehicle recovery. \n This technique involves unauthorized physical acquisition of the vehicle, typically resulting in complete loss of the asset. Beyond financial losses, the impact includes potential tampering with internal systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": ["T5077.001"],
            "mitigation_ids": ["M5013", "M5021", "M5027"],
            "example": [
                {
					"reference ID": "RE0032",
					"description": "Researchers demonstrated that OBD port scan attacks allow attackers to extract the entire memory state of the key fob and clone it to unlock the car."
				},
				{
					"reference ID": "RE0033",
					"description": "Researchers demonstrated serious vulnerabilities in the Hitag2-based immobilizer system and showed that vehicles using this system can be stolen in under 6 minutes."
				},
				{
					"reference ID": "RE0031",
					"description": "Researchers gained unauthorized access to vehicles by exploiting weaknesses in cryptographic implementations of Remote Keyless Entry systems, specifically in VW Group's RKE system and the Hitag2 rolling code system. By eavesdropping on the rolling code, they could generate valid codes to unlock the car and replay them for unauthorized access."
				}
            ],
            "reference ID": ["RE0030", "RE0031", "RE0032", "RE0033"]
        },
		{
            "ID": "T5078",
            "name": "Data Destruction",
            "short_description": "Adversaries may destroy or corrupt data in autonomous vehicles to disrupt functionality or erase critical information.",
            "full_description": "Data destruction in autonomous vehicles involves deliberately erasing or corrupting firmware, memory, or sensitive operational data. This can happen through buffer overflow attacks, malicious firmware updates, or remote data-clearing commands. \n For safety-critical or military systems, data destruction can serve as a protective measure against information theft when vehicles are compromised. \n Unlike enterprise systems where data wiping typically affects files, autonomous vehicle data destruction focuses on critical components like firmware, cryptographic keys, and control data that are essential for operation and security.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5009", "M5018", "M5039", "M5037", "M5025"],
            "example": [
                {
					"reference ID": "RE0003",
					"description": "Researchers show that buffer overflow vulnerabilities in the stack and heap areas of main memory can cause memory to be overwritten and destroyed, potentially leading to data loss."
				},
				{
					"reference ID": "RE0002",
					"description": "Researchers designed a method to automatically or remotely erase sensitive cryptographic data if the AV is stolen or lost."
				}
            ],
            "reference ID": ["RE0002","RE0003"]
        },
		{
            "ID": "T5079",
            "name": "Loss of View",
            "short_description": "Adversaries may disrupt or manipulate the vehicle’s display systems, hiding real-time operational data and impairing driver awareness",
            "full_description": "Adversaries may cause a loss of view by disrupting or altering the vehicle's human-machine interface, including displays on the head unit, infotainment system, or instrument cluster (e.g. speedometer). This can be achieved by injecting crafted CAN messages, modifying firmware, or issuing remote commands. \n Loss of view results in the driver or operator being unable to see accurate or complete system states, such as speed, warnings, navigation, or diagnostic alerts, even though the physical functions may still be operating. \n Unlike attacks that directly affect control, Loss of View targets situational awareness, impairing the human or automated system’s ability to understand and react to the vehicle’s true status.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5016", "M5031", "M5037"],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers inject images into the Uconnect display, preventing it from showing normal values."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers inject messages to alter the speedometer display to show any value, making the real value invisible."
				}
            ],
            "reference ID": ["RE0014","RE0041"]
        },
		{
            "ID": "T5080",
            "name": "Theft of Operational Information",
            "short_description": "Adversaries may steal operational data from autonomous vehicles or back-end systems to gain insight into vehicle activity, ownership, or fleet operations.",
            "full_description": "Adversaries may target and extract operational information like location history, vehicle identification numbers (VINs), user account details, API tokens, maintenance records, and fleet tracking data. They can obtain these details by exploiting vulnerabilities in APIs, mobile applications, telematics services, or back-end systems. \n The stolen data enables multiple malicious activities: surveillance, vehicle behavior profiling, social engineering, and follow-on attacks including remote control, impersonation, or physical theft. For instance, stolen API tokens and user accounts may allow adversaries to issue unauthorized commands or gain additional remote access to vehicle functions. \n In mission-critical or classified vehicle environments, compromised operational data can reveal sensitive details like movement patterns, mission status, or deployment information.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": ["M5011", "M5025", "M5033", "M5035"],
            "example": [
                {
					"reference ID": "RE0038",
					"description": "Researchers can querry the possition history of Tesla vehicle through API and third-party dashboard."
				},
				{
					"reference ID": "RE0040",
					"description": "Researchers can querry name, address, phone number, email address, tax ID, and vehicle/service/ownership history of Toyota car."
				},
				{
					"reference ID": "RE0039",
					"description": "Researchers can get the VIN number, API token and other personally identifiable information related to the vehicle."
				}
            ],
            "reference ID": ["RE0038","RE0039","RE0040"]
        }
    ],
    "sub-techniques": [
		{
            "ID": "T5005.001",
            "name": "LIDAR Spoofing and Replay",
            "short_description": "Adversaries may spoof or replay LIDAR signals to inject false objects or alter depth perception.",
            "full_description": "LIDAR spoofing and replay attacks exploit the system’s reliance on laser-based sensing to manipulate object detection and depth perception. Spoofing attacks introduce false LIDAR pulses that create phantom objects or alter measured distances, misleading the vehicle’s perception of its surroundings. Replay attacks involve capturing genuine LIDAR signals and retransmitting them with a delay or from a different location, causing incorrect environmental mapping. \n The impact of these attacks includes misleading obstacle detection, incorrect navigation decisions, and potential safety risks. However, LIDAR attacks typically affect only the perception layer and do not directly compromise other vehicle systems unless the false data is misinterpreted at higher decision-making levels.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation_ids": [],
            "example": [
                {
                    "reference ID": "RE0017",
                    "description": "LIDAR Replay Attack - Researchers intercept and retransmit LiDAR pulses from a different location, creating false reflections at unintended positions."
                },
				{
                    "reference ID": "RE0017",
                    "description": "LIDAR Spoofing Attack - Researchers use a pulse generator to synchronize with the LiDAR's scan cycle and inject false echoes, tricking the system into detecting nonexistent obstacles."
                }
            ],
            "reference ID": ["RE0017"]
        },
		{
            "ID": "T5005.002",
            "name": "Ultrasonic Spoofing",
            "short_description": "Adversaries may inject synthetic ultrasonic signals to create false obstacle detections.",
            "full_description": "Ultrasonic sensors are used for short-range detection and collision avoidance. These sensors can be exploited through three main techniques: spoofing, jamming, and blinding. In spoofing attacks, attackers transmit false ultrasonic signals to create fake object detections or alter measured distances, deceiving the vehicle about nearby obstacles. This attack can have serious consequences—vehicles may fail to detect obstacles, measure distances incorrectly, or face collision risks. However, ultrasonic attacks typically remain limited to the perception system and don't affect other vehicle systems or decision-making processes.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation_ids": [],
            "example": [
				{
                    "reference ID": "RE0021",
                    "description": "Ultrasonic Spoofing attack - Researchers injects synthetic ultrasonic signals with modified frequency modulation patterns to create false object detections or alter measured distances."
                }
            ],
            "reference ID": [ "RE0021"]
        },
		{
            "ID": "T5005.003",
            "name": "RADAR Spoofing and Replaying",
            "short_description": "Adversaries may inject or replay radar signals to mislead object detection.",
            "full_description": "Radar is a sensor in autonomous vehicles for detecting objects, measuring distances, and enabling adaptive cruise control. Spoofing involves sending fake radar signals to create false detections or wrong distance measurements. Replay attacks work by capturing real radar signals and sending them back with changes or delays, creating phantom objects or incorrect distance readings. \n These attacks can degrade object detection, distort the vehicle's perception of its surroundings, and cause navigation errors. \n While modern automotive radar systems, including millimeter-wave radar are built to resist interference, these attacks remain a threat mainly to the vehicle's perception system and do not directly affect other critical vehicle componentss",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation_ids": [],
            "example": [
				{
                    "reference ID": "RE0021",
                    "description": "Millimeter-Wave Radar Spoofing attack - Researchers injects synthetic radar signals with altered frequency modulation patterns, tricking the radar into detecting false objects or incorrect distances."
                },
				{
                    "reference ID": "RE0021",
                    "description": "Millimeter-Wave Radar Replaying attack - Researchers captures and retransmits radar signals with a delay, creating ghost objects at manipulated distances to deceive obstacle detection systems.."
                }
            ],
            "reference ID": ["RE0021"]
        },
		{
            "ID": "T5005.004",
            "name": "Motion and Position Sensors",
            "short_description": "Adversaries may manipulate motion and position sensors to alter a vehicle's perceived state.",
            "full_description": "Adversaries may spoof or disrupt motion and position sensors such as IMUs (gyroscope, accelerometer, magnetometer) or GPS to mislead the vehicle’s state estimation systems. \n These attacks can be conducted externally, without accessing the internal network, and often serve as the initial vector for follow-on impact such as control deviation or mission failure.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation_ids": [],
            "example": [
                {
                    "reference ID": "RE0015",
                    "description": "Researchers injected false inertial sensor readings during flight, causing incorrect roll estimation and crash of the quadrotor."
                },
				{
                    "reference ID": "RE0015",
                    "description": "Researchers spoofed GPS signals to cause the ground vehicle to deviate from its planned mission and fail to return to home base."
                }
            ],
            "reference ID": ["RE0015"]
        },
		{
            "ID": "T5006.001",
            "name": "CAMERA Blinding or confusing",
            "short_description": "Adversaries may manipulate camera sensors using light-based interference to degrade object detection and perception accuracy.",
            "full_description": "In a CAMERA blinding or confusing attack, adversaries exploit the vulnerabilities of camera-based perception by using intense light sources or rapid light bursts. The impact of this attack includes failure to detect lane markings, obstacles, and traffic signs, leading to potential navigation errors or safety risks. Additionally, repeated exposure to high-intensity light may degrade the sensor’s long-term performance. \n However, this type of attack typically affects only the camera itself and does not propagate further into the vehicle’s internal systems, as the interference is limited to the sensor’s ability to capture and process visual data",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation_ids": [],
            "example": [
                {
                    "reference ID": "RE0017",
                    "description": "CAMERA Binding Attack - Researchers uses laser diodes and LEDs to emit intense light directly into the camera's sensor to prevent object detection."
                },
				{
                    "reference ID": "RE0017",
                    "description": "CAMERA Confusing Attack - Researchers use rapid bursts of light to force the camera to continuously adjust exposure settings, creating time lag in the auto-adjustment process and causing missed object detection."
                },
				{
                    "reference ID": "RE0021",
                    "description": "CAMERA Binding Attack - Researchers uses three different light sources to temporarily or permanently blind the vehicle’s camera, obstructing recognition of lane markings, traffic signs, and obstacles."
                }
				
            ],
            "reference ID": ["RE0017", "RE0021"]
        },		
		{
            "ID": "T5006.002",
            "name": "Ultrasonic Jamming and Blinding",
            "short_description": "Adversaries may jam ultrasonic sensors with noise or block them physically to impair obstacle detection.",
            "full_description": "Ultrasonic sensors are used for short-range detection and collision avoidance. Jamming attacks use constant high-frequency noise to overwhelm the sensor, preventing it from working properly. Blinding attacks use thin objects or acoustic materials to physically block the sensor, making it unable to detect obstacles. \n These attacks can cause serious problems: the vehicle may fail to detect obstacles, measure distances incorrectly, or face collision risks. Yet ultrasonic attacks typically stay limited to the perception system and don't affect other vehicle systems or decision-making processes.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation_ids": [],
            "example": [
                {
                    "reference ID": "RE0018",
                    "description": "Ultrasonic Blinding attack - Researchers disrupting sensor accuracy by covering sensors or using thin objects or acoustic materials."
                },
				{
                    "reference ID": "RE0021",
                    "description": "Ultrasonic Jamming attack - Researchers uses an Arduino-based device to continuously transmit high-frequency sound waves, disrupting ultrasonic sensor function and preventing obstacle detection."
                }
            ],
            "reference ID": ["RE0018", "RE0021"]
        },
		{
            "ID": "T5006.003",
            "name": "RADAR Jamming",
            "short_description": "Adversaries may transmit strong signals to jam RADAR, causing loss of detection.",
            "full_description": "Radar is a sensor in autonomous vehicles for detecting objects, measuring distances, and enabling adaptive cruise control. Jamming overwhelms the system with powerful electromagnetic interference, preventing it from detecting obstacles. \n These attacks can degrade object detection, distort the vehicle's perception of its surroundings, and cause navigation errors. \n While modern automotive radar systems, including millimeter-wave radar are built to resist interference, these attacks remain a threat mainly to the vehicle's perception system and do not directly affect other critical vehicle componentss",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation_ids": [],
            "example": [
                {
                    "reference ID": "RE0021",
                    "description": "Millimeter-Wave Radar Jamming attack - Researchers transmit high-power electromagnetic signals to interfere with the vehicle’s radar system, preventing accurate object detection."
                }
            ],
            "reference ID": ["RE0021"]
        },		
		{
            "ID": "T5004.001",
            "name": "Adversarial Sensor Attack",
            "short_description": "Adversaries may deceive ML-based perception systems by manipulating sensor inputs using adversarial machine learning techniques, misleading object detection and navigation systems.",
            "full_description": "Sensor adversarial attacks target the AI-based perception models used in autonomous vehicles by introducing carefully crafted perturbations or manipulated sensor inputs. Unlike traditional sensor manipulation attacks that interfere with raw signals (e.g., jamming or spoofing), adversarial attacks focus on exploiting weaknesses in deep learning models used for sensor data interpretation. By misleading object detection and classification algorithms, these attacks can cause incorrect navigation decisions, including abrupt braking, lane deviation, or obstacle misidentification.\n Adversarial sensor attacks remain a serious threat, particularly in scenarios where vehicles rely heavily on deep learning-based perception. ",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation_ids": [],
            "example": [
                {
                    "reference ID": "RE0025",
                    "description": "Reseachers using physical adversarial patches in the form of road decals to mislead object detection systems in autonomous vehicles, causing incorrect object recognition and disrupt AV navigation."
                },
				{
					"reference ID": "RE0019",
					"description": "Researchers demonstrated an adversarial sensor attack on LiDAR-based perception. The attack created false 'front-near obstacles' within five meters, causing incorrect driving decisions such as emergency braking or vehicle freezing at intersections. "
				},
				{
					"reference ID": "RE0020",
					"description": "Reseachers injected manipulated point cloud data to create phantom vehicles or distort depth perception, misleading the AV’s navigation system."
				}
            ],
            "reference ID": ["RE0021"]
        },
		{
            "ID": "T5004.002",
            "name": "Adversarial IDS attack",
            "short_description": "Adversaries may evade ML-based Intrusion Detection Systems (IDSs) by manipulating IDS inputs using adversarial machine learning techniques, causing misclassification of network traffic.",
            "full_description": "IDS adversarial attacks target machine learning-based IDS in Autonomous Vehicles. These attacks generate specially crafted adversarial data to manipulate the IDS into misclassifying network traffic, either by evading detection (misclassifying attacks as normal) or triggering false alarms (misclassifying normal traffic as attacks).\n These attacks exploit vulnerabilities in IDS models trained on vehicle network data. \n The impact of IDS adversarial attacks includes decreased detection accuracy, increased false positive rates, and operational instability, potentially leading to unnecessary security responses or masking real threats.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation_ids": [],
            "example": [
                {
					"reference ID": "RE0026",
					"description": "Researchers evaluated machine learning and deep learning-based IDSs against adversarial examples designed to appear normal while containing attacks. The results demonstrate that ML-based IDS models are vulnerable to adversarial data manipulation."
				},
				{
					"reference ID": "RE0027",
					"description": "Researchers tested adversarial attacks on ML-based IDS models, including Deep Neural Network (DNN), Decision Tree (DT), Random Forest (RF), Extra Trees (ET), and XGBoost. Findings indicate that these IDS models are highly susceptible to adversarial perturbations, leading to significant misclassification of network traffic."
				},
				{
					"reference ID": "RE0028",
					"description": "Researchers examined adversarial attacks on two IDS models: a Deep Neural Network (DNN) and a Multi-Tier Hybrid IDS (MTH-IDS). The adversarial messages altered only the data payload fields (D0–D7) while maintaining CAN IDs and DLC values unchanged. The study observed a high attack success rate, with up to 52.34% of normal frames being misclassified as malicious."
				}
            ],
            "reference ID": ["RE0026", "RE0027", "RE0028"]
        },
		{
            "ID": "T5007.001",
            "name": "Rogue Ground Station",
            "short_description": "Adversaries may deploy rogue ground stations to gain unauthorized access to UGVs through wireless communications.",
            "full_description": "These attacks exploit the communication channels between a vehicle and its legitimate ground station. \n Using rogue ground stations, attackers can inject, override, or replay control packets to alter UGV paths, cancel missions, or prevent data collection. These attacks are conducted purely over-the-air without requiring access to the vehicle's internal systems, typically within physical range (e.g., line-of-sight or directed antenna cone).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": [],
            "example": [
                {
                    "reference ID": "RE0024",
                    "description": "Researchers sends deauthentication frames to disconnect the Tesla from its Wi-Fi network"
                }
            ],
            "reference ID": []
        },
		{
            "ID": "T5007.002",
            "name": "Rogue Cellular Base Station",
            "short_description": "Adversaries may set up a rogue cellular base station (fake bts or femtocell) to intercept or manipulate vehicle telematics communication. A compromised femtocell can also allow direct interaction with a vehicle’s telematics system by bypassing carrier network restrictions",
            "full_description": "By masquerading as a legitimate tower, attackers can downgrade security protocols, intercept authentication data, or inject malicious commands, potentially compromising remote services or firmware updates.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": [
                "M2001"
            ],
            "example": [
                {
                    "reference ID": "RE0013",
                    "description": "Researchers used a rogue GSM base station to intercept TCP messages and escalate access to BMW’s NBT Head Unit and Telematic Communication Box (TCB)."
                },
				{
                    "reference ID": "RE0014",
                    "description": "Researchers modified a Sprint Airave femtocell to communicate directly with Uconnect over Sprint’s network to demonstrate remote exploitation of the infotainment system."
                }
            ],
            "reference ID": ["RE0013", "RE0014"]
        },
		{
            "ID": "T5007.003",
            "name": "Rogue Wi-Fi Access Point",
            "short_description": "Adversaries may set up rogue Wi-Fi access points to perform man-in-the-middle (MitM) attacks, intercept credentials, or inject malicious firmware into vehicle systems. By spoofing trusted networks, such as those used for OTA updates, diagnostics, or infotainment, attackers can perform man-in-the-middle (MitM) attacks and capture authentication credentials.",
			"full_description": "By compromising a vehicle’s wireless entry point, adversaries can establish an initial foothold, enabling further attack techniques such as remote code execution, firmware manipulation, and CAN message injection. This can lead to deeper system compromise, allowing attackers to escalate privileges, persist within the system, or disrupt vehicle operations.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": [],
            "example": [
                {
                    "reference ID": "RE0011",
                    "description": "Researchers spoofed Tesla Guest Wi-Fi, a trusted network used by Tesla body shops and superchargers, to trick vehicles into auto-connecting. By redirecting browser traffic, they found out the vulnerabilities in QtCarBrowser."
                },
				{
                    "reference ID": "RE0012",
                    "description": "Researchers spoofed Tesla Guest Wi-Fi, a trusted network used by Tesla body shops and superchargers, to trick vehicles into auto-connecting. By redirecting browser traffic, they could exploit zero-day vulnerabilities in QtCarBrowser."
                }
            ],
            "reference ID": ["RE0011", "RE0012"]
        },
		{
            "ID": "T5007.004",
            "name": "Downgrade to Insecure Protocols",
            "short_description": "Adversaries may force a vehicle’s wireless interfaces to switch to weaker communication protocols, reducing security protections. This can be achieved by jamming high-security protocols (e.g., LTE) and allowing only older, vulnerable protocols (e.g., GSM).",
            "full_description": " Attackers can then exploit the downgraded channel to intercept, manipulate, or inject malicious communications, potentially compromising remote vehicle services or authentication mechanisms.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": [],
            "example": [
                {
                    "reference ID": "RE0023",
                    "description": "Researchers downgraded a vehicle’s T-Box from LTE to GSM using a rogue base station (USRP + OpenBTS), enabling them to intercept GSM text messages."
                }
            ],
            "reference ID": ["RE0023"]
        },
		{
            "ID": "T5007.005",
            "name": "Jamming or Denial of Service",
            "short_description": "Adversarials may jam radio signals, such as Wi-Fi, cellular, GPS to prevent the vehicle from communicating.",
            "full_description": "This technique involves disrupting or exploiting wireless communication channels integral to vehicle operations. By targeting these channels, attackers can interfere with or gain unauthorized access to vehicle systems, leading to potential control over vehicle functionalities or denial of essential services.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": [],
            "example": [
                {
                    "reference ID": "RE0024",
                    "description": "Researchers sends deauthentication frames to disconnect the Tesla from its Wi-Fi network"
                }
            ],
            "reference ID": ["RE0024"]
        },		
		{
            "ID": "T5007.005",
            "name": "Remote Key Entry (new)",
            "short_description": "Adversaries may exploit vulnerabilities in Remote Keyless Entry systems to gain unauthorized access to vehicles.",
            "full_description": "Remote Key Entry attacks exploit weaknesses in Remote Keyless Entry (RKE) systems, allowing attackers to unlock and sometimes start a vehicle without the owner’s key. These systems rely on radio frequency communication between the key fob and the vehicle, but vulnerabilities in signal transmission and cryptographic protocols make them susceptible to exploitation. \n There are three main types of key fob attacks. Relay attacks involve intercepting and amplifying the key fob signal in real-time, tricking the car into believing the key is nearby. Replay attacks capture and store rolling codes transmitted by the key fob and replay them later to gain unauthorized access. Key fob reprogramming exploits the vehicle’s OBD-II port to add a new key while disabling the original, allowing attackers to take control of the vehicle permanently. \n The impact of these attacks extends beyond unauthorized entry. Attackers can leverage the OBD-II port to inject malicious firmware, disable security features, or extract sensitive authentication data.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": [],
            "example": [
				{
					"reference ID": "RE0029",
					"description": "Researchers conducted experiments with 8 different cars and 2 different jammers to disrupt the Remote Keyless Entry systems, causing the cars to remain unlocked."
				},
                {
					"reference ID": "RE0030",
					"description": "Researchers constructed two relay attack setups on 10 car models from 8 manufacturers, using both a wired physical-layer relay and a wireless radio frequency relay, to successfully open and start vehicles while the key remained physically far from the car."
				},
				{
					"reference ID": "RE0031",
					"description": "Researchers gained unauthorized access to vehicles by exploiting weaknesses in cryptographic implementations of Remote Keyless Entry systems, specifically in VW Group's RKE system and the Hitag2 rolling code system. By eavesdropping on the rolling code, they could generate valid codes to unlock the car and replay them for unauthorized access."
				},
				{
					"reference ID": "RE0032",
					"description": "Researchers demonstrated that OBD port scan attacks allow attackers to extract the entire memory state of the key fob and clone it to unlock the car."
				},
				{
					"reference ID": "RE0033",
					"description": "Researchers demonstrated serious vulnerabilities in the Hitag2-based immobilizer system and showed that vehicles using this system can be stolen in under 6 minutes."
				}
            ],
            "reference ID": ["RE0029","RE0030", "RE0031", "RE0032", "RE0033"]
        },
        {
            "ID": "T5014.001",
            "name": "Via CD",
            "short_description": "Adversaries may use a CD containing crafted media files to trigger unintended behaviour in the infotainment system and inject malicious messages into in-vehicle networks.",
            "full_description": "Vehicles with CD-based infotainment systems may interpret malformed or specially encoded audio files in unexpected ways. While the content may appear legitimate on consumer devices, specific players in vehicle could misinterpret such files and perform unintended operations—such as sending CAN packets.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation_ids": [],
            "example": [
                 {
					"reference ID": "RE0010",
					"description": "Researchers used a CD with a modified WMA audio file, which plays normally on a PC but sends arbitrary CAN packets when played by the vehicle's media player"
				}
            ],
            "reference ID": ["RE0010"]
        },
        {
            "ID": "T5014.002",
            "name": "Via USB",
            "short_description": "Adversaries may deliver malicious update files or media via USB to compromise infotainment or other internal systems of the vehicle, or to establish persistence.",
            "full_description": "USB ports are commonly used for firmware update in modern vehicles. If proper file validation or cryptographic signing is not enforced, adversaries may exploit this update mechanism to inject malicious code, alter system behaviour, or gain a persistent foothold. This can occur by inserting a modified USB drive with manipulated update packages, or by swapping a legitimate update device mid-process. \n This sub-technique remains relevant even in newer models and represents a practical physical vector for in-vehicle exploitation.",
            "created": "04/01/2023",
            "modified": "04/01/2024",
            "mitigation_ids": [],
            "example": [
                {
					"reference ID": "RE0010",
					"description": "Researchers inserted a USB stick with a valid ISO to initiate an update, then replaced it with a modified ISO to force a malicious update."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers inserted a USB stick with a crafted manage_upd.nzdf file to force the HU-Intel system's navigation map to update with the malicious file."
				}
            ],
            "reference ID": ["RE0010", "RE0013"]
        },
        {
            "ID": "T5077.001",
            "name": "Remote Key Entry (new)",
            "short_description": "Adversaries may exploit vulnerabilities in Remote Keyless Entry systems to gain unauthorized access to vehicles.",
            "full_description": "Remote Key Entry attacks exploit weaknesses in Remote Keyless Entry (RKE) systems, allowing attackers to unlock and sometimes start a vehicle without the owner’s key. These systems rely on radio frequency communication between the key fob and the vehicle, but vulnerabilities in signal transmission and cryptographic protocols make them susceptible to exploitation. \n There are three main types of key fob attacks. Relay attacks involve intercepting and amplifying the key fob signal in real-time, tricking the car into believing the key is nearby. Replay attacks capture and store rolling codes transmitted by the key fob and replay them later to gain unauthorized access. Key fob reprogramming exploits the vehicle’s OBD-II port to add a new key while disabling the original, allowing attackers to take control of the vehicle permanently. \n The impact of these attacks extends beyond unauthorized entry. Attackers can leverage the OBD-II port to inject malicious firmware, disable security features, or extract sensitive authentication data.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": [],
            "example": [
                {
					"reference ID": "RE0030",
					"description": "Researchers constructed two relay attack setups on 10 car models from 8 manufacturers, using both a wired physical-layer relay and a wireless radio frequency relay, to successfully open and start vehicles while the key remained physically far from the car."
				},
				{
					"reference ID": "RE0031",
					"description": "Researchers gained unauthorized access to vehicles by exploiting weaknesses in cryptographic implementations of Remote Keyless Entry systems, specifically in VW Group's RKE system and the Hitag2 rolling code system. By eavesdropping on the rolling code, they could generate valid codes to unlock the car and replay them for unauthorized access."
				},
				{
					"reference ID": "RE0032",
					"description": "Researchers demonstrated that OBD port scan attacks allow attackers to extract the entire memory state of the key fob and clone it to unlock the car."
				},
				{
					"reference ID": "RE0033",
					"description": "Researchers demonstrated serious vulnerabilities in the Hitag2-based immobilizer system and showed that vehicles using this system can be stolen in under 6 minutes."
				}
            ],
            "reference ID": ["RE0030", "RE0031", "RE0032", "RE0033"]
        },
		{
            "ID": "T5069.001",
            "name": "Network Denial of Service",
            "short_description": "Adversaries may flood internal or external vehicle networks to disrupt communication and degrade system availability.",
            "full_description": "Network DoS attacks in AVs can overwhelm communication channels such as CAN, Ethernet, or telematics links by injecting excessive or malformed traffic. This can prevent critical messages from reaching their destination, cause timeouts, or lead to temporary loss of control. \n Examples include broadcast storms, UDP flooding, or remote saturation of the vehicle’s communication with cloud or control infrastructure.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": [],
            "example": [
                {
					"reference ID": "RE0001",
					"description": "Researchers mention that a broadcast storm can disable communication channels and disrupt the control system."
				},
				{
					"reference ID": "RE0003",
					"description": "Researchers describe a network flooding attack between ground control systems and Field Personal Digital Devices that disrupts normal functioning."
				},
				{
					"reference ID": "RE0005",
					"description": "Flooding the network with fake UDP packets causes latency and disconnects telemetry and video feed."
				}
            ],
            "reference ID": ["RE0001","RE0003","RE0005"]
        },
		{
            "ID": "T5069.002",
            "name": "Endpoint Denial of Service",
            "short_description": "Adversaries may exhaust or crash specific vehicle components to degrade functionality or block access.",
            "full_description": "Endpoint DoS attacks in AVs focus on overloading or disabling a single target, such as an ECU, sensor, or onboard software module. This may be achieved through jamming, high-rate requests, firmware vulnerabilities, or resource exhaustion (e.g., CPU, memory). \n For instance, disabling the power steering module or jamming GNSS signals can render essential functions unresponsive while the rest of the system remains operational.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": [],
            "example": [
				{
					"reference ID": "RE0005",
					"description": "Overloading hardware resources (CPU, RAM, or disk) through excessive requests degrades system performance."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers send crafted CAN messages to the Power Steering Control Module to overload the CAN network and disable steering control."
				}
            ],
            "reference ID": ["RE0005", "RE0041"]
        },
		{
            "ID": "T5050.001",
            "name": "CAN Sniffing",
            "short_description": "Adversaries passively monitor the CAN bus to collect message traffic between ECUs and gain knowledge about the vehicle’s internal network structure.",
            "full_description": "CAN sniffing refers to the passive interception of Controller Area Network (CAN) traffic within a vehicle. Adversaries may gain physical or remote access to the CAN bus, such as through the OBD-II port or an exposed ECU and use diagnostic tools to observe real-time communication between Electronic Control Units (ECUs). This includes both operational control messages (e.g., throttle, braking) and diagnostic exchanges between the gateway and ECUs. \n Through this method, adversaries aim to identify message IDs, patterns, and ECU functions to map out the vehicle's internal communication structure. \n This discovery process can serve as a precursor for further attacks, such as message spoofing, replay, or function manipulation.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub_technique_ids": [],
            "mitigation_ids": [],
            "example": [
				{
					"reference ID": "RE0016",
					"description": "Researchers sniff communication to capture the CAN messages between ECUs and diagnostic messages between ECUs and gateway."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers sniff and capture CAN messages from the vehicle via OBD-II port and diagnostic application."
				},
				{
					"reference ID": "RE0044",
					"description": "Researchers describes how attackers can connect to the OBD-II port and use sniffing tools like can-utils to monitor CAN traffic. By observing message IDs and data patterns."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers passively sniffed CAN messages and UDS data frames on the CAN-CH Bus to analyse UDS request and response."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers used sniffers to observe CAN traffic on both CAN-C and CAN-IHS buses, allowing them to identify messages related to steering, braking, and other physical control systems."
				}

            ],
            "reference ID": ["RE0014","RE0016", "RE0022", "RE0044", "RE0011"]
		}
    ],
    "mitigations": [
		{
			"ID": "M5001",
			"name": "Adaptive Response and Recovery system",
			"short_description": "Adaptive Response and Recovery system for autonomous vehicles involves dynamic, intelligent strategies that respond to detected threats and recover the system to maintain safe and reliable operation.",
			"full_description": "Adaptive Response and Recovery systems in autonomous vehicles are designed to react to detected intrusions or physical attacks by deploying context-aware countermeasures. These systems combine techniques like deep reinforcement learning, simulation-guided safety policies, and intelligent controller switching to ensure vehicles maintain safe functionality even under active attacks. They go beyond simple fail-safes by enabling mission continuity and resilience through autonomous recovery mechanisms.",
			"example": [
				{
					"reference ID": "RE0051",
					"description": "Researchers proposed a simulation-guided policy model using deep reinforcement learning to ensure safe navigation under attack, allowing recovery actions to be executed dynamically and generalized to different robotic vehicles."
				},
				{
					"reference ID": "RE0052",
					"description": "PID-Piper framework introduces a dual-controller system where a machine-learning-based feed-forward controller takes over from the PID controller during physical attacks to guide the vehicle back to safety and resume its mission."
				},
				{
					"reference ID": "RE0053",
					"description": "An uncertainty-aware deep reinforcement learning-based intrusion response system is developed to autonomously respond to detected attacks in in-vehicle networks, selecting optimal defense strategies to ensure mission success and minimal disruption."
				}
			],
			"techniques": ["T5018", "T5020","T5024", "T5081", "T5073", "T5072"],
			"NISTCRS_approaches": ["NISTA001", "NISTA003","NISTA004", "NISTA048"],
			"NISTCRS_effects": ["NISTLE006", "NISTLE010", "NISTLE011", "NISTLE012", "NISTLE013"],
			"NISTCRS_controls": ["NISTC-IR-4(2)", "NISTC-IR-4(3)", "NISTC-IR-4(9)", "NISTC-IR-4(13)", "NISTC-PE-6(2)", "NISTC-CA-7(6)", "NISTC-SI-4(7)", "NISTC-SI-10(3)"],
			"nist_map": [
				{"approach_id": "NISTA001", "control_ids": ["NISTC-IR-4(2)","NISTC-IR-4(3)", "NISTC-IR-4(9)"]},
				{"approach_id": "NISTA003", "control_ids": ["NISTC-IR-4(3)","NISTC-PE-6(2)"]},
				{"approach_id": "NISTA004", "control_ids": ["NISTC-IR-4(13)", "NISTC-PE-6(2)", "NISTC-CA-7(6)", "NISTC-SI-4(7)"]},
				{"approach_id": "NISTA048", "control_ids": ["NISTC-SI-10(3)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0051", "RE0052", "RE0053"]
		},
		{
			"ID": "M5002",
			"name": "Anomaly Detection for Sensor and Actuator Systems",
			"short_description": "Detect and respond to abnormal behaviours in sensor and actuator systems of autonomous vehicles.",
			"full_description": "Anomaly Detection for Sensor and Actuator Systems is a mitigation strategy that monitors the behaviour of vehicle sensors and actuators to identify unexpected patterns that may indicate faults or attacks. This includes validating sensor inputs (e.g., from LiDAR, GPS, IMU), verifying actuator commands (e.g., throttle, braking), and using redundancy checks or predictive models to flag inconsistencies. Upon detection of abnormal behaviour, the system may isolate faulty components, switch to backup modules, or initiate corrective actions to maintain safe vehicle operation. This mitigation plays a critical role in ensuring the reliability and security of perception and control subsystems in autonomous vehicles.",
			"example": [
				{
					"reference ID": "RE0054",
					"description": "Researchers proposes a method to verify the integrity of LiDAR data by using geometric checks and redundancy. The authors construct an expected 3D point cloud using a LiDAR simulator and compare it with live sensor output. Anomalies are detected when significant deviations between the observed and expected data occur, which allows  detect spoofing or sensor manipulation."
				},
				{
					"reference ID": "RE0055",
					"description": "Researchers introduces a real-time anomaly detection and recovery framework for sensor data in connected automated vehicles. It uses statistical outlier detection combined with kinematic prediction models to identify abnormal sensor signals. Once an anomaly is detected, a data recovery module replaces faulty sensor values with predicted estimates to ensure continued safe operation."
				},
				{
					"reference ID": "RE0056",
					"description": "Researchers presents a method for real-time anomaly detection and classification in AV sensor data. The system monitors deviations in sensor measurements using both residual error checks and neural network-based classification. It supports distinguishing between different anomaly types and provides interpretable diagnostics to inform downstream recovery or failover mechanisms."
				},
				{
					"reference ID": "RE0057",
					"description": "Researchers introduces a learning-based framework that detects anomalies in both sensors and actuators of mobile robots. The approach combines multi-layer monitoring of data validity, action correctness, and system behaviour. Anomalies trigger fallback mechanisms that reset actuator commands or ignore corrupted sensor values, thus enabling continued robot operation despite compromised inputs."
				},
				{
					"reference ID": "RE0058",
					"description": "Researchers proposes a fault detection algorithm for sensors and actuators in autonomous vehicles based on the vehicle’s longitudinal dynamics. It uses analytical redundancy through a prediction model to compare expected and actual signals. Discrepancies in signals such as braking force or acceleration are flagged as anomalies, supporting both detection and isolation of faulty components."
				}
			],
			"techniques": ["T5005", "T5006", "T5024", "T5027", "T5072", "T5075", "T5004"],
			"NISTCRS_approaches": ["NISTA004", "NISTA005", "NISTA048"],
			"NISTCRS_effects": ["NISTLE013","NISTLE006", "NISTLE007"],
			"NISTCRS_controls": ["NISTC-SR-10", "NISTC-SI-4(2)", "NISTC-SI-4(3)", "NISTC-RA-5(6)", "NISTC-IR-4(13)", "NISTC-SI-10(3)"],
			"nist_map": [
				{"approach_id": "NISTA004", "control_ids": ["NISTC-SR-10","NISTC-SI-4(2)"]},
				{"approach_id": "NISTA005", "control_ids": ["NISTC-SI-4(3)", "NISTC-RA-5(6)"]},
				{"approach_id": "NISTA048", "control_ids": ["NISTC-IR-4(13)","NISTC-SI-10(3)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0054", "RE0055", "RE0056", "RE0057", "RE0058"]
		},
		{
			"ID": "M5003",
			"name": "Antivirus/Antimalware",
			"short_description": "Use antivirus or antimalware tools in automotive systems to detect, prevent, and respond to software-based threats.",
			"full_description": "Antivirus and antimalware protection in autonomous vehicles aims to detect, prevent, and respond to malicious software that targets in-vehicle systems. While traditional antivirus solutions are commonly used in IT environments, their direct use in AV systems is limited due to strict real-time and resource constraints. Research has proposed lightweight malware detection frameworks specifically designed for connected vehicles, including behaviour monitoring, signature-based detection, and vehicle security modules that coordinate data collection and analysis. Industry best practices and cybersecurity regulations, such as UN R155, support the use of malware detection mechanisms—particularly in updateable and connected components like infotainment units or telematics modules. However, there is still no widely adopted or standardised antivirus engine tailored for all AV platforms. This highlights a current gap in AV defence research and implementation, where further work is needed to develop lightweight, real-time antimalware solutions suitable for embedded automotive systems.",
			"example": [
				{
					"reference ID": "RE0059",
					"description": "This paper proposes a layered malware defence framework for connected vehicles, including lightweight behaviour monitoring and antivirus scanning coordinated by a Vehicle Security Module (VSM)."
				},
				{
					"reference ID": "RE0060",
					"description": "This survey highlights malware threats in automotive systems and reviews antivirus and host-based intrusion detection as key defences to detect and contain malware activity."
				},
				{
					"reference ID": "RE0061",
					"description": "This best practice report recommends using lightweight antivirus scanning and runtime behaviour checks on updatable systems such as infotainment units to prevent and detect malware."
				},
				{
					"reference ID": "RE0062",
					"description": "This regulation requires OEMs to detect and respond to software-based threats, supporting the use of antivirus and malware monitoring tools as part of a certified cybersecurity framework."
				}
			],
			"techniques": ["T5017","T5042","T5055"],
			"NISTCRS_approaches": ["NISTA004", "NISTA006","NISTA044"],
			"NISTCRS_effects": ["NISTLE013", "NISTLE007", "NISTLE006", "NISTLE012", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-SC-44", "NISTC-SI-4(2)", "NISTC-SI-4(24)", "NISTC-SI-3(10)"],
			"nist_map": [
				{"approach_id": "NISTA044", "control_ids": ["NISTC-SC-44"]},
				{"approach_id": "NISTA004", "control_ids": ["NISTC-SI-4(2)", "NISTC-SI-4(24)"]},
				{"approach_id": "NISTA006", "control_ids": ["NISTC-SI-3(10)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0059", "RE0060", "RE0061", "RE0062"]
		},
		{
			"ID": "M5004",
			"name": "Application Developer Guidance",
			"short_description": "Application Developer Guidance encourages secure software engineering practices across the automotive development lifecycle, helping prevent vulnerabilities through structured and validated development processes.",
			"full_description": "Application Developer Guidance involves following secure development practices throughout the automotive software and hardware lifecycle. These practices are promoted by international standards and industry guidelines, such as those from Auto-ISAC, ISO 26262, and J3061. They aim to ensure that cybersecurity is built into vehicle systems from the earliest design stages. This includes defining security requirements, using secure coding methods, verifying functionality, and maintaining systems post-deployment. While these standards and best practices are often voluntary, they provide a critical foundation for reducing risks associated with software vulnerabilities and misconfigurations. OEMs and suppliers are encouraged to adopt them as part of their regular engineering process. \n While many of these are guidelines, UN R155 provides enforceable requirements for cybersecurity governance, making secure development not only best practice but a regulatory necessity. \n This mitigation is especially important for attack techniques that involve access control or credential-based intrusion. By guiding developers to implement robust authentication and access management during design and development, this approach reduces the risk of unauthorised access to critical vehicle functions.",
			"example": [
				{
					"reference ID": "RE0063",
					"description": "Outlines best practices for secure software development throughout the vehicle lifecycle, covering design, testing, implementation, and post-production phases."
				},
				{
					"reference ID": "RE0064",
					"description": "Promotes structured and traceable development processes aligned with safety goals, which also support secure software engineering principles."
				},
				{
					"reference ID": "RE0065",
					"description": "Introduces an automotive-specific cybersecurity development lifecycle that guides developers through secure design, threat modelling, testing, and post-deployment updates, directly supporting structured application security practices."
				},
				{
					"reference ID": "RE0062",
					"description": "UN R155 is a mandatory regulation requiring OEMs to implement cybersecurity management across the vehicle lifecycle, including secure-by-design principles, risk assessment, and secure software development practices."
				}

			],
			"techniques": ["T5003", "T5016", "T5021", "T5024", "T5038", "T5047", "T5025", "T5049"],
			"NISTCRS_approaches": ["NISTA035", "NISTA010", "NISTA011"],
			"NISTCRS_effects": ["NISTLE014", "NISTLE005"],
			"NISTCRS_controls": ["NISTC-PM-32", "NISTC-PL-8(1)", "NISTC-CP-2(1)", "NISTC-CA-7(5)"],
			"nist_map": [
				{"approach_id": "NISTA035", "control_ids": ["NISTC-PM-32"]},
				{"approach_id": "NISTA010", "control_ids": ["NISTC-PL-8(1)"]},
				{"approach_id": "NISTA011", "control_ids": ["NISTC-CP-2(1)", "NISTC-CA-7(5)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0063", "RE0064", "RE0065", "RE0062"]
		},
		{
			"ID": "M5005",
			"name": "Application Firewall",
			"short_description": "Application firewalls filter and control application-level traffic and activities within the vehicle, protecting software components from unauthorised access or malicious manipulation.",
			"full_description": "Application firewalls are used to monitor and control the execution of applications and services running on automotive systems. They are especially relevant for ECUs that run a full operating system, such as the infotainment, telematics, or CID systems, where process-level control can be enforced. These firewalls can limit access to files, restrict execution of unauthorised commands, and enforce application-specific policies to contain the impact of compromised or malicious software. \n However, for low-level ECUs that function as dedicated controllers without a general-purpose OS (e.g., brake or engine ECUs), implementing application firewalls is significantly more challenging due to limited computational resources and absence of process separation. Therefore, this mitigation is primarily applied at the application layer of more capable systems. Despite its scope being limited to certain subsystems, it can provide a critical defensive boundary that prevents escalation or lateral movement within the vehicle network.",
			"example": [
				{
					"reference ID": "RE0011",
					"description": "In the Tesla Model Sy, AppArmor was used within the CID system as an application firewall to contain browser-based threats and limit what processes could do even if compromised."
				},
				{
					"reference ID": "RE0012",
					"description": "In this study, the manufacturer had improved AppArmor rules to prevent browser processes from reading sensitive kernel data or executing files from untrusted directories, showing a hardened application firewall configuration. Despite this, the researchers successfully exploited the system using a 0-day vulnerability."
				}
			],
			"techniques": ["T5014","T5015", "T5007", "T5020","T5026", "T5028", "T5025"],
			"NISTCRS_approaches": ["NISTA048", "NISTA033", "NISTA004"],
			"NISTCRS_effects": ["NISTLE007", "NISTLE010", "NISTLE006", "NISTLE012"],
			"NISTCRS_controls": ["NISTC-SI-4(2)","NISTC-SI-4(4)", "NISTC-AC-3(7)", "NISTC-AC-3(11)", "NISTC-AC-3(13)"],
			"nist_map": [
				{"approach_id": "NISTA048", "control_ids": ["NISTC-SI-4(2)"]},
				{"approach_id": "NISTA004", "control_ids": ["NISTC-SI-4(2)","NISTC-SI-4(4)"]},
				{"approach_id": "NISTA033", "control_ids": ["NISTC-AC-3(7)", "NISTC-AC-3(11)", "NISTC-AC-3(13)"]}
			], 
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0011", "RE0012"]
		},
		{
			"ID": "M5006",
			"name": "Application Isolation and Sandboxing",
			"short_description": "Isolate applications within AV systems, particularly infotainment, to prevent compromised apps from affecting the core vehicle functions.",
			"full_description": "This mitigation involves isolating software applications within secure environments to prevent the propagation of attacks. In autonomous vehicles, application isolation is most suitable for ECUs running general-purpose or embedded OSs, such as infotainment units or telematics modules. These systems may run browsers, update services, or diagnostics interfaces that are exposed to external input, making them high-risk for exploitation. This mitigation involves isolating software applications within secure environments to prevent the propagation of attacks. In autonomous vehicles, application isolation is most suitable for ECUs running general-purpose or embedded OSs, such as infotainment units or telematics modules. These systems may run browsers, update services, or diagnostics interfaces that are exposed to external input, making them high-risk for exploitation.",
			"example": [
				{
					"reference ID": "RE0013",
					"description": "The attack on BMW's head unit demonstrated the lack of browser sandboxing in the in-car infotainment system, allowing an attacker to escalate from browser context to full system access. If application sandboxing had been enforced, the browser process could have been contained, preventing lateral movement across services."
				}
			],
			"techniques": ["T5015", "T5022", "T5040", "T5047", "T5076", "T5025"],
			"NISTCRS_approaches": ["NISTA044", "NISTA045", "NISTA037"],
			"NISTCRS_effects": ["NISTLE007", "NISTLE009","NISTLE005", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-AC-4(21)", "NISTC-AC-6(4)", "NISTC-SC-18(5)", "NISTC-SC-39", "NISTC-CM-7(6)", "NISTC-CM-7(2)"],	
			"nist_map": [
				{"approach_id": "NISTA044", "control_ids": ["NISTC-AC-4(21)", "NISTC-AC-6(4)", "NISTC-SC-39", "NISTC-CM-7(6)"]},
				{"approach_id": "NISTA045", "control_ids": ["NISTC-SC-18(5)"]},
				{"approach_id": "NISTA037", "control_ids": ["NISTC-CM-7(2)"]}
			], 
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0013"]
		},
		{
			"ID": "M5007",
			"name": "Authenticate Devices",
			"short_description": "Verify the identity and legitimacy of devices before allowing interaction with AV systems or networks.",
			"full_description": "This mitigation ensures that only authorised and legitimate devices—such as ECUs, sensors, diagnostic tools, or mobile devices—can interact with the in-vehicle network or autonomous vehicle systems. It addresses threats involving the injection of malicious or spoofed devices (e.g., rogue ECUs, USB drives, or diagnostic dongles) that aim to manipulate vehicle behaviour or gain unauthorised control. Techniques include mutual authentication, certificate-based identity verification, hardware fingerprinting, and lightweight challenge–response protocols. This method is particularly effective against external hardware attacks, removable device misuse, and in-vehicle spoofing attempts.",
			"example": [
				{
					"reference ID": "RE0066",
					"description": "Introduces SRAM-based PUFs and mutual authentication between ECUs and the gateway, to prevent spoofed ECU injection or malicious external tools via OBD-II."
				},
				{
					"reference ID": "RE0067",
					"description": "Uses certificate and session-key-based authentication to securely pair mobile devices with the vehicle without exposing CAN-level control, to mitigate threats from rogue external apps."
				},
				{
					"reference ID": "RE0068",
					"description": "Implements a hash-chain based symmetric key protocol for authenticating lightweight IoT devices in vehicles, therefore, only authorised monitors can send verifiable data."
				},
				{
					"reference ID": "RE0069",
					"description": "Applies MAC-tag verification and FPGA-based monitoring to authenticate in-vehicle messages and block spoofed transmissions from compromised or injected devices."
				},
				{
					"reference ID": "RE0070",
					"description": "ISO/SAE 21434:2021 requires authentication for all development and maintenance tools, including model-based development tools, static checkers, verification tools, flash writers, end-of-line testers, on-board diagnostic tools, and reprogramming tools."
				}
			],
			"techniques": ["T5008", "T5025", "T5056", "T5058", "T5060"],
			"NISTCRS_approaches": ["NISTA014","NISTA046"],
			"NISTCRS_effects": ["NISTLE005","NISTLE006"],
			"NISTCRS_controls": ["NISTC-IA-3(1)"],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0066", "RE0067", "RE0068","RE0069", "RE0070"]
		},
		{
			"ID": "M5008",
			"name": "Authorization Enforcement",
			"short_description": "Ensure that only authorised users, tools, or systems can access or perform privileged operations in vehicle systems.",
			"full_description": "Authorization Enforcement focuses on verifying whether an entity—such as a diagnostic tool, ECU, user, or process—has the right to access or control specific vehicle functions. It prevents unauthorised actions like firmware flashing, diagnostic mode activation, or message injection by enforcing role-based or policy-based controls. Common techniques include access control lists, challenge–response protocols, access tokens, permission checks, and firewall rule enforcement. This method mitigates attacks involving the misuse of elevated privileges or unauthorised tools, especially during development, servicing, or external connectivity.",
			"example": [
				{
					"reference ID": "RE0070",
					"description": "BS ISO/SAE 21434:2021 enforces both physical and logical access controls during production, preventing unauthorised privileged access to software, hardware, and production systems that could alter the vehicle's security posture."
				},
				{
					"reference ID": "RE0071",
					"description": "ISO 14229 defines a Security Access mechanism using a Seed/Key challenge–response protocol to restrict access to privileged ECU services, ensuring only authorised tools can perform secure operations such as reprogramming."
				},
				{
					"reference ID": "RE0072",
					"description": "This paper models the security risks of UDS SecurityAccess in low-resource ECUs and proposes lifecycle-aware enforcement policies to prevent unauthorised use of development-stage assets and tools."
				},
				{
					"reference ID": "RE0073",
					"description": "Proposes an FPGA/software-based firewall that enforces access policies for diagnostic and Ethernet messages, ensuring only authorised tools or systems can initiate sensitive commands like UDS sessions."
				}				
			],
			"techniques": ["T5024", "T5019", "T5028", "T5018", "T5032", "T5064", "T5073"],
			"NISTCRS_approaches": ["NISTA033"],
			"NISTCRS_effects": ["NISTLE006", "NISTLE008", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-AC-3(7)", "NISTC-AC-3(12)", "NISTC-AC-3(13)"],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0070", "RE0071", "RE0072", "RE0073"]
		},		
		{
			"ID": "M5009",
			"name": "Code Signing and Boot Integrity",
			"short_description": "Ensure the integrity and authenticity of both software and firmware in autonomous vehicles through digital signatures and secure boot mechanisms.",
			"full_description": "Code signing involves applying digital signatures to software and firmware updates to ensure they are created by authorised sources and have not been tampered with. Boot integrity ensures that only verified and trusted code is loaded during the ECU start-up process, preventing malicious or altered software from running. \n In AV systems, software and firmware updates often occur through over-the-air (OTA) channels, where risks such as tampering, spoofing, or replay attacks are significant. Therefore, both mechanisms are implemented together, code signing guarantees the authenticity of the update, and boot integrity ensures safe execution during the next system restart. In this context, secure firmware flashing and reboot are typically treated as a unified process. \n Several methods exemplify these practices. For instance, secure boot mechanisms using CMAC-based integrity checks have been proposed to validate each software component before it is executed. Firmware verification using hash chains or challenge-response protocols further ensures that the flashed content matches the intended binary. Lightweight approaches using HMAC and timestamp-based checks are also proposed for IoT-based vehicle systems. Regulatory frameworks like UN R156 mandate that software updates be digitally signed and verified before installation to ensure trusted execution throughout the update lifecycle.",
			"example": [
				{
					"reference ID": "RE0074",
					"description": "Researchers ensure firmware integrity and authenticity through digital signatures and hash chains before execution."
				},
				{
					"reference ID": "RE0075",
					"description": "The paper verifies firmware correctness post-flashing using a challenge-based hash chain to ensure trusted execution."
				},
				{
					"reference ID": "RE0076",
					"description": "Secure boot using CMAC is proposed to verify software integrity before ECU startup, preventing unauthorised code execution."
				},
				{
					"reference ID": "RE0077",
					"description": "The system authenticates IoT device firmware and transmitted data using HMAC, ensuring data and code integrity."
				},
				{
					"reference ID": "RE0078",
					"description": "UN Regulation No.156 mandates digitally signed software updates and integrity checks to ensure trusted code execution."
				}
			],
			"techniques": ["T5026", "T5023", "T5018", "T5031", "T5032", "T5036", "T5078"],
			"NISTCRS_approaches": ["NISTA046", "NISTA047"],
			"NISTCRS_effects": ["NISTLE013"],
			"NISTCRS_controls": ["NISTC-SI-7", "NISTC-SI-7(1)", "NISTC-SI-7(6)", "NISTC-SI-7(9)", "NISTC-SI-7(10)", "NISTC-SI-7(15)", "NISTC-CM-14", "NISTC-SR-4", "NISTC-SR-4(1)", "NISTC-SR-4(2)"],
			"nist_map": [
				{"approach_id": "NISTA046", "control_ids": ["NISTC-SI-7", "NISTC-SI-7(1)", "NISTC-SI-7(6)", "NISTC-SI-7(9)", "NISTC-SI-7(10)"]},
				{"approach_id": "NISTA047", "control_ids": ["NISTC-CM-14", "NISTC-SR-4", "NISTC-SR-4(1)", "NISTC-SR-4(2)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0074","RE0075","RE0076","RE0077","RE0078"]
		},
		{
			"ID": "M5010",
			"name": "Communication Authenticity",
			"short_description": "Ensure that in-vehicle communication is genuine and tamper-free through message authentication and secure protocols.",
			"full_description": "Communication Authenticity is a critical mitigation technique that ensures the validity and integrity of messages exchanged between vehicle components. In autonomous vehicles, ECUs communicate through protocols like CAN, FlexRay, and Automotive Ethernet. However, many of them lack native authentication, making them vulnerable to spoofing, replay, and tampering attacks. \n This mitigation involves implementing message authentication codes (MACs), symmetric key mechanisms, counters, encryption, or layered security protocols to verify that messages originate from legitimate sources and are not altered during transmission. Authentication can be implemented at different layers, such as stream-level symmetric encryption, compound MACs for batched messages, or dual-level authentication tailored to the criticality of the data. \n Papers in this domain have explored lightweight methods suitable for real-time systems, such as compound MACs for delayed authentication (RE0083), dual-level MACs for balancing security and latency (RE0080), and ECU-to-central authentication followed by runtime stream keying (RE0081). Others focus on formal evaluation frameworks that assess trade-offs in cost, compatibility, and implementation complexity (RE0079), or incorporate security-aware scheduling using hardware co-processors to offload cryptographic load in FlexRay systems (RE0084). At the architectural level, cooperation between safety and security objectives using secret key management and VLAN segmentation in Ethernet-based AV networks further reinforces communication authenticity (RE0085). \n This mitigation supports trustworthy intra-vehicle communication by verifying origin, preventing manipulation, and maintaining operational safety in the presence of potential adversaries.",
			"example": [
				{
					"reference ID": "RE0079",
					"description": "Evaluates ten CAN authentication methods against industry criteria, highlighting trade-offs and the need for message-level authenticity."
				},
				{
					"reference ID": "RE0080",
					"description": "Proposes a dual-level authentication protocol for CAN messages using truncated and full MACs based on message criticality."
				},
				{
					"reference ID": "RE0081",
					"description": "Implements ECU authentication with RSA and stream message authentication with AES for real-time secure communication."
				},
				{
					"reference ID": "RE0082",
					"description": "Proposes pair-wise symmetric keys and counters to enable sender-receiver authentication and replay prevention in CAN."
				},
				{
					"reference ID": "RE0083",
					"description": "Introduces delayed compound MAC authentication for batches of CAN messages to reduce overhead while ensuring authenticity."
				},
				{
					"reference ID": "RE0084",
					"description": "Uses hardware co-processors to enable real-time authentication in FlexRay systems with minimal impact on scheduling."
				},
				{
					"reference ID": "RE0085",
					"description": "Highlights Ethernet-based secure communication using secret key management, VLANs, and frame replication to enforce authenticity."
				},
				{
					"reference ID": "RE0086",
					"description": "CISA recommends strong network authentication (e.g., WPA3/WPA2 with 802.1X), credential management, encryption, and access control to secure external wireless communications."
				}
			],
			"techniques": ["T5007", "T5020", "T5063", "T5072", "T5081", "T5069", "T5073", "T5074", "T5050"],
			"NISTCRS_approaches": ["NISTA047", "NISTA046", "NISTA018"],
			"NISTCRS_effects": ["NISTLE006", "NISTLE008", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-AU-10(2)", "NISTC-SC-8(1)", "NISTC-SC-29"],
			"nist_map": [
				{"approach_id": "NISTA018", "control_ids": ["NISTC-SC-29"]},
				{"approach_id": "NISTA046", "control_ids": ["NISTC-SC-8(1)"]},
				{"approach_id": "NISTA047", "control_ids": ["NISTC-AU-10(2)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0079", "RE0080", "RE0081", "RE0082", "RE0083", "RE0084", "RE0085"]
		},		
		{
			"ID": "M5011",
			"name": "Conceal or Randomize Network Traffic",
			"short_description": "Hide or randomise communication behaviour to prevent attackers from learning or predicting message flows.",
			"full_description": "Conceal or Randomize Network Traffic is a mitigation strategy designed to make it harder for attackers to observe, learn, or exploit communication patterns in AV systems. Many AV protocols are highly predictable, especially internal ones like CAN or UDS. This makes them vulnerable to replay, injection, or timing-based attacks once an attacker learns the communication schedule or IDs. This mitigation addresses that risk in two main ways: \n - Concealing traffic, for example by encrypting messages or wrapping sensitive diagnostics in protected channels (e.g., UDS SecurityAccess). \n - Randomising patterns, such as dynamically changing message schedules, IDs, or even routing paths (Moving Target Defense) to confuse or mislead attackers. \n In modern AV systems, messages can be protected using lightweight encryption or authentication tags. For example, the secure gateway encrypts CAN FD messages and rotates session keys to ensure that repeated messages cannot be guessed or replayed. UDS diagnostic commands, especially those that unlock higher privileges, should also be protected—not just by a fixed seed-key but by securely managed lifecycle-aware controls (RE0072). And to protect more time-sensitive or scheduled communications (e.g., sensor fusion or control loops), the Moving Target Defense (MTD) approach (RE0088) offers a way to shift message timing or routing patterns over time without affecting system safety, making the network traffic less predictable and harder to exploit.",
			"example": [
				{
					"reference ID": "RE0072",
					"description": "Recommends restricting and securing UDS diagnostic access to prevent attackers from replaying or predicting SecurityAccess requests."
				},
				{
					"reference ID": "RE0087",
					"description": "Implements key rotation and AES encryption in the secure in-vehicle gateway to conceal message content and prevent tampering."
				},
				{
					"reference ID": "RE0088",
					"description": "Implements message authentication (HMAC/CMAC) and AES encryption across CAN/CAN FD domains in a secure gateway, preventing replay and tampering attacks by concealing message content and enforcing session-based key updates."
				}
			],
			"techniques": ["T5024", "T5019", "T5023", "T5020", "T5018", "T5050", "T5072", "T5080"],
			"NISTCRS_approaches": ["NISTA014", "NISTA050"],
			"NISTCRS_effects": ["NISTLE009", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-SC-8(5)", "NISTC-SC-30"],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0072", "RE0087", "RE0088"]
		},		
		{
			"ID": "M5013",
			"name": "Encrypt Network Traffic",
			"short_description": "Encrypt network traffic to prevent eavesdropping, spoofing, and message tampering in both in-vehicle and external communications.",
			"full_description": "Encrypt Network Traffic aims at preserving the confidentiality and integrity of data transmitted between components. This includes both internal vehicle networks—such as CAN bus and ECU-to-gateway traffic—and external communication interfaces like over-the-air (OTA) updates, remote diagnostics, mobile keyless entry, and cloud services. \n  This mitigation ensures that data sent between vehicle systems or between the vehicle and outside entities is encrypted using methods such as AES (e.g., in CTR or CBC mode) and protected with message authentication codes (MACs). These techniques prevent unauthorised interception, replay, and modification of messages. \n In internal networks, encryption is used to secure diagnostic messages, ECU authentication, or lightweight CAN traffic via cryptographic tags or dynamic session keys. In external networks, encryption protects OTA firmware updates, remote keyless entry signals, and wireless links with backend systems. Examples include the use of Physical Unclonable Functions (PUFs) to generate per-ECU session keys, hash chains to create one-time encryption keys for IoT telemetry, and secure OTA protocols that verify firmware authenticity and freshness using digital signatures and encryption.",
			"example": [
				{
					"reference ID": "RE0001",
					"description": "The paper recommends securing in-vehicle and inter-vehicle communication using encrypted protocols that combine authentication and encryption to prevent eavesdropping and message tampering on CAN and GPS channels."
				},
				{
					"reference ID": "RE0006",
					"description": "The proposed System-of-Systems architecture employs encryption at the communication layer between UAVs, UGVs, and control centres to protect satellite and cloud-based data transmission against interception and spoofing."
				},
			    {
					"reference ID": "RE0022",
					"description": "Proposed a secure protocol disables unauthenticated access to the OBD-II interface by requiring all diagnostic messages on the CAN bus to use encryption (AES-128) and message authentication codes (MAC). This blocks malicious apps from injecting commands through Bluetooth-connected diagnostic tools, effectively replacing the default insecure diagnostic communication with protected sessions."
				},
				{
					"reference ID": "RE0032",
					"description": "Researchers present a Secure Remote Keyless Entry (RKE) system that disables the traditional RKE features vulnerable to replay, cloning, and OBD port scan attacks. Their system replaces static authentication and memory-resident cryptographic keys with an Unclonable Security Module (SUC) that generates dynamic session keys and pseudo-identities. The design effectively removes the insecure behaviour of exposing static authentication credentials and disables the ability of key fob cloning via OBD port scanning by not storing any reusable authentication data in memory."
				},
				{
					"reference ID": "RE0066",
					"description": "Implements mutual authentication and session key establishment between each ECU and the gateway using SRAM-based PUFs. After authentication, secure CAN traffic is achieved using cryptographic tags derived from these session keys, ensuring message integrity and protection without encrypting the full payload."
				},
				{
					"reference ID": "RE0068",
					"description": "Uses parallel hash chains to generate one-time encryption keys for each data transmission from vehicle IoT devices. Messages are encrypted using AES in CTR mode with unique one-time IDs to preserve anonymity and prevent replay attacks while ensuring data authenticity and confidentiality over unstable networks."
				},
				{
					"reference ID": "RE0074",
					"description": "Applies symmetric encryption (CBC mode) to firmware packets during wireless over-the-air updates. Hash chains and digital signatures are used to verify authenticity, integrity, and freshness, effectively protecting update communication against eavesdropping, tampering, and replay attacks."
				}
			],
			"techniques": ["T5007", "T5020", "T5077", "T5026", "T5024", "T5050"],
			"NISTCRS_approaches": ["NISTA014","NISTA046"],
			"NISTCRS_effects": ["NISTLE006", "NISTLE008", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-SC-8", "NISTC-SC-8(1)"],
			"nist_map": [
				{"approach_id": "NISTA014", "control_ids": ["NISTC-SC-8", "NISTC-SC-8(1)"]},
				{"approach_id": "NISTA046", "control_ids": ["NISTC-SC-8(1)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0001", "RE0006", "RE0022", "RE0032", "RE0066", "RE0068", "RE0074"]
		},		
		{
			"ID": "M5015",
			"name": "Exploit Protection",
			"short_description": "Prevent execution of unauthorised or potentially malicious code through system-level protections, endpoint hardening, and runtime configuration controls.",
			"full_description": "Execution Prevention in autonomous and connected vehicles involves a set of strategies that block unauthorised or malicious code execution across both OS-based and resource-constrained ECUs. These methods include OS-level protections (like DEP, ASLR, SELinux), third-party endpoint security tools that monitor execution behaviour or enforce binary integrity, and hardened application configurations that restrict unnecessary or dangerous features. \n While OS-based protections are applicable to infotainment or telematics ECUs, lightweight runtime protections and binary whitelisting are preferred in constrained environments. \n Additionally, hardening interfaces such as diagnostic ports or Bluetooth services can prevent execution pathways exploited by attackers. Virtual patching using IPS is another growing direction but remains limited in deployment. Execution Prevention ensures that even if an attacker gains access, their ability to exploit, run or persist malicious payloads is severely restricted. \n Execution prevention can be applied in: (1)OS-based systems like head units, ADAS domain controllers, gateways; (2) Constrained systems through whitelisting and memory-hardening; (3) Communication interfaces such as UDS or remote access services",
			"example": [
				{
					"reference ID": "RE0023",
					"description": "The Mercedes-Benz infotainment system uses QNX OS with built-in exploit mitigations like ASLR, memory protection, and code signing. Tencent Keen Lab observed these OS-level protections prevented many conventional Linux privilege escalation attacks during real-world exploit attempts. This highlights how enabling system-level hardening can effectively block unauthorised code execution."
				},
				{
					"reference ID": "RE0086",
					"description": "Karamba Security’s Autonomous Security locks down the binary execution path of the ECU to its factory image using control flow integrity and whitelisting. It autonomously blocks memory-based attacks such as buffer overflows and return-oriented programming (ROP), without needing connectivity or signature updates. This hardens the ECU against runtime code injection and other execution attacks even in air-gapped states."
				},
				{
					"reference ID": "RE0013",
					"description": "In response to the Keen Lab BMW attack, BMW applied security updates that disabled insecure remote service features and removed remote debugging keys. These hardening actions limited unauthorised execution of diagnostic commands and blocked pathways for post-exploit persistence through service misconfiguration or over-permissive access policies."
				}
			],
			"techniques": ["T5015","T5022", "T5040", "T5047", "T5076", "T5060"],
			"NISTCRS_approaches": ["NISTA037", "NISTA020", "NISTA047","NISTA048"],
			"NISTCRS_effects": ["NISTLE005", "NISTLE006", "NISTLE010","NISTLE008", "NISTLE009"],
			"NISTCRS_controls": ["NISTC-AC-4(8)", "NISTC-IR-4(13)", "NISTC-SI-16"],
			"nist_map": [
				{"approach_id": "NISTA047", "control_ids": ["NISTC-AC-4(8)"]},
				{"approach_id": "NISTA048", "control_ids": ["NISTC-IR-4(13)"]},
				{"approach_id": "NISTA037", "control_ids": ["NISTC-SI-16"]},
				{"approach_id": "NISTA020", "control_ids": ["NISTC-SI-16"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0023","RE0013","RE0086"]
		},		
		{
			"ID": "M5016",
			"name": "Fail-Safe Mechanism",
			"short_description": "Implement strategies that transition the autonomous vehicle to a safe state when faults or unsafe conditions are detected.",
			"full_description": "Fail-Safe Mechanism refers to the implementation of system behaviours that ensure the autonomous vehicle enters a safe, stable state in the event of faults, sensor failures, or abnormal behaviour. These strategies include activating degraded driving modes, performing controlled stopping, or enabling driver override when autonomous control is no longer safe. \n Fail-safe mechanisms focus on reacting to detected faults, prioritising passenger and vehicle safety over operational continuity. For example, if a perception sensor fails, the system may reduce speed or come to a controlled stop. If control logic detects high risk, the vehicle may shift to a fallback routine or hand control back to the driver. \n While Redundancy of Service aims to maintain full or partial functionality through backup systems, Fail-Safe Mechanisms ensure that even without redundancy, the system will behave safely. Both are essential: fail-safe acts as the last line of defence, while redundancy seeks to prevent the need to activate it.",
			"example": [
				{
					"reference ID": "RE0097",
					"description": "Presents a fail-safe algorithm for exteroceptive sensors that enables degraded driving modes or controlled stop during sensor failures."
				},
				{
					"reference ID": "RE0098",
					"description": "Implements a dual-redundant Steer-By-Wire system architecture with degraded mode steering after SCU or sensor failures."
				},
				{
					"reference ID": "RE0099",
					"description": "Proposes a cross-layer fail-operational design with redundant communication modules and hardware-software co-design to ensure continued AV operation."
				},
				{
					"reference ID": "RE0100",
					"description": "Defines fail-operational design patterns including dual ECUs, dual nets, and limp-home modes for steering, braking, and powertrain subsystems."
				},
				{
					"reference ID": "RE0101",
					"description": "Introduces a shared control system where the driver can override AV control in hazardous conditions using arbitration and hazard estimation."
				}
			],
			"techniques": ["T5072", "T5073", "T5079", "T5081"],
			"NISTCRS_approaches": ["NISTA001","NISTA003", "NISTA048"],
			"NISTCRS_effects": ["NISTLE005", "NISTLE006", "NISTLE007", "NISTLE011", "NISTLE012"],
			"NISTCRS_controls": ["NISTC-IR-4(9)", "NISTC-IR-4(2)", "NISTC-SI-4(13)", "NISTC-SI-4(2)", "NISTC-CP-12"],
			"nist_map": [
				{"approach_id": "NISTA001", "control_ids": ["NISTC-IR-4(9)", "NISTC-IR-4(2)"]},
				{"approach_id": "NISTA003", "control_ids": ["NISTC-CP-12"]},
				{"approach_id": "NISTA048", "control_ids": ["NISTC-SI-4(13)", "NISTC-SI-4(2)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0097", "RE0098", "RE0099", "RE0100", "RE0101"]
		},
		{
			"ID": "M5017",
			"name": "Filter Network Traffic",
			"short_description": "Filter and control ingress, egress, and internal vehicle network traffic to block malicious communications and restrict attacker movement.",
			"full_description": "Filter Network Traffic in autonomous vehicles involves the deployment of firewall mechanisms, gateway-level filtering, and traffic inspection techniques to restrict unauthorised communication. \n This mitigation includes protocol-based filtering, domain separation, and software-defined firewalls that enforce strict traffic rules at the boundaries between external interfaces (e.g., infotainment, telematics) and internal vehicle domains. Deep-packet inspection (DPI) and stateless or stateful rule enforcement can be applied at the ECU or gateway level to examine message headers, protocols, and security tags. This approach protects against unauthorised message injection, lateral movement between network zones, and external command/control attempts. \n It is applicable to both in-vehicle communications such as CAN/CAN-FD as well as external Ethernet or wireless interfaces used in OTA, telematics, or mobile app interactions.",
			"example": [
				{
					"reference ID": "RE0088",
					"description": "Implements a secure automotive gateway that filters CAN and CAN FD traffic based on security policies. The gateway includes a message filtering firewall to control access between external and safety-critical domains, ensuring only authorised messages reach internal ECUs."
				},
				{
					"reference ID": "RE0073",
					"description": "Proposes a hardware/software co-designed firewall for Ethernet traffic in vehicles. The firewall uses protocol field inspection and filtering logic implemented on FPGA to block malicious ingress traffic at the network edge before it reaches in-vehicle systems."
				},
				{
					"reference ID": "RE0087",
					"description": "Introduces a layered architecture with a filter ECU that authenticates and inspects CAN-FD messages based on predefined security policies. It validates message legitimacy and enforces rate limits to prevent spoofed or malicious communication across zones."
				},
				{
					"reference ID": "RE0011",
					"description": "Demonstrates a remote exploit path in a Tesla due to insufficient network segmentation and ingress filtering. The case highlights the importance of firewalling external access paths to prevent attackers from bridging wireless interfaces to critical in-vehicle networks."
				}
			],
			"techniques": ["T5048", "T5054", "T5057", "T5059", "T5062", "T5061", "T5063","T5069"],
			"NISTCRS_approaches": ["NISTA003","NISTA001", "NISTA004", "NISTA047", "NISTA037", "NISTA033","NISTA046"],
			"NISTCRS_effects": ["NISTLE008", "NISTLE012", "Detect", "Exert", "NISTLE006", "Delay","NISTLE007"],
			"NISTCRS_controls": ["NISTC-AC-3(13)",  "NISTC-AC-4(3)", "NISTC-AC-4(8)", "NISTC-AC-4(17)", "NISTC-SI-4(4)", "NISTC-SI-4(7)", "NISTC-SI-10(5)", "NISTC-IR-4(2)", "NISTC-SC-3(3)", "NISTC-SC-7(11)"],
			"nist_map": [
				{"approach_id": "NISTA003", "control_ids": ["NISTC-AC-4(3)", "NISTC-SI-4(7)"]},
				{"approach_id": "NISTA001", "control_ids": ["NISTC-IR-4(2)"]},
				{"approach_id": "NISTA004", "control_ids": ["NISTC-SI-4(4)"]},
				{"approach_id": "NISTA047", "control_ids": ["NISTC-SC-7(11)", "NISTC-SI-10(5)", "NISTC-AC-4(17)"]},
				{"approach_id": "NISTA037", "control_ids": ["NISTC-SC-3(3)"]},
				{"approach_id": "NISTA033", "control_ids": ["NISTC-AC-3(13)"]},
				{"approach_id": "NISTA046", "control_ids": ["NISTC-AC-4(8)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0049","RE0011", "RE0088", "RE0087"]
		},
		{
			"ID": "M5018",
			"name": "Hardware Security Module",
			"short_description": "Use a dedicated secure hardware unit in ECUs to perform cryptographic operations, securely store keys, and ensure trusted communication and execution in autonomous vehicles.",
			"full_description": "A Hardware Security Module (HSM) is a tamper-resistant component embedded in a vehicle's Electronic Control Unit (ECU) that provides a secure environment for performing cryptographic operations such as encryption, decryption, authentication, and key management. In autonomous vehicles, HSMs help enforce secure boot, message authentication, and key isolation to protect against software-based and physical attacks. \n HSMs can also manage cryptographic keys used for in-vehicle and external communications, such as OTA updates or diagnostics. These modules operate independently of the main processor and support high-assurance security policies for critical systems, ensuring integrity, confidentiality, and availability even in adversarial conditions. Their use is essential for realising trusted execution and data protection in safety-critical AV environments.",
			"example": [
				{
					"reference ID": "RE0089",
					"description": "Presents the design and FPGA-based implementation of a dedicated vehicular HSM, supporting secure boot, key storage, AES/ECC cryptography, and real-time MAC verification to protect in-vehicle networks against unauthorised access and tampering."
				},
				{
					"reference ID": "RE0090",
					"description": "Introduces a Firmware Security Module (FSM) as a software-isolated alternative to hardware HSMs, executing cryptographic services and key management on a dedicated core of an automotive multicore processor to provide flexibility and post-quantum readiness."
				},
				{
					"reference ID": "RE0091",
					"description": "Describes practical deployment of automotive HSMs following AUTOSAR standards, enabling secure boot, authenticated communication, and key protection across ECUs. It highlights integration with AES, SHA, and public key crypto, and shows that HSMs enhance ECU trust and prevent unauthorised firmware or message injection."
				},
				{
					"reference ID": "RE0088",
					"description": "This paper implements a secure in-vehicle gateway architecture on MPC5748G microcontrollers using integrated HSMs to perform cryptographic operations such as HMAC and AES/CMAC for secure communication. The HSM also acts as a key master, securely managing session keys following the SHE specification. This use of HSM ensures message integrity, key protection, and access control, effectively mitigating spoofing, replay, and tampering attacks."
				}
			],
			"techniques": ["T5023","T5032", "T5036","T5024", "T5026", "T5078"],
			"NISTCRS_approaches": ["NISTA039", "NISTA046", "NISTA047", "NISTA010" ],
			"NISTCRS_effects": ["NISTLE005", "NISTLE006", "NISTLE010", "NISTLE009", "NISTLE001"],
			"NISTCRS_controls": ["NISTC-SA-8(3)", "NISTC-SI-7(15)", "NISTC-SI-7(6)", "NISTC-AC-4(17)", "NISTC-CM-14", "NISTC-SC-8(1)"],
			"nist_map": [
				{"approach_id": "NISTA010", "control_ids": ["NISTC-SA-8(3)"]},
				{"approach_id": "NISTA039", "control_ids": ["NISTC-SA-8(3)"]},
				{"approach_id": "NISTA046", "control_ids": ["NISTC-SI-7(6)", "NISTC-SC-8(1)"]},
				{"approach_id": "NISTA047", "control_ids": ["NISTC-AC-4(17)", "NISTC-CM-14", "NISTC-SI-7(15)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0088", "RE0089", "RE0090", "RE0091"]
		},		
		{
			"ID": "M5021",
			"name": "Limit Hardware Installation",
			"short_description": "Restrict unauthorised or unnecessary hardware additions to the vehicle system.",
			"full_description": "This mitigation method involves preventing the installation of unauthorised or unnecessary hardware components, such as aftermarket ECUs, diagnostic tools, or unapproved USB devices, that could compromise the security or safety of the vehicle. In the context of autonomous vehicles, this includes enforcing access controls on physical ports, disabling unused interfaces, and detecting or blocking foreign hardware connections. \n This mitigation is supported. While not always named explicitly as 'limit hardware installation,' the underlying concept is present across multiple automotive standards. Key documents like UN R155, NSA Cybersecurity Best Practices, and ENISA smart car security guidelines recommend securing physical interfaces, managing aftermarket device risks, and limiting physical access to critical ECUs.",
			"example": [
				{
					"reference ID": "RE0062",
					"description": "UN R155 requires the manufacturer to manage cyber risks from aftermarket hardware and replacement components."
				},
				{
					"reference ID": "RE0095",
					"description": "NSA best practices recommend disabling developer/debugging interfaces in production vehicles to prevent hardware misuse."
				},
				{
					"reference ID": "RE0096",
					"description": "ENISA recommends limiting physical access to interfaces like the OBD-II port to reduce hardware-based attack vectors."
				}
			],
			"techniques": ["T5008", "T5014", "T5071", "T5067", "T5077","T5061", "T5060"],
			"NISTCRS_approaches": ["NISTA037"],
			"NISTCRS_effects": ["NISTLE005", "NISTLE006"],
			"NISTCRS_controls": ["NISTC-CM-8(3)"],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0062", "RE0095","RE0096"]
		},
		{
			"ID": "M5022",
			"name": "Limit Software Installation",
			"short_description": "Restrict unauthorised software or firmware installation to maintain secure and verified AV system operation.",
			"full_description": "Limit Software Installation is a mitigation strategy designed to prevent the introduction of unapproved, malicious, or unauthorised software and firmware into autonomous vehicle systems. This includes enforcing strict software installation policies during manufacturing, service, and over-the-air (OTA) updates. \n The goal is to ensure that only authenticated and verified software is installed, thus preventing adversaries from injecting code that could compromise vehicle safety or control. This mitigation is strongly supported by automotive cybersecurity standards and guidelines. \n It aligns with lifecycle-based software management outlined in ISO/SAE 21434, risk mitigation for unauthorised modification as defined in UN R155, and technical controls from NSA best practices that include validating update sources and digitally signing update packages.",
			"example": [
				{
					"reference ID": "RE0062",
					"description": "UN R155 requires managing risks related to unauthorised software modifications, particularly in the post-production phase."
				},
				{
					"reference ID": "RE0095",
					"description": "NSA best practices recommend preventing unauthorised software installation and ensuring OTA updates are cryptographically signed and validated."
				},
				{
					"reference ID": "RE0070",
					"description": "ISO/SAE 21434 defines secure software lifecycle processes to ensure only authorised and validated software is installed."
				}
			],
			"techniques": ["T5003", "T5031", "T5026", "T5032", "T5036"],
			"NISTCRS_approaches": ["NISTA037"],
			"NISTCRS_effects": ["NISTLE005", "NISTLE006", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-CM-7(2)", "NISTC-SC-3(3)"],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0062", "RE0095","RE0070"]
		},
		{
			"ID": "M5023",
			"name": "Maintain Deception Environment",
			"short_description": "Deploy decoy systems or components within AV environments to lure, detect, and analyse attacker activity while keeping critical systems safe.",
			"full_description": "Maintain Deception Environment is a mitigation strategy in autonomous vehicle systems that involves deploying decoy environments, such as honeypots or simulated ECUs—to attract attackers away from real vehicle systems. These environments are configured to appear vulnerable or operational, thereby luring adversaries into interacting with them. The goal is to detect, monitor, and study malicious behaviour in a safe, isolated setup, enabling proactive defence without exposing critical systems to risk. \n In AVs, this strategy is particularly useful due to the growing complexity and connectivity of vehicle components, which expose multiple external attack surfaces (e.g., OBD-II, OTA, telematics, and infotainment). Honeypot ECUs or simulated subsystems can imitate common services (such as diagnostics or CAN communication) to engage attackers and collect data about intrusion attempts. This provides valuable insight into adversary techniques and allows for real-time alerts or post-incident forensics. \n Without this mitigation, attackers may probe real systems directly, increasing the likelihood of compromise, lateral movement, or safety-critical manipulation. Maintain Deception Environment thus provides a proactive, low-risk opportunity to gain intelligence on threats while protecting the integrity of the actual vehicle network.",
			"example": [
                {
                    "reference ID": "RE0117",
                    "description": "This paper introduces HoneyCar, a honeypot framework that emulates vulnerable in-vehicle services and ECUs. It is designed to attract attackers into a controlled environment for detection and analysis without exposing real systems."
                },
                {
                    "reference ID": "RE0118",
                    "description": "This thesis supports Maintain Deception Environment by implementing a CAN honeypot that simulates ECU behaviours and records attacker activity. The honeypot captures attack methods in a safe, isolated system and allows automotive cybersecurity research without endangering actual vehicle functions."
                }
            ],
            "techniques": ["T5041", "T5076", "T5054", "T5069", "T5020", "T5024", "T5020"],
			"NISTCRS_approaches": ["NISTA004", "NISTA006", "NISTA016", "NISTA015","NISTA044"],
			"NISTCRS_effects": ["NISTLE013", "NISTLE003", "NISTLE002", "NISTLE006", "NISTLE007"],
			"NISTCRS_controls": ["NISTC-SC-26", "NISTC-SC-7(21)", "NISTC-SC-30(4)"],
			"nist_map": [
				{"approach_id": "NISTA004", "control_ids": ["NISTC-SC-26"]},
				{"approach_id": "NISTA006", "control_ids": ["NISTC-SC-26"]},
				{"approach_id": "NISTA015", "control_ids": ["NISTC-SC-30(4)"]},
				{"approach_id": "NISTA016", "control_ids": ["NISTC-SC-26"]},
				{"approach_id": "NISTA044", "control_ids": ["NISTC-SC-7(21)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0117", "RE0118"]
		},		
		{
			"ID": "M5025",
			"name": "Minimize Data Retention or Lifespan",
			"short_description": "Reduce how long sensitive data is stored in AV systems, and ensure deleted data cannot be recovered through secure deletion or temporary storage mechanisms.",
			"full_description": "Minimize Data Retention or Lifespan is a mitigation strategy that limits the duration sensitive data remains stored in autonomous vehicle (AV) systems and ensures that once deleted, the data is irrecoverable. This includes techniques such as ephemeral storage (temporary buffers cleared after use), log rotation with strict retention policies, and cryptographic key zeroisation to make encrypted data permanently inaccessible. \n These practices reduce the risk of data leakage, particularly for systems handling personal data, navigation logs, or classified information. \n The mitigation is especially relevant in military, emergency response, and privacy-sensitive applications, where long-term storage of mission data or sensor recordings may increase risk if compromised.",
			"example": [
				{
					"reference ID": "RE0002",
					"description": "Proposes cryptographic key zeroisation and emergency data wipe mechanisms to ensure sensitive data cannot be recovered from unmanned systems. These methods enforce short data retention and secure deletion in military AVs, especially under compromise or mission termination scenarios."
				}
			],
			"techniques": ["T5011", "T5080", "T5068", "T5067", "T5070", "T5052", "T5056", "T5078"],
			"NISTCRS_approaches": ["NISTA029", "NISTA049"],
			"NISTCRS_effects": ["NISTLE009", "NISTLE005", "NISTLE010", "NISTLE004","NISTLE011"],
			"NISTCRS_controls": ["NISTC-SC-23(3)", "NISTC-SI-14(2)", "NISTC-SI-21"],
			"nist_map": [
				{"approach_id": "NISTA029", "control_ids": ["NISTC-SC-23(3)", "NISTC-SI-14(2)", "NISTC-SI-21"]},
				{"approach_id": "NISTA049", "control_ids": ["NISTC-SC-23(3)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0002"]
		},
		{
			"ID": "M5026",
			"name": "Minimize Duration of Connection or Session",
			"short_description": "Limit the duration of diagnostic or remote communication sessions to reduce exposure time and force reauthentication, minimising the risk of persistent exploitation",
			"full_description": "Minimize Duration of Connection or Session is a mitigation strategy that limits how long communication sessions remain open in autonomous vehicles. This is especially important in contexts such as UDS diagnostic access or telematics communications, where long-lived or idle sessions can be exploited by adversaries. \n  By enforcing timeouts, automatic session termination, or reauthentication requirements, AV systems reduce the window of opportunity for persistent attacks, such as unauthorised ECU access or remote control. This approach is critical for preventing abuse of extended sessions and stale connections in both development and operational environments, particularly for constrained ECUs that may lack sophisticated intrusion detection capabilities.",
			"example": [
				{
					"reference ID": "RE0072",
					"description": "Recommends enforcing session timeout in UDS diagnostic access to prevent persistent sessions that adversaries can exploit. It highlights that session expiration and reauthentication are essential to protect constrained ECUs from prolonged unauthorised access."
				},
				{
					"reference ID": "RE0092",
					"description": "Analyses remote attack kill chains involving prolonged diagnostic or telematic access, and emphasises that failure to close sessions can allow attackers to escalate privileges or maintain foothold. Suggests that limiting session duration could reduce attacker opportunity."
				}			
			],			
			"techniques": ["T5024", "T5007", "T5011", "T5050", "T5070","T5067", "T5025", "T5060"],
			"NISTCRS_approaches": ["NISTA030","NISTA031"],
			"NISTCRS_effects": ["NISTLE005", "NISTLE011", "NISTLE004", "NISTLE010", "NISTLE009"],
			"NISTCRS_controls": ["NISTC-SC-10", "NISTC-SI-14(3)", "NISTC-AC-12", "NISTC-SC-7(10)"],
			"nist_map": [
				{"approach_id": "NISTA030", "control_ids": ["NISTC-AC-12"]},
				{"approach_id": "NISTA031", "control_ids": ["NISTC-SI-14(3)", "NISTC-SC-10", "NISTC-SC-7(10)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0072", "RE0092"]
		},
		{
			"ID": "M5027",
			"name": "Minimize Wireless Signal Propagation",
			"short_description": "Minimise unnecessary RF exposure and signal leakage in autonomous vehicle systems to prevent adversaries from exploiting over-propagated wireless communications.",
			"full_description": "Minimize Wireless Signal Propagation is a mitigation strategy applied in autonomous vehicle environments to reduce the security risks associated with excessive wireless signal reach. Wireless signals, such as those from keyless entry systems, telematics units, or V2X communications, may propagate beyond the physical boundaries of the vehicle, exposing them to external adversaries. In the context of AVs, this mitigation involves techniques such as adjusting signal strength, using shielding, implementing proximity verification (e.g., distance bounding), or applying communication obfuscation methods that change based on how vehicles move and connect over time.\n If this mitigation is not applied, attackers may exploit leaked wireless signals to perform relay attacks, signal injection, or eavesdropping. For example, keyless entry systems that emit strong LF signals may allow adversaries to relay signals over tens of meters and unlock vehicles remotely. Applying this mitigation limits adversary access to RF signals, thereby improving confidentiality and reducing the attack surface in wireless communication scenarios within AVs.",
			"example": [
                {
                    "reference ID": "RE0119",
                    "description": "This paper demonstrates how excessive wireless signal propagation in Passive Keyless Entry and Start (PKES) systems enables relay attacks. The car’s low-frequency signals unintentionally propagate far beyond the intended proximity range, allowing adversaries to relay the signal and gain unauthorised access. The study recommends limiting signal propagation or applying distance bounding protocols to ensure signal containment and proximity validation."
                },
                {
                    "reference ID": "RE0120",
                    "description": "This paper proposes a Moving Target Defense (MTD) that changes the wireless communication paths based on the movement of vehicles over time to prevent interception. Rather than reducing physical signal range, it minimises the risk caused by signal propagation by dynamically diversifying relay paths between vehicles. This runtime path confusion makes it harder for adversaries to track or exploit propagated signals, supporting the objective of reducing effective RF exposure risk."
                }
            ],
            "techniques": ["T5007", "T5077"],
			"NISTCRS_approaches": ["NISTA014"],
			"NISTCRS_effects": ["NISTLE006", "NISTLE008", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-SC-40(2)"],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0119","RE0120"]
		},
		{
			"ID": "M5028",
			"name": "Monitor Log",
			"short_description": "Monitor system and application logs in AV systems to detect anomalies, faults, or attacks.",
			"full_description": "Monitor Log is a mitigation strategy used in autonomous vehicle (AV) environments to detect suspicious or abnormal behaviour in real time. This method involves collecting and analysing logs from onboard systems, sensor data streams, control messages (e.g. CAN), and remote/cloud-based services. In the AV context, monitoring logs helps detect cyber intrusions (such as spoofed messages or command injections), faults in critical components (such as sensor or actuator failures), and system-level anomalies that may compromise safety. Log monitoring supports timely incident response, fault diagnosis, and system recovery. Without this mitigation, anomalies could go undetected, allowing adversaries to persist in the system or faults to escalate without triggering any alerts, ultimately affecting vehicle control and passenger safety.",
			"example": [
                {
                    "reference ID": "RE0065",
                    "description": "J3061 recommends event and audit logging to support anomaly detection, intrusion identification, and validation of system robustness. Logging is advised for both onboard vehicle systems and external cloud-based components, forming a part of the threat detection and response framework."
                },
                {
                    "reference ID": "RE0096",
                    "description": "ENISA highlights that logging of security-related events is essential for identifying system failures or malicious activity. It recommends access control and protection of logs to maintain integrity and prevent tampering or unauthorised disclosure."
                },
                {
                    "reference ID": "RE0059",
                    "description": "This paper presents a monitoring framework that logs and analyses data from vehicle sensors and actuators in real time. This approach enables continuous monitoring and early detection of system issues."
                },
                {
                    "reference ID": "RE0016",
                    "description": "This paper recommends the use of CAN traffic monitoring as a short-term countermeasure against spoofing and injection attacks. By logging and analysing message IDs and data content on the CAN bus, anomalies can be detected and flagged."
                }
            ],
            "techniques": ["T5015", "T5045", "T5006", "T5005", "T5020", "T5056"],
			"NISTCRS_approaches": ["NISTA048", "NISTA004"],
			"NISTCRS_effects": ["NISTLE013"],
			"NISTCRS_controls": ["NISTC-AU-6", "NISTC-IR-4(13)", "NISTC-SI-4(2)", "NISTC-SI-4(11)"],
			"nist_map": [
				{"approach_id": "NISTA004", "control_ids": ["NISTC-AU-6", "NISTC-SI-4(11)", "NISTC-IR-4(13)", "NISTC-SI-4(2)"]},
				{"approach_id": "NISTA048", "control_ids": ["NISTC-AU-6",  "NISTC-SI-4(2)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0065", "RE0096", "RE0059", "RE0016"]
		},
		{
			"ID": "M5029",
			"name": "Moving Target Defence",
			"short_description": "Moving Target Defence dynamically alters system properties in autonomous vehicles to disrupt attacker reconnaissance and exploitation.",
			"full_description": "Moving Target Defence (MTD) in autonomous vehicles is a dynamic security strategy that continuously changes system configurations to prevent attackers from gaining reliable knowledge of the system's structure. In AVs, MTD mitigates attacks such as buffer overflows, code injection, spoofing, and memory corruption by invalidating the attacker's assumptions. \n MTD can be applied in several AV components: \n - In in-vehicle networks, IP shuffling techniques are used to mutate ECU addresses, disrupting attacker ability to target nodes (e.g., SDN-based ECUs). \n - In ECU firmware and application layers, Instruction Set Randomization (ISR) changes the encoding of instructions at runtime to break code injection. \n - Address Space Randomization (ASR) modifies memory layouts to prevent code reuse attacks such as return-oriented programming. \n - Data Space Randomization (DSR) scrambles variable storage in memory to protect against non-control data tampering. \n These techniques are deployed within systems such as partitioned operating systems, real-time schedulers, or SDN-based vehicle networks, enabling secure reconfiguration and attack containment without violating timing constraints or safety requirements. MTD enhances AV resilience by reducing the window of opportunity for successful exploitation and forcing attackers to adapt to constantly shifting targets.",
			"example": [
                {
                    "reference ID": "RE0106",
                    "description": "This paper proposes a multi-agent deep reinforcement learning framework that applies IP address shuffling as a Moving Target Defense strategy in in-vehicle SDN networks, making it harder for attackers to perform reconnaissance or spoof ECUs."
                },
                {
                    "reference ID": "RE0107",
                    "description": "This paper integrates ISR, ASR, and DSR in an ARINC 653-based AV control system to mitigate memory corruption attacks, enabling real-time reconfiguration and resilient control switching during cyber intrusions."
                }
            ],
            "techniques": ["T5023","T5044", "T5043","T5039", "T5024", "T5020", "T5051"],
			"NISTCRS_approaches": ["NISTA001","NISTA002","NISTA014", "NISTA020", "NISTA045"],
			"NISTCRS_effects": ["NISTLE006","NISTLE007","NISTLE008", "NISTLE003"],
			"NISTCRS_controls": ["NISTC-IR-4(2)", "NISTC-AC-4(3)", "NISTC-AU-5(3)", "NISTC-SC-30", "NISTC-SI-16", "NISTC-SC-7(20)"],
			"nist_map": [
				{"approach_id": "NISTA001", "control_ids": ["NISTC-IR-4(2)", "NISTC-AC-4(3)"]},
				{"approach_id": "NISTA002", "control_ids": ["NISTC-AU-5(3)"]},
				{"approach_id": "NISTA014", "control_ids": ["NISTC-SC-30"]},
				{"approach_id": "NISTA020", "control_ids": ["NISTC-SI-16"]},
				{"approach_id": "NISTA045", "control_ids": ["NISTC-SC-7(20)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0106", "RE0107"]
		},
		{
			"ID": "M5030",
			"name": "Network Allowlists",
			"short_description": "Use network allowlists to restrict communication to only pre-approved, trusted sources, preventing unauthorised devices from interacting with critical vehicle components",
			"full_description": "Network Allowlists are used in autonomous vehicles to restrict communication on the internal network by defining exactly which Electronic Control Units, IP addresses, or services are allowed to exchange data. This mitigation is implemented in central gateways, domain controllers, or Ethernet switches, and is crucial for preventing unauthorised components from sending diagnostic commands or injecting malicious traffic into the CAN or automotive Ethernet network.\n In practice, ECUs are identified during manufacturing or initial secure pairing, and their identities are stored in a secure access list. Only messages from verified sources are permitted to reach critical systems, such as the brake or steering controllers. For example, a whitelist-based access control policy that prevents untrusted ECUs from joining Ethernet-based in-vehicle communication, or a threat model restricts UDS diagnostic access by maintaining an identity-based allowlist for ECUs, especially in resource-constrained environments.\n This approach is proactive: it stops attacks such as spoofed diagnostic messages or unauthorised firmware requests before they reach vulnerable components. Unlike reactive firewalls or intrusion detection, allowlists offer deterministic control and are suitable for the real-time and safety-critical nature of AV systems. Regular updates to the allowlist are required when components are replaced or updated, but the principle remains: only explicitly trusted devices are allowed to talk on the network.",
			"example": [
				{
					"reference ID": "RE0072",
					"description": "Thompson recommends using ECU identity validation and secure pairing to create a network allowlist that prevents unauthorised diagnostic sessions over UDS."
				},
				{
					"reference ID": "RE0088",
					"description": "Luo proposes a whitelist-based access control mechanism for in-vehicle Ethernet to prevent untrusted ECUs from participating in network communication."
				}
			],
			"techniques": ["T5019", "T5063", "T5065", "T5066", "T5069", "T5020"],
			"NISTCRS_approaches": ["NISTA047"],
			"NISTCRS_effects": ["NISTLE006", "NISTLE009", "NISTLE008", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-AC-4(17)"],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0072","RE0088"]
		},
		{
			"ID": "M5031",
			"name": "Network Intrusion Prevention",
			"short_description": "Network Intrusion Prevention detects and blocks malicious traffic in autonomous vehicle networks using lightweight IDS modules placed at gateways or ECUs.",
			"full_description": "Network Intrusion Prevention is a critical mitigation strategy in autonomous vehicle (AV) environments aimed at identifying and blocking unauthorised or malicious network activity before it affects critical vehicle systems. Due to the safety constraints in AVs, most solutions focus on detection rather than active prevention, as blocking legitimate traffic may cause functional disruptions. However, modern intrusion detection systems (IDS) are increasingly designed to work alongside fail-safe or alert-triggering modules to support post-detection response. \n In AVs, multiple types of IDS can be deployed: network-based IDS monitors traffic between ECUs (often placed at the gateway), host-based IDS runs on powerful ECUs such as the infotainment or telematic units, and ECU-based IDS runs on constrained controllers like CAN nodes. Anomaly-based detection methods—such as CUSUM, entropy analysis, or time-series profiling—are commonly used due to their ability to detect zero-day attacks with minimal prior data. Signature-based or hybrid systems may also be used when known threats exist. \n Due to computational constraints, IDS in AVs often use lightweight statistical or rule-based methods and are deployed as passive monitoring nodes. Some systems may use voltage fingerprinting to identify the attacker ECU (e.g., Viden), while others use adaptive or dynamic models to reduce false positives. While full prevention is rare, some architectures trigger containment or mode-switching behaviour when an attack is detected, allowing systems to transition into a degraded or emergency state.",
			"example": [
                {
                    "reference ID": "RE0110",
                    "description": "The paper proposes CANtropy, a lightweight network-based IDS that extracts time-series entropy features from CAN traffic to detect anomalies. It uses machine learning classifiers to identify spoofing, replay, and flooding attacks in real time with low overhead, suitable for deployment at ECU or gateway level."
                },
                {
                    "reference ID": "RE0111",
                    "description": "This survey outlines various IDS types (network-based, host-based, ECU-based) and suggests layered deployment in AVs. It highlights how IDSs use statistical or ML-based anomaly detection and are strategically placed at gateways or critical ECUs to monitor traffic without disrupting safety-critical functions."
                },
                {
                    "reference ID": "RE0093",
                    "description": "This work presents an adaptive CUSUM-based anomaly detection system for CAN messages. The method models CAN traffic as a time-series and detects attacks like spoofing and DoS by tracking deviations in message frequency, with low delay and resource requirements for real-time in-vehicle use."
                },
                {
                    "reference ID": "RE0094",
                    "description": "Viden introduces a voltage-based attacker identification system that profiles the physical output of ECUs during message transmission. When combined with IDS alerts, Viden enables forensic attribution of malicious messages by matching voltage signatures to known ECUs."
                },
                {
                    "reference ID": "RE0057",
                    "description": "RoboADS provides an anomaly detection framework for AV sensors and actuators using model-based observers and CUSUM filters. While focused on sensor behaviour, it complements network IDS by ensuring actuator outputs remain within safe bounds after detection of abnormal messages."
                }
            ],
            "techniques": ["T5048","T5017","T5024","T5020","T5069","T5079", "T5049", "T5051", "T5053", "T5075"],
			"NISTCRS_approaches": ["NISTA048","NISTA004","NISTA008"],
			"NISTCRS_effects": ["NISTLE006", "NISTLE007" , "NISTLE013"],
			"NISTCRS_controls": ["NISTC-SI-4(4)", "NISTC-PM-16(1)"],
			"nist_map": [
				{"approach_id": "NISTA008", "control_ids": ["NISTC-PM-16(1)"]},
				{"approach_id": "NISTA004", "control_ids": ["NISTC-SI-4(4)"]},
				{"approach_id": "NISTA048", "control_ids": ["NISTC-SI-4(4)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0093", "RE0094", "RE0057", "RE0111", "RE0110"]
		},
		{
			"ID": "M5032",
			"name": "Network Segmentation",
			"short_description": "Network segmentation isolates critical and non-critical systems in autonomous vehicles to reduce attack surface and limit lateral movement.",
			"full_description": "Network Segmentation is a mitigation strategy applied in autonomous vehicle environments to enhance security, limit attack propagation, and contain damage from compromised components. In AVs, this involves separating high-trust domains (e.g., braking, steering) from low-trust systems (e.g., infotainment or external communication modules) using gateway ECUs, domain controllers, or software-defined routing rules. Segmentation can be implemented across CAN, FlexRay, and Ethernet buses, often managed through configurable gateways or domain-based architectures. This method ensures that even if one subsystem is compromised, adversaries cannot easily traverse to more sensitive vehicle functions, aligning with the principles of isolation and containment.",
			"example": [
                {
                    "reference ID": "RE0108",
                    "description": "This paper proposes an in-car gateway architecture that bridges intra-vehicle and inter-vehicle networks. It segments internal ECUs connected over CAN, FlexRay, LIN, and Ethernet from external wireless communications by using a central gateway, effectively isolating critical in-vehicle systems from external threats."
                },
                {
                    "reference ID": "RE0109",
                    "description": "This paper presents a modular gateway framework that separates vehicle network domains (e.g., CAN, FlexRay, Ethernet) and enables controlled communication through routing rules. The framework supports multiple routing profiles, wake-up flags, and authentication to enforce logical segmentation, acting as a DMZ-like boundary between critical and non-critical ECUs."
                }
            ],  
            "techniques": ["T5015", "T5011", "T5019", "T5029", "T5048", "T5037", "T5076", "T5057","T5063", "T5065", "T5024", "T5051"],
			"NISTCRS_approaches": ["NISTA044"],
			"NISTCRS_effects": ["NISTLE007","NISTLE010","NISTLE009"],
			"NISTCRS_controls": ["NISTC-AC-4(2)", "NISTC-AC-4(21)", "NISTC-SC-3", "NISTC-SC-7", "NISTC-SC-7(21)", "NISTC-SC-7(22)", "NISTC-SC-7(29)"],			
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0108", "RE0109"]
		},
		{
			"ID": "M5033",
            "name": "Operational Information Confidentiality",
			"short_description": "Protect sensitive operational, personal, and configuration data in AV systems through cryptographic and architectural safeguards.",
			"full_description": "Operational Information Confidentiality is a mitigation strategy used to protect sensitive information within autonomous vehicle (AV) systems, including driver data, operational commands, locations, device configurations, and proprietary programs. This mitigation applies by embedding cryptographic protections at multiple levels, such as encrypting data in transit and at rest, using key zeroisation, and applying on-the-fly decryption for ECU memory access. It also includes enforcing strict access control, applying trusted filters for cross-domain communications, and safeguarding cloud and onboard subsystems. In AVs, these measures prevent adversaries from eavesdropping on or manipulating internal communications, accessing proprietary firmware, or exfiltrating operational insights. Without these protections, attackers could intercept sensitive messages, reverse-engineer control systems, or exploit unsecured memory and cloud links to compromise vehicle functions or intellectual property.",
			"example": [
                {
                    "reference ID": "RE0096",
                    "description": "ENISA recommends using cryptographic mechanisms to secure in-vehicle and external communications, enforce strong access controls, protect cloud interactions, and apply on-the-fly decryption in ECUs to preserve confidentiality of sensitive data in AV systems"
                },
                {
                    "reference ID": "RE0112",
                    "description": "This paper proposes code obfuscation and cryptographic authentication over the OBD-II interface to prevent unauthorised access to or reverse engineering of ECU software in autonomous vehicles."
                },
                {
                    "reference ID": "RE0002",
                    "description": "This work presents NSA-approved encryption and key zeroisation for protecting operational data, and introduces Controlled Bypass and Cross Domain Solutions to securely handle classified and unclassified control messages in unmanned systems, applicable to AV communications architectures."
                }
            ],  
            "techniques": ["T5080", "T5056", "T5058"],
			"NISTCRS_approaches": ["NISTA014"],
			"NISTCRS_effects": ["NISTLE010"],
			"NISTCRS_controls": ["NISTC-SC-30"],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0096", "RE0112", "RE0002"]
		},
		{
			"ID": "M5034",
			"name": "Password Policies",
			"short_description": "Enforce strong password policies in autonomous vehicle systems to protect against unauthorised access to internal and external interfaces.",
			"full_description": "Password Policies is a mitigation strategy designed to prevent unauthorised access in autonomous vehicle environments by applying strong authentication practices across all systems and interfaces. In AVs, components such as the telematics units, head units, and cloud-connected APIs may use credentials for internal communication or remote access. Enforcing password policies includes avoiding hardcoded or default credentials, applying password complexity requirements, regularly renewing credentials, and securely managing stored passwords. These practices ensure that both internal subsystems and external service interfaces are protected against brute-force attacks, credential reuse, or backdoor access. Without proper password policies, attackers could exploit weak or reused passwords to gain access to vehicle functions, intercept internal communications, or hijack cloud services, potentially leading to unauthorised command execution, data leaks, or system manipulation.",
			"example": [
                {
                    "reference ID": "RE0011",
                    "description": "This paper highlights the lack of proper password mechanisms in vehicle systems, including the use of hardcoded passwords in head units and APIs. It indirectly supports enforcing strict password policies to prevent unauthorised access to subsystems like the CID and telematics units. The paper also notes that some manufacturers responded by implementing password protections to patch these vulnerabilities."
                },
                {
                    "reference ID": "RE0096",
                    "description": "ENISA recommends avoiding hardcoded passwords, applying password complexity rules, and enforcing secure credential renewal policies to prevent unauthorised access to vehicle systems and APIs, supporting the need for strong password policies across AV components."
                }
            ],  
            "techniques": ["T5016", "T5038", "T5049", "T5053", "T5056"],
			"NISTCRS_approaches": ["NISTA003", "NISTA032"],
			"NISTCRS_effects": ["NISTLE005", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-IA-10", "NISTC-SA-8(15)"],
			"nist_map": [
				{"approach_id": "NISTA003", "control_ids": ["NISTC-IA-10"]},
				{"approach_id": "NISTA032", "control_ids": ["NISTC-SA-8(15)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0096","RE0011"]
		},
		{
			"ID": "M5035",
			"name": "Present Deceptive Information",
			"short_description": "Use misleading or false data to confuse attackers in AV environments, protecting critical assets by degrading adversarial decision-making.",
			"full_description": "Present Deceptive Information is a mitigation strategy for autonomous vehicles that involves injecting or broadcasting intentionally misleading, obfuscated, or false data to confuse or delay attackers. This approach protects critical vehicle systems by preventing adversaries from forming accurate conclusions about system behaviour, structure, or state. In AV environments, this technique can be used at multiple levels—for example, by obfuscating CAN messages to block malware, modifying program logic to resist reverse engineering, or generating fake GPS trajectories to prevent tracking. \n By integrating deceptive messages or misleading signals into real-time systems, the vehicle can disrupt an attacker’s ability to identify, predict, or manipulate key components. Without such deception, attackers could monitor patterns to identify vulnerabilities, launch spoofing attacks, or infer operational logic—ultimately leading to privilege escalation or control of safety-critical systems. This mitigation method plays a proactive role by adding confusion, increasing adversarial uncertainty, and buying time for detection or response mechanisms to activate.",
			"example": [
                {
                    "reference ID": "RE0113",
                    "description": "This study supports Present Deceptive Information by using coordinated pseudonym and VMID changes, along with silent periods, to mislead attackers who rely on continuous message patterns to track vehicles."
                },
                {
                    "reference ID": "RE0114",
                    "description": "This paper supports Present Deceptive Information by using obfuscated control flows and runtime variability to prevent attackers from inferring sensitive logic or program structure through side-channel analysis."
                },
                {
                    "reference ID": "RE0115",
                    "description": "This work supports Present Deceptive Information by encrypting and randomising CAN messages, making them appear meaningless to unauthorised ECUs, thereby confusing and blocking malware that relies on predictable CAN patterns."
                },
                {
                    "reference ID": "RE0116",
                    "description": "This paper supports Present Deceptive Information by generating fake vehicle trajectories that mix with real ones, confusing tracking attempts and protecting location privacy in V2X environments."
                }
            ],
            "techniques": ["T5015","T5008", "T5017", "T5029","T5040", "T5045", "T5080", "T5053"],
			"NISTCRS_approaches": ["NISTA015", "NISTA017"],
			"NISTCRS_effects": ["NISTLE003", "NISTLE013"],
			"NISTCRS_controls": ["NISTC-SC-30(4)", "NISTC-SI-20"],
			"nist_map": [
				{"approach_id": "NISTA015", "control_ids": ["NISTC-SC-30(4)"]},
				{"approach_id": "NISTA017", "control_ids": ["NISTC-SI-20"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0113", "RE0114", "RE0115", "RE0116"]
		},
		{
			"ID": "M5036",
			"name": "Privileged Account Management",
			"short_description": "Implement strict access control over privileged accounts in AV systems to enforce least privilege and prevent unauthorised access to critical functions.",
			"full_description": "Privileged Account Management is a mitigation strategy used to secure autonomous vehicle systems by limiting access to critical components and functions through strict control of privileged accounts. This includes applying role-based access control (RBAC), session authentication, and access control lists to ensure that only authorised users, such as certified maintenance personnel or secure software agents. This can execute sensitive operations like diagnostics, firmware updates, or remote commands. In AV environments, where systems such as infotainment, telematics, and gateways may interface with external networks, enforcing the principle of least privilege helps prevent attackers from escalating access if a component is compromised. Without this mitigation, adversaries could exploit unsecured accounts or default privileges to gain control over safety-critical functions, leading to unauthorised manipulation, data breaches, or system-wide disruption.",
			"example": [
                {
                    "reference ID": "RE0121",
                    "description": "Identifying the lack of access control enforcement and proposing the adoption of strict permission boundaries and least privilege for IVI services and applications."
                },
                {
                    "reference ID": "RE0004",
                    "description": "Demonstrating the consequences of failing to enforce privilege boundaries and backend access restrictions, and recommending strong access control and privilege separation for AV systems."
                },
                {
                    "reference ID": "RE0072",
                    "description": "The principle of least privilege is enforced by requiring authenticated access for critical commands, preventing unauthorised personnel from accessing privileged diagnostic functions."
                },
                {
                    "reference ID": "RE0088",
                    "description": "Introducing a secure gateway with rule-based access control, which restricts access to critical vehicle functions based on predefined security levels and user authentication."
                }
            ],
            "techniques": ["T5015", "T5016", "T5021", "T5029", "T5031", "T5033", "T5036", "T5039", "T5038", "T5046", "T5076", "T5049", "T5053", "T5058"],
			"NISTCRS_approaches": ["NISTA004"],
			"NISTCRS_effects": ["NISTLE001", "NISTLE005",  "NISTLE006", "NISTLE007"],
			"NISTCRS_controls": ["NISTC-AC-6", "NISTC-AC-6(2)", "NISTC-AC-6(5)", "NISTC-AC-6(7)", "NISTC-AC-6(8)", "NISTC-CM-5(5)"],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0121","RE0004","RE0072","RE0088"]
		},
		{
			"ID": "M5037",
			"name": "Redundancy of Service",
			"short_description": "Ensure continued operation of critical vehicle functions by deploying redundant hardware, software, and communication paths.",
			"full_description": "Redundancy of Service refers to designing autonomous vehicle systems with multiple, independent backups to maintain core functionalities even if one component fails. This includes duplicate ECUs, sensors, actuators, power supplies, and communication networks, enabling the system to tolerate failures without interrupting operation. \n This mitigation is proactive, aiming for fail-operational behaviour, where the vehicle continues its task with minimal impact despite faults. For instance, redundant steer-by-wire systems allow uninterrupted steering control even if a control unit or sensor fails. Similarly, duplicated braking or propulsion modules can support safe continued operation after partial failures. \n Redundancy complements Fail-Safe Mechanisms. Whereas fail-safe responses prioritise safe shutdown or transition, redundancy seeks to prevent disruption entirely. Together, they provide layered protection—redundancy minimises the chance of failure affecting the system, and fail-safe mechanisms ensure the system reacts safely when redundancy is insufficient or exhausted.",
			"example": [
				{
					"reference ID": "RE0100",
					"description": "Dual ECUs handling braking even if one fails."
				},
				{
					"reference ID": "RE0098",
					"description": "Redundant sensors and SCUs to maintain steering capability."
				},
				{
					"reference ID": "RE0099",
					"description": "Use of failover computation units or network paths to maintain operation during partial system failure."
				}	 
			],		
			"techniques": ["T5072", "T5081","T5073","T5079", "T5075", "T5078", "T5004"],
			"NISTCRS_approaches": ["NISTA041","NISTA019","NISTA043", "NISTA044","NISTA046","NISTA001", "NISTA003","NISTA012"],
			"NISTCRS_effects": ["NISTLE011","NISTLE012","NISTLE010"],
			"NISTCRS_controls": ["NISTC-CP-2(5)", "NISTC-CP-9", "NISTC-CP-9(6)", "NISTC-CP-11", "NISTC-AC-4(2)", "NISTC-AC-4(8)", "NISTC-IR-4(2)"],
			"nist_map": [
				{"approach_id": "NISTA041", "control_ids": ["NISTC-CP-9"]},
				{"approach_id": "NISTA019", "control_ids": ["NISTC-CP-11"]},
				{"approach_id": "NISTA043", "control_ids": ["NISTC-CP-9(6)"]},
				{"approach_id": "NISTA044", "control_ids": ["NISTC-AC-4(2)"]},
				{"approach_id": "NISTA046", "control_ids": ["NISTC-AC-4(8)"]},
				{"approach_id": "NISTA001", "control_ids": ["NISTC-IR-4(2)", "NISTC-CP-2(5)"]},
				{"approach_id": "NISTA003", "control_ids": ["NISTC-CP-2(5)"]},
				{"approach_id": "NISTA012", "control_ids": ["NISTC-CP-2(5)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": []
		},				
		{
            "ID": "M5039",
            "name": "Secure ECU Design",
            "short_description": "Ensure ECUs are secure by integrating hardware protections, secure bootloaders, and memory safeguards.",
            "full_description": "ECUs in autonomous vehicles are vulnerable to a range of attacks, including firmware tampering via diagnostic interfaces (e.g., OBD-II), physical memory probing, and unauthorised reprogramming. \n Secure ECU Design is a mitigation strategy in autonomous vehicle systems aimed at preventing unauthorised code execution and data tampering within ECUs. This method integrates hardware-based security elements such as Hardware Security Modules (HSM) and Trusted Execution Environments (TEE), as well as secure bootloaders to verify firmware authenticity at startup. It also includes memory protection techniques and runtime decryption to ensure that sensitive code and data are protected both in transit and at rest. These designs harden ECUs against firmware manipulation, physical probing, and unauthorised reprogramming, thereby improving vehicle safety and trustworthiness.",
            "example": [
                {
                    "reference ID": "RE0088",
                    "description": "Implemented a secure gateway using a microcontroller with HSM to support secure ECU communication, key updates, and firmware protection via AES encryption and CMAC authentication."
                },
                {
                    "reference ID": "RE0112",
                    "description": "Proposed on-the-fly decryption and firmware authentication to prevent ECU code tampering via OBD-II interface and physical memory probing, ensuring only authorised firmware executes."
                }  
            ],      
            "techniques": ["T5032", "T5026", "T5036", "T5078"],
            "NISTCRS_approaches": ["NISTA010", "NISTA046", "NISTA047", "NISTA039"],
            "NISTCRS_effects": ["NISTLE001","NISTLE005","NISTLE006","NISTLE009", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-SA-8(3)", "NISTC-CM-14", "NISTC-SR-11", "NISTC-SI-7(9)", "NISTC-SI-7(12)"],
			"nist_map": [
				{"approach_id": "NISTA010", "control_ids": ["NISTC-SA-8(3)"]},
				{"approach_id": "NISTA046", "control_ids": ["NISTC-CM-14", "NISTC-SR-11", "NISTC-SI-7(9)", "NISTC-SI-7(12)"]},
				{"approach_id": "NISTA047", "control_ids": ["NISTC-CM-14", "NISTC-SR-11"]},
				{"approach_id": "NISTA039", "control_ids": ["NISTC-SA-8(3)"]}
			],
            "created": "15/05/2025",
            "modified": "15/05/2025",
            "reference_ID": ["RE0088", "RE0112"]
        },
		{
			"ID": "M5043",
			"name": "Threat Analysis and Risk Assessment",
			"short_description": "Conduct threat analysis and risk assessments to proactively identify vulnerabilities and evaluate mitigation effectiveness throughout the autonomous vehicle lifecycle.",
			"full_description": "Threat Analysis and Risk Assessment (TARA) is a foundational cybersecurity practice in the development and operation of autonomous vehicles (AVs). It involves the structured identification of assets, threats, vulnerabilities, and potential impacts to evaluate system risks and support the design of appropriate security controls. This mitigation must be applied proactively across all phases of the AV lifecycle: concept, development, production, and post-market operations. \n Unlike specific countermeasures (e.g., encryption or isolation), TARA does not directly block attacks but enables stakeholders to understand where, why, and how to apply defences. It supports risk-informed decision-making and helps prioritise protection efforts where they are most needed. TARA methods are often mandated by industry standards and should be periodically updated to reflect evolving attack surfaces and threat intelligence. While critical, it cannot replace operational mitigation techniques and must be integrated with other detection and response capabilities.",
			"example": [
                {
					"reference ID": "RE0064",
					"description": "ISO 26262 enforces structured safety and reliability analysis, which reduces the risk of exploitable faults in vehicle electronics"
				},
				{
					"reference ID": "RE0065",
					"description": "J3061 defines a complete cybersecurity lifecycle including threat identification, TARA, and post-deployment monitoring"
				},
				{
					"reference ID": "RE0102",
					"description": "HEAVENS 2.0 provides a risk matrix framework that uses threat and impact levels to derive Security Levels for AV components."
				},
				{
					"reference ID": "RE0103",
					"description": "SARA introduces an extended STRIDELC threat model with custom risk matrices to assess AV-specific attack likelihood and impact."
				},
				{
					"reference ID": "RE0104",
					"description": "The system dynamics model demonstrates how interconnected technical and human factors contribute to AV cyber risk, enabling scenario-based threat assessments."
				}
            ],
			"techniques": ["T5003", "T5011"],
			"NISTCRS_approaches": ["NISTA004", "NISTA005", "NISTA006", "NISTA008", "NISTA009", "NISTA013"],
			"NISTCRS_effects": ["NISTLE013","NISTLE014", "NISTLE015"],
			"NISTCRS_controls": ["NISTC-SA-11(2)", "NISTC-PM-16", "NISTC-SR-10", "NISTC-RA-9", "NISTC-RA-5(4)", "NISTC-RA-5(10)", "NISTC-PM-31", "NISTC-CA-8"],
			"nist_map": [
				{"approach_id": "NISTA004", "control_ids": ["NISTC-SR-10", "NISTC-RA-5(4)", "NISTC-PM-31"]},
				{"approach_id": "NISTA005", "control_ids": ["NISTC-PM-31"]},
				{"approach_id": "NISTA006", "control_ids": ["NISTC-SR-10"]},
				{"approach_id": "NISTA008", "control_ids": ["NISTC-SA-11(2)", "NISTC-PM-16"]},
				{"approach_id": "NISTA009", "control_ids": ["NISTC-RA-9"]},
				{"approach_id": "NISTA013", "control_ids": ["NISTC-CA-8"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0064", "RE0065", "RE0102", "RE0103", "RE0104"]
		},
		{
			"ID": "M5044",
			"name": "Threat Intelligence Program",
			"short_description": "stablish a Threat Intelligence Program to monitor emerging threats, vulnerabilities, and adversary behaviours affecting autonomous vehicle systems.",
			"full_description": "A Threat Intelligence Program in autonomous vehicle systems involves the continuous collection, analysis, and application of threat data related to in-vehicle networks, ECUs, external communications, and connected infrastructure. This mitigation enables early detection of vulnerabilities, indicators of compromise, and evolving adversary tactics. By integrating this intelligence into security operations, AV manufacturers and operators can proactively adjust firewall rules, update software and firmware, deploy patches, and inform risk assessments. The program typically sources intelligence from industry databases, government advisories, and specialised platforms like automotive threat feeds.",
			"example": [
                {
					"reference ID": "RE0105",
					"description": "Upstream's AutoThreat Intelligence platform aggregates telematics and network data from connected vehicles to detect known and emerging cyber threats. It supports real-time threat detection, vulnerability alerts, and forensic analysis tailored to automotive environments."
				}
            ],
			"techniques": ["T5022", "T5040", "T5047", "T5076"],
			"NISTCRS_approaches": ["NISTA008"],
			"NISTCRS_effects": ["NISTLE015", "NISTLE014", "NISTLE005", "NISTLE006"],
			"NISTCRS_controls": ["NISTC-PM-16", "NISTC-RA-3(3)"],			
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0105"]
		},
		{
			"ID": "M5045",
			"name": "Update Software",
			"short_description": "Regularly update software and firmware to address known vulnerabilities and maintain system security.",
			"full_description": "Update Software refers to the practice of regularly updating the software and firmware on vehicle systems to mitigate known vulnerabilities. These updates ensure that ECUs and other critical components are protected against newly discovered threats and remain compliant with the latest security standards. Software updates can be applied over-the-air (OTA) or during scheduled maintenance to address security patches, feature improvements, or bug fixes.\n This mitigation is particularly important in modern vehicles that rely on complex software for core functions such as braking, steering, and connectivity. Timely updates help prevent exploitation through known vulnerabilities and ensure secure vehicle operation.\n In the context of autonomous vehicles and connected systems, updates may also include operating system upgrades, updated security protocols, or changes in sensor processing logic. Vehicle manufacturers often integrate update mechanisms into their cybersecurity risk management process.\n For example, Tesla’s Free-Fall attack scenario was mitigated by deploying an updated operating system to fix the vulnerabilities exploited by researchers. Standards such as UN Regulation No. 156 mandate a Software Update Management System (SUMS), requiring OEMs to ensure security patches are delivered throughout the vehicle lifecycle. NSA’s best practices also recommend capabilities for secure software updates and monitoring vulnerabilities.\n Compared to other mitigations like Code Signing or Secure OTA, this method directly addresses known issues and provides an operational recovery mechanism.",
			"example": [
                {
					"reference ID": "RE0011",
					"description": "Tesla addressed vulnerabilities found in the Free-Fall attack scenario by updating its OS to a newer version, preventing CAN injection via the infotainment system."
				},
				{
					"reference ID": "RE0078",
					"description": "UN Regulation No. 156 requires that vehicle manufacturers implement a Software Update Management System (SUMS) to ensure vehicles receive timely and secure software updates."
				},
				{
					"reference ID": "RE0095",
					"description": "NSA's Cybersecurity Best Practices recommend maintaining update mechanisms that allow secure and timely software patching for known vulnerabilities across all vehicle components."
				}
            ],
			"techniques": ["T5015", "T5003","T5022", "T5033", "T5036","T5039","T5040", "T5047", "T5076"],
			"NISTCRS_approaches": ["NISTA012"],
			"NISTCRS_effects": ["NISTLE005", "NISTLE006", "NISTLE004", "NISTLE011"],
			"NISTCRS_controls": ["NISTC-SA-8(8)"],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0011", "RE0078", "RE0095"]
		},
		{
			"ID": "M5046",
			"name": "Vulnerability Management",
			"short_description": "Implement a vulnerability management process to detect, assess, and remediate weaknesses in autonomous vehicle systems before they can be exploited.",
			"full_description": "Vulnerability Management in autonomous vehicle environments refers to the continuous process of identifying, analysing, prioritising, and addressing security weaknesses in both software and hardware components. This includes monitoring threat intelligence feeds, performing regular security assessments, managing security patches, and applying countermeasures to reduce risk exposure. \n This strategy is critical throughout the entire lifecycle of the vehicle, from pre-market development to post-market support. It allows manufacturers and operators to stay ahead of evolving threats by proactively addressing known vulnerabilities. Vulnerability Management also supports regulatory compliance and ensures alignment with cybersecurity best practices. \n While it does not prevent unknown zero-days, it significantly reduces the attack surface by ensuring that publicly disclosed vulnerabilities and misconfigurations are promptly mitigated.",
			"example": [
				{
					"reference ID": "RE0011",
					"description": "The Free-Fall Tesla paper demonstrated how outdated software exposed the vehicle to remote attacks, prompting Tesla to patch the vulnerabilities in newer versions."
				},
				{
					"reference ID": "RE0012",
					"description": "The Tesla OTA paper highlighted how multiple vulnerabilities were identified and exploited, leading to improved OTA patching and vulnerability handling mechanisms."
				},
				{
					"reference ID": "RE0013",
					"description": "BMW 0-day research exposed several critical issues that BMW later addressed through systematic vulnerability reporting and patch management."
				},
				{
					"reference ID": "RE0062",
					"description": "UN R155 mandates OEMs to maintain a cybersecurity management system that includes continuous vulnerability monitoring and remediation."
				},
				{
					"reference ID": "RE0095",
					"description": "The NSA best practices recommend regular vulnerability scanning, patching, and monitoring for known issues across vehicle systems."
				}
			],
			"techniques": ["T5015", "T5003","T5022", "T5033", "T5040", "T5047", "T5076"],
			"NISTCRS_approaches": ["NISTA004"],
			"NISTCRS_effects": ["NISTLE005", "NISTLE006", "NISTLE008", "NISTLE011", "NISTLE013"],
			"NISTCRS_controls": ["NISTC-PM-31", "NISTC-RA-5(6)", "NISTC-RA-5(8)", "NISTC-RA-5(10)", "NISTC-SI-3(10)", "NISTC-RA-3(2)", "NISTC-CA-7(5)"],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0011","RE0012","RE0013", "RE0062", "RE0095"]
		},
		{
			"ID": "M5047",
			"name": "Monitoring Physical Access",
			"short_description": "Monitor and log physical access to vehicles and sensitive components to detect unauthorised entry and support incident response.",
			"full_description": "Monitoring physical access helps prevent unauthorised entry into autonomous vehicles or their operational environments. This includes deploying surveillance systems, intrusion detection sensors, and access logs to track attempts to access in-vehicle components such as diagnostic ports or internal ECUs. By combining physical access data with incident response mechanisms, it becomes possible to detect, investigate, and mitigate intrusion attempts that rely on physical contact. \n This mitigation advocate for both general access monitoring and specific system-level monitoring using automated mechanisms where feasible. For AVs and UGVs deployed in remote or unsupervised locations, this measure is critical to maintaining system integrity and preventing the establishment of an attack foothold.",
			"example": [
				{
					"reference ID": "RE0062",
					"description": "UN R155 highlights the importance of monitoring physical access, particularly to backend systems and servers involved in vehicle cybersecurity. This principle can be extended to AV/UGV systems, where physical access to the vehicle itself (e.g., to OBD-II ports, ECUs, exposed wiring) should be similarly monitored using sensors, cameras, and access logging."
				}				
			],
			"techniques": ["T5002", "T5010"],
			"NISTCRS_approaches": ["NISTA004", "NISTA003", "NISTA010"],
			"NISTCRS_effects": ["NISTLE005", "NISTLE006", "NISTLE010"],
			"NISTCRS_controls": ["NISTC-PE-6", "NISTC-PE-6(4)", "NISTC-PE-6(2)"],
			"nist_map": [
				{"approach_id": "NISTA004", "control_ids": ["NISTC-PE-6", "NISTC-PE-6(4)", "NISTC-PE-6(2)"]},
				{"approach_id": "NISTA003", "control_ids": ["NISTC-PE-6(2)"]},
				{"approach_id": "NISTA010", "control_ids": ["NISTC-PE-6(4)"]}
			],
			"created": "15/05/2025",
			"modified": "15/05/2025",
			"reference_ID": ["RE0062"]
		}
	],
	
	"NIST_CRS": {
		"high_level_controls":[
			{
				"id": "NISTC-AC",
				"name": "Access Control",
				"control_ids": ["NISTC-AC-2(6)", "NISTC-AC-2(8)", "NISTC-AC-2(12)", "NISTC-AC-3(2)", "NISTC-AC-3(7)", "NISTC-AC-3(11)", "NISTC-AC-3(12)", "NISTC-AC-3(13)", "NISTC-AC-4(2)", "NISTC-AC-4(3)", "NISTC-AC-4(8)", "NISTC-AC-4(12)", "NISTC-AC-4(17)", "NISTC-AC-4(21)", "NISTC-AC-4(27)", "NISTC-AC-4(29)", "NISTC-AC-4(30)", "NISTC-AC-6", "NISTC-AC-6(1)", "NISTC-AC-6(2)", "NISTC-AC-6(3)", "NISTC-AC-6(4)", "NISTC-AC-6(5)", "NISTC-AC-6(6)", "NISTC-AC-6(7)", "NISTC-AC-6(8)", "NISTC-AC-6(10)", "NISTC-AC-7(4)", "NISTC-AC-12", "NISTC-AC-23"]
			},
			{
				"id": "NISTC-AT",
				"name": "Awareness and Training",
				"control_ids": ["NISTC-AT-2(1)", "NISTC-AT-2(3)", "NISTC-AT-2(5)", "NISTC-AT-3(3)"]
			},
			{
				"id": "NISTC-AU",
				"name": "Audit and Accountability",
				"control_ids": ["NISTC-AU-5(3)", "NISTC-AU-6","NISTC-AU-6(3)","NISTC-AU-6(5)","NISTC-AU-6(6)","NISTC-AU-6(8)","NISTC-AU-6(9)", "NISTC-AU-9(1)","NISTC-AU-9(2)","NISTC-AU-9(3)","NISTC-AU-9(5)","NISTC-AU-9(6)","NISTC-AU-9(7)", "NISTC-AU-10(2)","NISTC-AU-13", "NISTC-AU-13(3)"]
			},
			{
				"id": "NISTC-CA",
				"name": "Assessment, Authorization, and Monitoring",
				"control_ids": ["NISTC-CA-7(3)","NISTC-CA-7(5)", "NISTC-CA-7(6)", "NISTC-CA-8", "NISTC-CA-8(1)","NISTC-CA-8(2)","NISTC-CA-8(3)"]
			},
			{
				"id": "NISTC-CM",
				"name": "Configuration Management",
				"control_ids": ["NISTC-CM-2(7)", "NISTC-CM-4(1)", "NISTC-CM-5(4)", "NISTC-CM-5(5)", "NISTC-CM-5(6)", "NISTC-CM-7(2)", "NISTC-CM-7(4)", "NISTC-CM-7(5)", "NISTC-CM-7(6)", "NISTC-CM-7(7)", "NISTC-CM-8(3)", "NISTC-CM-14"]
			},
			{
				"id": "NISTC-CM",
				"name": "Contingency Planning",
				"control_ids": ["NISTC-CP-2(1)", "NISTC-CP-2(5)", "NISTC-CP-2(8)", "NISTC-CP-4(5)", "NISTC-CP-8(3)", "NISTC-CP-9", "NISTC-CP-9(1)", "NISTC-CP-9(6)", "NISTC-CP-9(7)", "NISTC-CP-9(8)", "NISTC-CP-11", "NISTC-CP-12", "NISTC-CP-13"]
			},
			{
				"id": "NISTC-IA",
				"name": "Identification and Authentication",
				"control_ids": ["NISTC-IA-2(6)","NISTC-IA-2(13)", "NISTC-IA-3(1)", "NISTC-IA-10"]
			},
			{
				"id": "NISTC-IR",
				"name": "Incident Response",
				"control_ids": ["NISTC-IR-4(2)", "NISTC-IR-4(3)", "NISTC-IR-4(4)", "NISTC-IR-4(9)", "NISTC-IR-4(10)", "NISTC-IR-4(11)","NISTC-IR-4(12)", "NISTC-IR-4(13)", "NISTC-IR-5"]
			},
			{
				"id": "NISTC-MA",
				"name": "Maintenance",
				"control_ids": ["NISTC-MA-4(4)"]
			},
			{
				"id": "NISTC-PE",
				"name": "Physical and Environmental Protection",
				"control_ids": ["NISTC-PE-3(5)", "NISTC-PE-6", "NISTC-PE-6(2)", "NISTC-PE-6(4)", "NISTC-PE-9(1)", "NISTC-PE-11(1)", "NISTC-PE-11(2)", "NISTC-PE-17"]
			},
			{
				"id": "NISTC-PL",
				"name": "Planning",
				"control_ids": ["NISTC-PL-8(1)", "NISTC-PL-8(2)"]
			},
			{
				"id": "NISTC-PM",
				"name": "Program Management",
				"control_ids": ["NISTC-PM-7(1)", "NISTC-PM-16", "NISTC-PM-16(1)", "NISTC-PM-30(1)", "NISTC-PM-31", "NISTC-PM-32"]
			},
			{
				"id": "NISTC-RA",
				"name": "Risk Assessment",
				"control_ids": ["NISTC-RA-3(2)", "NISTC-RA-3(3)", "NISTC-RA-3(4)", "NISTC-RA-5(4)", "NISTC-RA-5(5)", "NISTC-RA-5(6)", "NISTC-RA-5(8)", "NISTC-RA-5(10)", "NISTC-RA-9", "NISTC-RA-10"]
			},
			{
				"id": "NISTC-SA",
				"name": "System and Services Acquisition",
				"control_ids": ["NISTC-SA-3(2)", "NISTC-SA-8(2)", "NISTC-SA-8(3)", "NISTC-SA-8(4)", "NISTC-SA-8(6)", "NISTC-SA-8(7)", "NISTC-SA-8(8)", "NISTC-SA-8(13)", "NISTC-SA-8(15)", "NISTC-SA-8(16)", "NISTC-SA-8(17)", "NISTC-SA-8(18)", "NISTC-SA-8(19)", "NISTC-SA-8(31)", "NISTC-SA-9(7)", "NISTC-SA-11(2)", "NISTC-SA-11(5)", "NISTC-SA-11(6)", "NISTC-SA-15(5)", "NISTC-SA-17(6)", "NISTC-SA-17(8)", "NISTC-SA-17(9)", "NISTC-SA-20", "NISTC-SA-23"]
			},
			{
				"id": "NISTC-SC",
				"name": "System and Communications Protection",
				"control_ids": ["NISTC-SC-2", "NISTC-SC-2(1)", "NISTC-SC-3", "NISTC-SC-3(1)", "NISTC-SC-3(2)", "NISTC-SC-3(3)", "NISTC-SC-3(5)", "NISTC-SC-5(2)", "NISTC-SC-5(3)", "NISTC-SC-7", "NISTC-SC-7(10)", "NISTC-SC-7(11)", "NISTC-SC-7(13)", "NISTC-SC-7(15)", "NISTC-SC-7(16)", "NISTC-SC-7(20)", "NISTC-SC-7(21)", "NISTC-SC-7(22)", "NISTC-SC-7(29)", "NISTC-SC-8(1)", "NISTC-SC-8(4)", "NISTC-SC-8(5)", "NISTC-SC-10", "NISTC-SC-11", "NISTC-SC-15(1)", "NISTC-SC-16(1)", "NISTC-SC-16(3)", "NISTC-SC-18(5)", "NISTC-SC-22", "NISTC-SC-23(3)", "NISTC-SC-25", "NISTC-SC-26", "NISTC-SC-27", "NISTC-SC-28(1)", "NISTC-SC-29", "NISTC-SC-29(1)", "NISTC-SC-30", "NISTC-SC-30(2)", "NISTC-SC-30(3)", "NISTC-SC-30(4)", "NISTC-SC-30(5)", "NISTC-SC-32", "NISTC-SC-32(1)", "NISTC-SC-34", "NISTC-SC-34(1)", "NISTC-SC-34(2)", "NISTC-SC-35", "NISTC-SC-36", "NISTC-SC-36(1)", "NISTC-SC-36(2)", "NISTC-SC-37", "NISTC-SC-39", "NISTC-SC-39(1)", "NISTC-SC-39(2)", "NISTC-SC-40(2)", "NISTC-SC-40(3)", "NISTC-SC-44", "NISTC-SC-46", "NISTC-SC-47", "NISTC-SC-48", "NISTC-SC-48(1)", "NISTC-SC-49", "NISTC-SC-50", "NISTC-SC-51"]
			},
			{
				"id": "NISTC-SI",
				"name": "System and Information Integrity",
				"control_ids": ["NISTC-SI-3(10)", "NISTC-SI-4(1)", "NISTC-SI-4(2)", "NISTC-SI-4(3)", "NISTC-SI-4(4)", "NISTC-SI-4(7)", "NISTC-SI-4(10)", "NISTC-SI-4(11)", "NISTC-SI-4(13)", "NISTC-SI-4(16)", "NISTC-SI-4(17)", "NISTC-SI-4(18)", "NISTC-SI-4(24)", "NISTC-SI-4(25)", "NISTC-SI-6", "NISTC-SI-7", "NISTC-SI-7(1)", "NISTC-SI-7(5)", "NISTC-SI-7(6)", "NISTC-SI-7(7)", "NISTC-SI-7(9)", "NISTC-SI-7(10)", "NISTC-SI-7(12)", "NISTC-SI-7(15)", "NISTC-SI-10(3)", "NISTC-SI-10(5)", "NISTC-SI-14", "NISTC-SI-14(1)", "NISTC-SI-14(2)", "NISTC-SI-14(3)", "NISTC-SI-15", "NISTC-SI-16", "NISTC-SI-19(4)", "NISTC-SI-19(6)", "NISTC-SI-19(8)", "NISTC-SI-20", "NISTC-SI-21", "NISTC-SI-22", "NISTC-SI-23"]
			},
			{
				"id": "NISTC-SR",
				"name": "Supply Chain Risk Management",
				"control_ids": ["NISTC-SR-3(1)", "NISTC-SR-3(2)", "NISTC-SR-4", "NISTC-SR-4(1)", "NISTC-SR-4(2)", "NISTC-SR-4(3)", "NISTC-SR-4(4)", "NISTC-SR-5", "NISTC-SR-5(1)", "NISTC-SR-6(1)", "NISTC-SR-7", "NISTC-SR-9", "NISTC-SR-9(1)", "NISTC-SR-10", "NISTC-SR-11", "NISTC-SR-11(3)"]
			}
		],
		"low_level_controls": [
			{
				"id": "NISTC-AC-2(6)",
				"name": "ACCOUNT MANAGEMENT | DYNAMIC PRIVILEGE MANAGEMENT",
				"ugv_discussion": "Dynamic privilege management in UGV/AV systems means adjusting access rights in real time, depending on roles, current tasks, or operating conditions. This can include revoking access immediately or increasing privileges only when required, such as during remote diagnostics or emergency takeovers. It helps limit exposure by ensuring only authorised actions can happen at the right time. This control is suitable for UGV/AV environments, especially in systems with remote access or role-based features. It is a recommended approach, but not yet commonly seen in current commercial implementations.",
				"definition": "Implement [organization-defined dynamic privilege management capabilities",
				"discussion": "In contrast to access control approaches that employ static accounts and predefined user privileges, dynamic access control approaches rely on runtime access control decisions facilitated by dynamic privilege management, such as attribute-based access control. While user identities remain relatively constant over time, user privileges typically change more frequently based on ongoing mission or business requirements and the operational needs of organizations. An example of dynamic privilege management is the immediate revocation of privileges from users as opposed to requiring that users terminate and restart their sessions to reflect changes in privileges. Dynamic privilege management can also include mechanisms that change user privileges based on dynamic rules as opposed to editing specific user profiles. Examples include automatic adjustments of user privileges if they are operating out of their normal work times, if their job function or assignment changes, or if systems are under duress or in emergency situations. Dynamic privilege management includes the effects of privilege changes, for example, when there are changes to encryption keys used for communications.",
				"techniques_id": ["NISTT009", "NISTT001"],
				"approaches_id": ["NISTA034", "NISTA001"]
			},
			{
				"id": "NISTC-AC-2(8)",
				"name": "ACCOUNT MANAGEMENT | DYNAMIC ACCOUNT MANAGEMENT",
				"ugv_discussion": "Dynamic account management in UGV/AV systems means creating and deactivating user or service accounts automatically during runtime. In UGVs, this control is applicable for systems that require temporary access permissions, such as during secure OTA updates or emergency service operations. However, this concept is not widely seen in commercial UGVs/AVs.",
				"definition": "Create, activate, manage, and deactivate [Assignment: organization-defined system accounts] dynamically",
				"discussion": "Approaches for dynamically creating, activating, managing, and deactivating system accounts rely on automatically provisioning the accounts at runtime for entities that were previously unknown. Organizations plan for the dynamic management, creation, activation, and deactivation of system accounts by establishing trust relationships, business rules, and mechanisms with appropriate authorities to validate related authorizations and privileges.",
				"techniques_id": ["NISTT001", "NISTT009"],
				"approaches_id": ["NISTA001","NISTA002","NISTA003","NISTA034"]
			},
			{
				"id": "NISTC-AC-2(12)",
				"name": "ACCOUNT MANAGEMENT | ACCOUNT MONITORING FOR ATYPICAL USAGE",
				"ugv_discussion": "This control involves detecting unusual use of system accounts, such as accessing the system from unexpected locations or times, and alerting the system operators. For UGVs, especially those in fleet operations or remote monitoring scenarios, tracking abnormal behaviour could help detect compromise or misuse. Current research mentions anomaly detection for AV behaviour, but account-level detection is not yet widely deloyed.",
				"definition": "(a) Monitor system accounts for [Assignment: organization-defined atypical usage]; and \n (b) Report atypical usage of system accounts to [Assignment: organization-defined personnel or roles]",
				"discussion": "Atypical usage includes accessing systems at certain times of the day or from locations that are not consistent with the normal usage patterns of individuals. Monitoring for atypical usage may reveal rogue behavior by individuals or an attack in progress. Account monitoring may inadvertently create privacy risks since data collected to identify atypical usage may reveal previously unknown information about the behavior of individuals. Organizations assess and document privacy risks from monitoring accounts for atypical usage in their privacy impact assessment and make determinations that are in alignment with their privacy program plan.",
				"techniques_id": ["NISTT002","NISTT013"],
				"approaches_id": ["NISTA004","NISTA048"]
			},
			{
				"id": "NISTC-AC-3(2)",
				"name": "ACCESS ENFORCEMENT | DUAL AUTHORIZATION",
				"ugv_discussion": "Dual authorization in UGV systems means requiring two separate approvals before performing critical actions, such as firmware updates or mission overrides. This control enhances protection against insider threats and accidental misuse. It is more applicable to military or industrial UGVs where safety-critical functions require strict controls.",
				"definition": "Enforce dual authorization for [Assignment: organization-defined privileged commands and/or other organization-defined actions].",
				"discussion": "Dual authorization, also known as two-person control, reduces risk related to insider threats. Dual authorization mechanisms require the approval of two authorized individuals to execute. To reduce the risk of collusion, organizations consider rotating dual authorization duties. Organizations consider the risk associated with implementing dual authorization mechanisms when immediate responses are necessary to ensure public and environmental safety",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032"]
			},
			{
				"id": "NISTC-AC-3(7)",
				"name": "ACCESS ENFORCEMENT | ROLE-BASED ACCESS CONTROL",
				"ugv_discussion": "Role-based access control in UGV/AV systems means assigning different access rights depending on roles such as operator, technician, or administrator. It is commonly supported in systems with operating systems like Linux or QNX, which are used in some ECUs. This control is widely applied in both commercial and military UGVs. It is also important for protecting critical functions in military UGVs.", 
				"definition": "Enforce a role-based access control policy over defined subjects and objects and control access based upon [Assignment: organization-defined roles and users authorized to assume such roles]",
				"discussion": "Role-based access control (RBAC) is an access control policy that enforces access to objects and system functions based on the defined role (i.e., job function) of the subject. Organizations can create specific roles based on job functions and the authorizations (i.e., privileges) to perform needed operations on the systems associated with the organization-defined roles. When users are assigned to specific roles, they inherit the authorizations or privileges defined for those roles. RBAC simplifies privilege administration for organizations because privileges are not assigned directly to every user (which can be a large number of individuals) but are instead acquired through role assignments. RBAC can also increase privacy and security risk if individuals assigned to a role are given access to information beyond what they need to support organizational missions or business functions. RBAC can be implemented as a mandatory or discretionary form of access control. For organizations implementing RBAC with mandatory access controls, the requirements in AC-3(3) define the scope of the subjects and objects covered by the policy.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA033"]
			},
			{
				"id": "NISTC-AC-3(11)",
				"name": "ACCESS ENFORCEMENT | RESTRICT ACCESS TO SPECIFIC INFORMATION TYPES",
				"ugv_discussion": "This control limits access to certain sensitive data types in a UGV, such as encryption keys or location history, depending on roles or access needs. In UGV systems, limiting access to such data helps reduce the impact of compromise. This control is suitable and relevant, especially when handling personal or mission-critical information.",
				"definition": "Restrict access to data repositories containing [Assignment: organization-defined information types]",
				"discussion": "Restricting access to specific information is intended to provide flexibility regarding access control of specific information types within a system. For example, role-based access could be employed to allow access to only a specific type of personally identifiable information within a database rather than allowing access to the database in its entirety. Other examples include restricting access to cryptographic keys, authentication information, and selected system information.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA033"]
			},
			{
				"id": "NISTC-AC-3(12)",
				"name": "ACCESS ENFORCEMENT | ASSERT AND ENFORCE APPLICATION ACCESS",
				"ugv_discussion": "This control ensures that applications clearly declare the system access they require and that changes are reviewed and approved. For UGV/AV systems, this is relevant to enforcing which components an application can interact with, such as GPS, camera, or communication modules.",
				"definition": "(a) Require applications to assert, as part of the installation process, the access needed to the following system applications and functions: [Assignment: organization-defined system applications and functions]; (b) Provide an enforcement mechanism to prevent unauthorized access; and (c) Approve access changes after initial installation of the application.",
				"discussion": "Asserting and enforcing application access is intended to address applications that need to access existing system applications and functions, including user contacts, global positioning systems, cameras, keyboards, microphones, networks, phones, or other files.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA033"]
			},
			{
				"id": "NISTC-AC-3(13)",
				"name": "ACCESS ENFORCEMENT | ATTRIBUTE-BASED ACCESS CONTROL",
				"ugv_discussion": "Attribute-based access control in UGV systems grants access based on multiple conditions such as time, user type, location, or system state. This control offers flexible and context-aware access decisions, which is useful in dynamic environments like UGV operations. For example, access may be granted only when the vehicle is stationary or within a trusted zone.",
				"definition": "Enforce attribute-based access control policy over defined subjects and objects and control access based upon [Assignment: organization-defined attributes to assume access permissions].",
				"discussion": "Attribute-based access control is an access control policy that restricts system access to authorized users based on specified organizational attributes (e.g., job function, identity), action attributes (e.g., read, write, delete), environmental attributes (e.g., time of day, location), and resource attributes (e.g., classification of a document). Organizations can create rules based on attributes and the authorizations (i.e., privileges) to perform needed operations on the systems associated with organization-defined attributes and rules. When users are assigned to attributes defined in attribute-based access control policies or rules, they can be provisioned to a system with the appropriate privileges or dynamically granted access to a protected resource. Attribute-based access control can be implemented as either a mandatory or discretionary form of access control. When implemented with mandatory access controls, the requirements in AC-3(3) define the scope of the subjects and objects covered by the policy.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA033"]
			},
			{
				"id": "NISTC-AC-4(2)", 
				"name": "INFORMATION FLOW ENFORCEMENT | PROCESSING DOMAINS",
				"ugv_discussion": "Protected processing domains in UGV systems allow separation between software components that handle different levels of sensitive data or control. These domains can be implemented using domain and type enforcement mechanisms to limit how data moves between applications or OS modules.This control is highly applicable to military UGVs where strict control over mission and classified data is required. This enables isolation between navigation, mission control, and classified data handling subsystems.", 
				"definition": "Use protected processing domains to enforce [Assignment: organization-defined information flow control policies] as a basis for flow control decisions.",
				"discussion": "Protected processing domains within systems are processing spaces that have controlled interactions with other processing spaces, enabling control of information flows between these spaces and to/from information objects. A protected processing domain can be provided, for example, by implementing domain and type enforcement. In domain and type enforcement, system processes are assigned to domains, information is identified by types, and information flows are controlled based on allowed information accesses (i.e., determined by domain and type), allowed signaling among domains, and allowed process transitions to other domains.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-AC-4(3)",
				"name": "INFORMATION FLOW ENFORCEMENT | DYNAMIC INFORMATION FLOW CONTROL",
				"ugv_discussion": "Dynamic flow control in UGVs refers to enforcing information policies that adapt to current mission states or threat levels. For instance, control over telemetry data or sensor feeds may change depending on system risk level or command override. This is critical for military UGVs where mission priorities shift in real-time.", 
				"definition": "Enforce [Assignment: organization-defined information flow control policies].",
				"discussion": "Organizational policies regarding dynamic information flow control include allowing or disallowing information flows based on changing conditions or mission or operational considerations. Changing conditions include changes in risk tolerance due to changes in the immediacy of mission or business needs, changes in the threat environment, and detection of potentially harmful or adverse events.",
				"techniques_id": ["NISTT001"],
				"approaches_id": ["NISTA001", "NISTA003"]
			},
			{
				"id": "NISTC-AC-4(8)",
				"name": "INFORMATION FLOW ENFORCEMENT | SECURITY AND PRIVACY POLICY FILTERS",
				"ugv_discussion": "This control ensures that data passing between components or networks is filtered based on policy rules for format, size, and content. UGV systems can apply these filters to messages sent across internal buses or to external command links. In mission-sensitive UGVs, this filters prevent accidental or malicious leakage of classified data. It can be implemented via data diode logic or firewall modules.", 
				"definition": "(a) Enforce information flow control using [Assignment: organization-defined security or privacy policy filters] as a basis for flow control decisions for [Assignment: organization-defined information flows]; and (b) [Selection (one or more): Block; Strip; Modify; Quarantine] data after a filter processing failure in accordance with [Assignment: organization-defined security or privacy policy].",
				"discussion": "Organization-defined security or privacy policy filters can address data structures and content. For example, security or privacy policy filters for data structures can check for maximum file lengths, maximum field sizes, and data/file types (for structured and unstructured data). Security or privacy policy filters for data content can check for specific words, enumerated values or data value ranges, and hidden content. Structured data permits the interpretation of data content by applications. Unstructured data refers to digital information without a data structure or with a data structure that does not facilitate the development of rule sets to address the impact or classification level of the information conveyed by the data or the flow enforcement decisions. Unstructured data consists of bitmap objects that are inherently non-language-based (i.e., image, video, or audio files) and textual objects that are based on written or printed languages. Organizations can implement more than one security or privacy policy filter to meet information flow control objectives.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-AC-4(12)",
				"name": "INFORMATION FLOW ENFORCEMENT | DATA TYPE IDENTIFIERS",
				"ugv_discussion": "Data type identifiers help validate and enforce correct information flow in UGV systems. Each data stream or file is checked against defined formats to ensure it's recognised and trusted before being processed. This is applicable to secure data ingestion pipelines, such as command, image or map files received from cross-domain systems.", 
				"definition": "When transferring information between different security domains, use [Assignment: organization-defined data type identifiers] to validate data essential for information flow decisions",
				"discussion": "Data type identifiers include filenames, file types, file signatures or tokens, and multiple internal file signatures or tokens. Systems only allow transfer of data that is compliant with data type format specifications. Identification and validation of data types is based on defined specifications associated with each allowed data format. The filename and number alone are not used for data type identification. Content is validated syntactically and semantically against its specification to ensure that it is the proper data type.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-AC-4(17)",
				"name": "INFORMATION FLOW ENFORCEMENT | DOMAIN AUTHENTICATION",
				"ugv_discussion": "Domain authentication ensures that both sender and receiver of information in a UGV system are uniquely verified. This may apply to system processes, network nodes, or communication channels. It also enables secure forensic logging for critical mission data.",
				"definition": "Uniquely identify and authenticate source and destination points by [Selection (one or more): organization; system; application; service; individual] for information transfer.",
				"discussion": "Attribution is a critical component of a security and privacy concept of operations. The ability to identify source and destination points for information flowing within systems allows the forensic reconstruction of events and encourages policy compliance by attributing policy violations to specific organizations or individuals. Successful domain authentication requires that system labels distinguish among systems, organizations, and individuals involved in preparing, sending, receiving, or disseminating information. Attribution also allows organizations to better maintain the lineage of personally identifiable information processing as it flows through systems and can facilitate consent tracking, as well as correction, deletion, or access requests from individuals.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA047"]
			},
			{
				"id": "NISTC-AC-4(21)",
				"name": "INFORMATION FLOW ENFORCEMENT | PHYSICAL OR LOGICAL SEPARATION OF INFORMATION FLOWS",
				"ugv_discussion": "This control enforces that different types of data flow through separated physical or logical channels. In UGV systems, this can mean isolating internal control messages from external communications. It helps prevent the mixing of unclassified and classified data. Military UGVs commonly adopt this via separate CAN buses or VLANs.",
				"definition": "Separate information flows logically or physically using [Assignment: organization-defined mechanisms and/or techniques] to accomplish [Assignment: organization-defined required separations by types of information].",
				"discussion": "Enforcing the separation of information flows associated with defined types of data can enhance protection by ensuring that information is not commingled while in transit and by enabling flow control by transmission paths that are not otherwise achievable. Types of separable information include inbound and outbound communications traffic, service requests and responses, and information of differing security impact or classification levels.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-AC-4(27)",
				"name": "INFORMATION FLOW ENFORCEMENT | REDUNDANT/INDEPENDENT FILTERING MECHANISMS",
				"ugv_discussion": "This control requires multiple, independent filters to inspect the same data. Each uses different mechanisms or codebases to ensure reliability in cross-domain content inspection. This approach prevents single point-of-failure in data sanitisation.  While technically valuable, this approach is rarely documented in current UGV implementations.",
				"definition": "When transferring information between different security domains, implement content filtering solutions that provide redundant and independent filtering mechanisms for each data type.",
				"discussion": "Content filtering is the process of inspecting information as it traverses a cross-domain solution and determines if the information meets a predefined policy. Redundant and independent content filtering eliminates a single point of failure filtering system. Independence is defined as the implementation of a content filter that uses a different code base and supporting libraries (e.g., two JPEG filters using different vendors’ JPEG libraries) and multiple, independent system processes.",
				"techniques_id": ["NISTT006", "NISTT011"],
				"approaches_id": ["NISTA019", "NISTA043"]
			},
			{
				"id": "NISTC-AC-4(29)",
				"name": "INFORMATION FLOW ENFORCEMENT | FILTER ORCHESTRATION ENGINES",
				"ugv_discussion": "Orchestration engines coordinate multiple filtering steps and ensure they execute in proper order. This ensure that all filters applied to outgoing data complete successfully before data leaves the secure boundary. This is particularly valuable for systems with complex data sanitisation. It is suited for regulated UGV deployments where structured audit and policy compliance is mandatory.", 
				"definition": "When transferring information between different security domains, employ content filter orchestration engines to ensure that: (a) Content filtering mechanisms successfully complete execution without errors; and (b) Content filtering actions occur in the correct order and comply with [Assignment: organization-defined policy].",
				"discussion": "Content filtering is the process of inspecting information as it traverses a cross-domain solution and determines if the information meets a predefined security policy. An orchestration engine coordinates the sequencing of activities (manual and automated) in a content filtering process. Errors are defined as either anomalous actions or unexpected termination of the content filter process. This is not the same as a filter failing content due to non-compliance with policy. Content filter reports are a commonly used mechanism to ensure that expected filtering actions are completed successfully.",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA012"]
			},
			{
				"id": "NISTC-AC-4(30)",
				"name": "INFORMATION FLOW ENFORCEMENT | FILTER MECHANISMS USING MULTIPLE PROCESSES",
				"ugv_discussion": "Filtering mechanisms that use multiple system processes increase robustness against failure. Example in UGVs, such mechanisms process telemetry, sensor data, or logs in parallel or staged workflows. However, this method is rarely observed in existing UGV documentation or system designs.", 
				"definition": "When transferring information between different security domains, implement content filtering mechanisms using multiple processes.",
				"discussion": "The use of multiple processes to implement content filtering mechanisms reduces the likelihood of a single point of failure.",
				"techniques_id": ["NISTT006", "NISTT011"],
				"approaches_id": ["NISTA019", "NISTA043"]
			},
			{
				"id": "NISTC-AC-6",
				"name": "LEAST PRIVILEGE",
				"ugv_discussion": "Least privilege in UGVs ensures each component or process operates with only the minimum access rights needed for its role. This includes both software modules and hardware controllers like ECUs. This control is particularly suitable for UGV systems, especially in military applications, where the UGV itself or its environment must enforce privilege boundaries for each process or task.",
				"definition": "Employ the principle of least privilege, allowing only authorized accesses for users (or processes acting on behalf of users) that are necessary to accomplish assigned organizational tasks.",
				"discussion": "Organizations employ least privilege for specific duties and systems. The principle of least privilege is also applied to system processes, ensuring that the processes have access to systems and operate at privilege levels no higher than necessary to accomplish organizational missions or business functions. Organizations consider the creation of additional processes, roles, and accounts as necessary to achieve least privilege. Organizations apply least privilege to the development, implementation, and operation of organizational systems",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032", "NISTA033"]
			},
			{
				"id": "NISTC-AC-6(1)",
				"name": "LEAST PRIVILEGE | AUTHORIZE ACCESS TO SECURITY FUNCTIONS",
				"ugv_discussion": "Access to critical security functions in UGVs should be restricted to predefined roles such as weapon controller, secure boot managers, firmware update handlers, or diagnostic modules. UGVs with hardened ECU layers or gateway controllers can implement this through OS-level privilege enforcement or access control lists. ", 
				"definition": "Authorize access for [Assignment: organization-defined individuals or roles] to: (a) [Assignment: organization-defined security functions (deployed in hardware, software, and firmware)]; and (b) [Assignment: organization-defined security-relevant information].",
				"discussion": "Security functions include establishing system accounts, configuring access authorizations (i.e., permissions, privileges), configuring settings for events to be audited, and establishing intrusion detection parameters. Security-relevant information includes filtering rules for routers or firewalls, configuration parameters for security services, cryptographic key management information, and access control lists. Authorized personnel include security administrators, system administrators, system security officers, system programmers, and other privileged users.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA033"]
			},
			{
				"id": "NISTC-AC-6(2)",
				"name": "LEAST PRIVILEGE | NON-PRIVILEGED ACCESS FOR NONSECURITY FUNCTIONS",
				"ugv_discussion": "UGVs should enforce that tasks unrelated to security are executed using non-privileged roles, even by users with broader system access. This ensures reduced exposure to sensitive configurations during routine operations.", 
				"definition": "Require that users of system accounts (or roles) with access to [Assignment: organization-defined security functions or security-relevant information] use non-privileged accounts or roles, when accessing nonsecurity functions",
				"discussion": "Requiring the use of non-privileged accounts when accessing nonsecurity functions limits exposure when operating from within privileged accounts or roles. The inclusion of roles addresses situations where organizations implement access control policies, such as role-based access control, and where a change of role provides the same degree of assurance in the change of access authorizations for the user and the processes acting on behalf of the user as would be provided by a change between a privileged and non-privileged account",
				"techniques_id": ["NISTT009", "NISTT010"],
				"approaches_id": ["NISTA032","NISTA035"]
			},
			{
				"id": "NISTC-AC-6(3)",
				"name": "LEAST PRIVILEGE | NETWORK ACCESS TO PRIVILEGED COMMANDS",
				"ugv_discussion": "Privileged commands such as weapon control, remote control, firmware flashing or kernel configuration should be disallowed over networks unless justified by mission needs. In UGVs, such remote access should be restricted, logged, and encrypted to reduce risk of unauthorised control or compromise.",
				"definition": "Authorize network access to [Assignment: organization-defined privileged commands] only for [Assignment: organization-defined compelling operational needs] and document the rationale for such access in the security plan for the system",
				"discussion": "Network access is any access across a network connection in lieu of local access (i.e., user being physically present at the device)",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032"]
			},
			{
				"id": "NISTC-AC-6(4)",
				"name": "LEAST PRIVILEGE | SEPARATE PROCESSING DOMAINS",
				"ugv_discussion": "Separate processing domains can be established using virtualization, containers, or hardware segmentation in UGVs. This enables finer privilege allocation across subsystems like mission control, communication, and sensor processing.",
				"definition": "Provide separate processing domains to enable finer-grained allocation of user privileges.",
				"discussion": "Providing separate processing domains for finer-grained allocation of user privileges includes using virtualization techniques to permit additional user privileges within a virtual machine while restricting privileges to other virtual machines or to the underlying physical machine, implementing separate physical domains, and employing hardware or software domain separation mechanisms.",
				"techniques_id": ["NISTT009", "NISTT012"],
				"approaches_id": ["NISTA032","NISTA033","NISTA044"]
			},
			{
				"id": "NISTC-AC-6(5)",
				"name": "LEAST PRIVILEGE | PRIVILEGED ACCOUNTS",
				"ugv_discussion": "Privileged accounts in UGVs, such as root or superuser roles in ECUs, must be tightly controlled and mapped to authorised personnel. Systems should maintain strict separation between standard operation and administrative access, including remote control units or diagnostic interfaces.",
				"definition": "Restrict privileged accounts on the system to [Assignment: organization-defined personnel or roles]",
				"discussion": "Privileged accounts, including super user accounts, are typically described as system administrator for various types of commercial off-the-shelf operating systems. Restricting privileged accounts to specific personnel or roles prevents day-to-day users from accessing privileged information or privileged functions. Organizations may differentiate in the application of restricting privileged accounts between allowed privileges for local accounts and for domain accounts provided that they retain the ability to control system configurations for key parameters and as otherwise necessary to sufficiently mitigate risk.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032"]
			},
			{
				"id": "NISTC-AC-6(6)",
				"name": "LEAST PRIVILEGE | PRIVILEGED ACCESS BY NON-ORGANIZATIONAL USERS",
				"ugv_discussion": "Privileged access in UGVs should be limited strictly to trusted users under organisational control, such as trained military operators or certified technicians.",
				"definition": "Prohibit privileged access to the system by non-organizational users.",
				"discussion": "An organizational user is an employee or an individual considered by the organization to have the equivalent status of an employee. Organizational users include contractors, guest researchers, or individuals detailed from other organizations. A non-organizational user is a user who is not an organizational user. Policies and procedures for granting equivalent status of employees to individuals include a need-to-know, citizenship, and the relationship to the organization.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032"]
			},
			{
				"id": "NISTC-AC-6(7)",
				"name": "LEAST PRIVILEGE | REVIEW OF USER PRIVILEGES",
				"ugv_discussion": "UGV systems should implement periodic reviews of roles and privileges, especially for users accessing onboard or remote-control systems. Privilege reassessment helps maintain operational integrity and supports mission adaptability under changing conditions or personnel rotations.",
				"definition": "(a) Review [Assignment: organization-defined frequency] the privileges assigned to [Assignment: organization-defined roles or classes of users] to validate the need for such privileges; and (b) Reassign or remove privileges, if necessary, to correctly reflect organizational mission and business needs.",
				"discussion": "The need for certain assigned user privileges may change over time to reflect changes in organizational mission and business functions, environments of operation, technologies, or threats. A periodic review of assigned user privileges is necessary to determine if the rationale for assigning such privileges remains valid. If the need cannot be revalidated, organizations take appropriate corrective actions.",
				"techniques_id": ["NISTT004", "NISTT009"],
				"approaches_id": ["NISTA011", "NISTA032"]
			},
			{
				"id": "NISTC-AC-6(8)",
				"name": "LEAST PRIVILEGE | PRIVILEGE LEVELS FOR CODE EXECUTION",
				"ugv_discussion": "UGV software must ensure that code executes only at the necessary privilege level. System-level actions or updates should be signed and confined using execution policies.",
				"definition": "Prevent the following software from executing at higher privilege levels than users executing the software: [Assignment: organization-defined software].",
				"discussion": "In certain situations, software applications or programs need to execute with elevated privileges to perform required functions. However, depending on the software functionality and configuration, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking such applications or programs, those users may indirectly be provided with greater privileges than assigned.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA033", "NISTA034"]
			},
			{
				"id": "NISTC-AC-6(10)",
				"name": "LEAST PRIVILEGE | PROHIBIT NON-PRIVILEGED USERS FROM EXECUTING PRIVILEGED FUNCTIONS",
				"ugv_discussion": "Non-privileged users in UGV systems must not be allowed to perform actions such as turning on the system, controlling the UGV via remoting system, disabling firewalls, modifying audit settings, or managing cryptographic keys. This is enforced using RBAC or MAC models at the OS and firmware level.",
				"definition": "Prevent non-privileged users from executing privileged functions",
				"discussion": "Privileged functions include disabling, circumventing, or altering implemented security or privacy controls, establishing system accounts, performing system integrity checks, and administering cryptographic key management activities. Non-privileged users are individuals who do not possess appropriate authorizations. Privileged functions that require protection from non-privileged users include circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms. Preventing non-privileged users from executing privileged functions is enforced by AC-3.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032","NISTA033"]
			},
			{
				"id": "NISTC-AC-7(4)",
				"name": "UNSUCCESSFUL LOGON ATTEMPTS | USE OF ALTERNATE AUTHENTICATION FACTOR",
				"ugv_discussion": "UGV systems may implement backup authentication methods to preserve availability during mission-critical operations. This includes fallback options like biometric or hardware tokens if the primary method fails. Backup login methods help operators regain access after too many failed attempts, keeping operations running smoothly. However, these systems must be carefully designed to balance ease of use with security, as backup methods could potentially be less secure.", 
				"definition": "(a) Allow the use of [Assignment: organization-defined authentication factors] that are different from the primary authentication factors after the number of organization-defined consecutive invalid logon attempts have been exceeded; and (b) Enforce a limit of [Assignment: organization-defined number] consecutive invalid logon attempts through use of the alternative factors by a user during a [Assignment: organization-defined time period].",
				"discussion": "The use of alternate authentication factors supports the objective of availability and allows a user who has inadvertently been locked out to use additional authentication factors to bypass the lockout.",
				"techniques_id": ["NISTT006"],
				"approaches_id": ["NISTA022"]
			},
			{
				"id": "NISTC-AC-12",
				"name": "SESSION TERMINATION",
				"ugv_discussion": "Automatic session termination reduces risks when vehicle control interfaces are left unattended. This works for both remote control stations and onboard terminals. For UGVs, triggers such as idle timeouts or disconnection from a secure control station can be used to force session termination.", 
				"definition": "Automatically terminate a user session after [Assignment: organization-defined conditions or trigger events requiring session disconnect].",
				"discussion": "Session termination addresses the termination of user-initiated logical sessions (in contrast to SC-10, which addresses the termination of network connections associated with communications sessions (i.e., network disconnect)). A logical session (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a user) accesses an organizational system. Such user sessions can be terminated without terminating network sessions. Session termination ends all processes associated with a user’s logical session except for those processes that are specifically created by the user (i.e., session owner) to continue after the session is terminated. Conditions or trigger events that require automatic termination of the session include organization-defined periods of user inactivity, targeted responses to certain types of incidents, or time-of-day restrictions on system use.",
				"techniques_id": ["NISTT008"],
				"approaches_id": ["NISTA030"]
			},
			{
				"id": "NISTC-AC-23",
				"name": "DATA MINING PROTECTION",
				"ugv_discussion": "Data mining protection in UGV systems is possible where sensitive operational data is stored or logged. This may includes detection of abnormal queries, rate limiting, and content masking to prevent interference. This control is not widely implemented in current platforms, but are recommended in systems with large telemetry, sensor, or mission logs.", 
				"definition": "Employ [Assignment: organization-defined data mining prevention and detection techniques] for [Assignment: organization-defined data storage objects] to detect and protect against unauthorized data mining.",
				"discussion": "Data mining is an analytical process that attempts to find correlations or patterns in large data sets for the purpose of data or knowledge discovery. Data storage objects include database records and database fields. Sensitive information can be extracted from data mining operations. When information is personally identifiable information, it may lead to unanticipated revelations about individuals and give rise to privacy risks. Prior to performing data mining activities, organizations determine whether such activities are authorized. Organizations may be subject to applicable laws, executive orders, directives, regulations, or policies that address data mining requirements. Organizational personnel consult with the senior agency official for privacy and legal counsel regarding such requirements. \n Data mining prevention and detection techniques include limiting the number and frequency of database queries to increase the work factor needed to determine the contents of databases, limiting types of responses provided to database queries, applying differential privacy techniques or homomorphic encryption, and notifying personnel when atypical database queries or accesses occur. Data mining protection focuses on protecting information from data mining while such information resides in organizational data stores. In contrast, AU-13 focuses on monitoring for organizational information that may have been mined or otherwise obtained from data stores and is available as open-source information residing on external sites, such as social networking or social media websites.",
				"techniques_id": ["NISTT002","NISTT009"],
				"approaches_id": ["NISTA004", "NISTA032","NISTA033","NISTA034"]
			},
			{
				"id": "NISTC-AT-2(1)",
				"name": "AWARENESS TRAINING | PRACTICAL EXERCISES ",
				"ugv_discussion": "Practical cyber training in UGV scenarios help operators and maintainers prepare for real-world threats. Exercises may simulate phishing attempts during remote access, unauthorised USB device use during field maintenance, or spoofed diagnostics in a testbed.",
				"definition": "Provide practical exercises in literacy training that simulate events and incidents.",
				"discussion": "Practical exercises include no-notice social engineering attempts to collect information, gain unauthorized access, or simulate the adverse impact of opening malicious email attachments or invoking, via spear phishing attacks, malicious web links.",
				"techniques_id": ["NISTT003","NISTT004"],
				"approaches_id": ["NISTA008","NISTA013"]
			},
			{
				"id": "NISTC-AT-2(3)",
				"name": "AWARENESS TRAINING | SOCIAL ENGINEERING AND MINING",
				"ugv_discussion": "Social engineering and mining should cover reporting suspicious communications, impersonation attempts at remote bases, or queries targeting mission logs and telemetry. Emphasis on awareness and proper reporting channels reduces the risk of indirect access to secure vehicle systems via social vectors.",
				"definition": "Provide literacy training on recognizing and reporting potential and actual instances of social engineering and social mining",
				"discussion": "Social engineering is an attempt to trick an individual into revealing information or taking an action that can be used to breach, compromise, or otherwise adversely impact a system. Social engineering includes phishing, pretexting, impersonation, baiting, quid pro quo, thread-jacking, social media exploitation, and tailgating. Social mining is an attempt to gather information about the organization that may be used to support future attacks. Literacy training includes information on how to communicate the concerns of employees and management regarding potential and actual instances of social engineering and data mining through organizational channels based on established policies and procedures",
				"techniques_id": ["NISTT003"],
				"approaches_id": ["NISTA008"]
			},
			{
				"id": "NISTC-AT-2(5)",
				"name": "AWARENESS TRAINING | ADVANCED PERSISTENT THREAT",
				"ugv_discussion": "APTs targeting UGV infrastructure may exploit both technical vulnerabilities and human behaviour. Security training for authorised users should highlight scenarios like malware hidden in maintenance software, spear phishing targeting base personnel, or compromised firmware update sources.",
				"definition": "Provide literacy training on the advanced persistent threat.",
				"discussion": "An effective way to detect advanced persistent threats (APT) and to preclude successful attacks is to provide specific literacy training for individuals. Threat literacy training includes educating individuals on the various ways that APTs can infiltrate the organization (e.g., through websites, emails, advertisement pop-ups, articles, and social engineering). Effective training includes techniques for recognizing suspicious emails, use of removable systems in non-secure settings, and the potential targeting of individuals at home.",
				"techniques_id": ["NISTT003"],
				"approaches_id": ["NISTA008"]
			},
			{
				"id": "NISTC-AT-3(3)",
				"name": "ROLE-BASED TRAINING | PRACTICAL EXERCISES ",
				"ugv_discussion": "UGV role-based security training should be tailored to the specific access level and responsibility of the user.For example, developers need training on writing secure code and CAN bus spoofing scenarios, while command-level users might be trained about simulated social engineering or command injection alerts.",
				"definition": "Provide practical exercises in security and privacy training that reinforce training objectives.",
				"discussion": "Practical exercises for security include training for software developers that addresses simulated attacks that exploit common software vulnerabilities or spear or whale phishing attacks targeted at senior leaders or executives. Practical exercises for privacy include modules with quizzes on identifying and processing personally identifiable information in various scenarios or scenarios on conducting privacy impact assessments",
				"techniques_id": ["NISTT003","NISTT004"],
				"approaches_id": ["NISTA008", "NISTA013"]
			},
			{
				"id": "NISTC-AU-5(3)",
				"name": "RESPONSE TO AUDIT PROCESSING FAILURES | CONFIGURABLE TRAFFIC VOLUME THRESHOLDS",
				"ugv_discussion": "When UGV log too much activity data, it can exceed audit storage and affect system availability.  Setting limits allows the system to either drop or delay new data when storage gets full. This prevents system overload from too many logs. This feature is important for military operations or remote control situations where data storage or transmission capacity is limited.",
				"definition": "Enforce configurable network communications traffic volume thresholds reflecting limits on audit log storage capacity and [Selection: reject; delay] network traffic above those thresholds.",
				"discussion": "Organizations have the capability to reject or delay the processing of network communications traffic if audit logging information about such traffic is determined to exceed the storage capacity of the system audit logging function. The rejection or delay response is triggered by the established organizational traffic volume thresholds that can be adjusted based on changes to audit log storage capacity.",
				"techniques_id": ["NISTT001"],
				"approaches_id": ["NISTA002","NISTA003"]
			},
			{
				"id": "NISTC-AU-6",
				"name": "AUDIT RECORD REVIEW, ANALYSIS, AND REPORTING",
				"ugv_discussion": "UGV systems should regularly check and review audit logs to detect strange or unauthorised actions. These logs may include access attempts, control messages, network activity, or software changes. When new threats or alerts from intelligence sources arise, the system may need to increase how often or how deeply it checks the logs. Reports should be sent to security officers or mission leaders.", 
				"definition": "a. Review and analyze system audit records [Assignment: organization-defined frequency] for indications of [Assignment: organization-defined inappropriate or unusual activity] and the potential impact of the inappropriate or unusual activity; b. Report findings to [Assignment: organization-defined personnel or roles]; and c. Adjust the level of audit record review, analysis, and reporting within the system when there is a change in risk based on law enforcement information, intelligence information, or other credible sources of information.",
				"discussion": "Audit record review, analysis, and reporting covers information security- and privacy-related logging performed by organizations, including logging that results from the monitoring of account usage, remote access, wireless connectivity, mobile device connection, configuration settings, system component inventory, use of maintenance tools and non-local maintenance, physical access, temperature and humidity, equipment delivery and removal, communications at system interfaces, and use of mobile code or Voice over Internet Protocol (VoIP). Findings can be reported to organizational entities that include the incident response team, help desk, and security or privacy offices. If organizations are prohibited from reviewing and analyzing audit records or unable to conduct such activities, the review or analysis may be carried out by other organizations granted such authority. The frequency, scope, and/or depth of the audit record review, analysis, and reporting may be adjusted to meet organizational needs based on new information received",
				"techniques_id": ["NISTT001","NISTT002","NISTT013"],
				"approaches_id": ["NISTA003","NISTA004", "NISTA048"]
			},
			{
				"id": "NISTC-AU-6(3)",
				"name": "AUDIT RECORD REVIEW, ANALYSIS, AND REPORTING | CORRELATE AUDIT REPOSITORIES",
				"ugv_discussion": "UGVs may store audit records in different subsystems like sensors, control units, or remote command links. By combining logs from all these places, operators can understand what is happening across the whole system. This helps detect wider patterns or coordinated attacks that may not be visible in a single log source.",
				"definition": "Analyze and correlate audit records across different repositories to gain organization-wide situational awareness.",
				"discussion": "Organization-wide situational awareness includes awareness across all three levels of risk management (i.e., organizational level, mission/business process level, and information system level) and supports cross-organization awareness.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA005"]
			},
			{
				"id": "NISTC-AU-6(5)",
				"name": "AUDIT RECORD REVIEW, ANALYSIS, AND REPORTING | INTEGRATED ANALYSIS OF AUDIT RECORDS",
				"ugv_discussion": "To improve detection, audit logs from UGVs can be analysed together with data from system monitoring, performance metrics, or vulnerability scans. This combined view helps reveal deeper issues, such as slowdowns caused by denial-of-service attacks or repeated scan attempts by an intruder. Tools like SIEM can support this analysis.", 
				"definition": "Integrate analysis of audit records with analysis of [Selection (one or more): vulnerability scanning information; performance data; system monitoring information; [Assignment: organization-defined data/information collected from other sources]] to further enhance the ability to identify inappropriate or unusual activity.",
				"discussion": "Integrated analysis of audit records does not require vulnerability scanning, the generation of performance data, or system monitoring. Rather, integrated analysis requires that the analysis of information generated by scanning, monitoring, or other data collection activities is integrated with the analysis of audit record information. Security Information and Event Management tools can facilitate audit record aggregation or consolidation from multiple system components as well as audit record correlation and analysis. The use of standardized audit record analysis scripts developed by organizations (with localized script adjustments, as necessary) provides more cost-effective approaches for analyzing audit record information collected. The correlation of audit record information with vulnerability scanning information is important in determining the veracity of vulnerability scans of the system and in correlating attack detection events with scanning results. Correlation with performance data can uncover denial-of-service attacks or other types of attacks that result in the unauthorized use of resources. Correlation with system monitoring information can assist in uncovering attacks and in better relating audit information to operational situations.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA005"]
			},
			{
				"id": "NISTC-AU-6(6)",
				"name": "AUDIT RECORD REVIEW, ANALYSIS, AND REPORTING | CORRELATION WITH PHYSICAL MONITORING",
				"ugv_discussion": "Linking system audit logs with physical access records helps confirm whether actions were taken by authorised users. For example, if a remote command is sent, but no authorised person was near the control station, this could signal misuse. Physical access logs add another layer of trust and traceability.", 
				"definition": "Correlate information from audit records with information obtained from monitoring physical access to further enhance the ability to identify suspicious, inappropriate, unusual, or malevolent activity.",
				"discussion": "The correlation of physical audit record information and the audit records from systems may assist organizations in identifying suspicious behavior or supporting evidence of such behavior. For example, the correlation of an individual’s identity for logical access to certain systems with the additional physical security information that the individual was present at the facility when the logical access occurred may be useful in investigations.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA005"]
			},
			{
				"id": "NISTC-AU-6(8)",
				"name": "AUDIT RECORD REVIEW, ANALYSIS, AND REPORTING | FULL TEXT ANALYSIS OF PRIVILEGED COMMANDS",
				"ugv_discussion": "UGV audit systems should analyse the full content of commands made by privileged users. By looking at full command text, including parameters, the system can better detect misuse or suspicious behaviour.", 
				"definition": "Perform a full text analysis of logged privileged commands in a physically distinct component or subsystem of the system, or other system that is dedicated to that analysis.",
				"discussion": "Full text analysis of privileged commands requires a distinct environment for the analysis of audit record information related to privileged users without compromising such information on the system where the users have elevated privileges, including the capability to execute privileged commands. Full text analysis refers to analysis that considers the full text of privileged commands (i.e., commands and parameters) as opposed to analysis that considers only the name of the command. Full text analysis includes the use of pattern matching and heuristics",
				"techniques_id": ["NISTT002","NISTT012"],
				"approaches_id": ["NISTA004","NISTA044"]
			},
			{
				"id": "NISTC-AU-6(9)",
				"name": "AUDIT RECORD REVIEW, ANALYSIS, AND REPORTING | CORRELATION WITH INFORMATION FROM NONTECHNICAL SOURCES",
				"ugv_discussion": "Useful information about insider threats or policy violations may come from reports or records outside of technical logs. In sensitive military environments, this type of information should be used carefully and only when needed. It can help confirm suspicious activity, but access must be limited and legally reviewed.",
				"definition": "Correlate information from nontechnical sources with audit record information to enhance organization-wide situational awareness",
				"discussion": "Nontechnical sources include records that document organizational policy violations related to harassment incidents and the improper use of information assets. Such information can lead to a directed analytical effort to detect potential malicious insider activity. Organizations limit access to information that is available from nontechnical sources due to its sensitive nature. Limited access minimizes the potential for inadvertent release of privacy-related information to individuals who do not have a need to know. The correlation of information from nontechnical sources with audit record information generally occurs only when individuals are suspected of being involved in an incident. Organizations obtain legal advice prior to initiating such actions.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA005"]
			},
			{
				"id": "NISTC-AU-9(1)",
				"name": "PROTECTION OF AUDIT INFORMATION | HARDWARE WRITE-ONCE MEDIA",
				"ugv_discussion": "Storing audit logs on write-once hardware ensures that once information is recorded, it cannot be changed or deleted. This provides strong protection against tampering, especially when the UGV system is deployed in hostile environments. This is particularly important for investigations or mission reviews, where accurate logs are required.", 
				"definition": "Write audit trails to hardware-enforced, write-once media",
				"discussion": "Writing audit trails to hardware-enforced, write-once media applies to the initial generation of audit trails (i.e., the collection of audit records that represents the information to be used for detection, analysis, and reporting purposes) and to the backup of those audit trails. Writing audit trails to hardware-enforced, write-once media does not apply to the initial generation of audit records prior to being written to an audit trail. Write-once, read-many (WORM) media includes Compact Disc-Recordable (CD-R), Blu-Ray Disc Recordable (BD-R), and Digital Versatile Disc-Recordable (DVD-R). In contrast, the use of switchable write-protection media, such as tape cartridges, Universal Serial Bus (USB) drives, Compact Disc Re-Writeable (CD-RW), and Digital Versatile Disc-Read Write (DVD-RW) results in write-protected but not write-once media",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-AU-9(2)",
				"name": "PROTECTION OF AUDIT INFORMATION | STORE ON SEPARATE PHYSICAL SYSTEMS AND COMPONENTS",
				"ugv_discussion": "Audit data should be stored on a different physical system than the one being audited. For example, logs from a weapon control unit might be saved to a separate onboard computer or external storage. This approach prevents attackers from deleting or modifying logs if they gain access to the main system. It also makes it easier to manage logs across the fleet.", 
				"definition": "Store audit records [Assignment: organization-defined frequency] in a repository that is part of a physically different system or system component than the system or component being audited.",
				"discussion": "Storing audit records in a repository separate from the audited system or system component helps to ensure that a compromise of the system being audited does not also result in a compromise of the audit records. Storing audit records on separate physical systems or components also preserves the confidentiality and integrity of audit records and facilitates the management of audit records as an organization-wide activity. Storing audit records on separate systems or components applies to initial generation as well as backup or long-term storage of audit records.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-AU-9(3)",
				"name": "PROTECTION OF AUDIT INFORMATION | CRYPTOGRAPHIC PROTECTION",
				"ugv_discussion": "Cryptographic techniques help protect audit logs from tampering. In UGVs, this means the logs remain trustworthy even if the system is attacked.",
				"definition": "Implement cryptographic mechanisms to protect the integrity of audit information and audit tools.",
				"discussion": "Cryptographic mechanisms used for protecting the integrity of audit information include signed hash functions using asymmetric cryptography. This enables the distribution of the public key to verify the hash information while maintaining the confidentiality of the secret key used to generate the hash.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-AU-9(5)",
				"name": "PROTECTION OF AUDIT INFORMATION | DUAL AUTHORIZATION",
				"ugv_discussion": "For higher military security, any movement or deletion of UGV audit logs should require approval from two trusted individuals. This dual-authorisation approach prevents a single user from covering up malicious actions. It is especially useful in classified missions or high-risk zones where insider threats must be controlled. Rotating responsibilities helps reduce the risk of collusion between users.",  
				"definition": "Enforce dual authorization for [Selection (one or more): movement; deletion] of [Assignment: organization-defined audit information].",
				"discussion": "Organizations may choose different selection options for different types of audit information. Dual authorization mechanisms (also known as two-person control) require the approval of two authorized individuals to execute audit functions. To reduce the risk of collusion, organizations consider rotating dual authorization duties to other individuals. Organizations do not require dual authorization mechanisms when immediate responses are necessary to ensure public and environmental safety.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032"]
			},
			{
				"id": "NISTC-AU-9(6)",
				"name": "PROTECTION OF AUDIT INFORMATION | READ-ONLY ACCESS",
				"ugv_discussion": "Giving read-only access to audit data helps protect the logs from being changed or deleted. For stricter control, even privileged users like administrators should not be allowed to edit logs unless strictly necessary. This prevents misuse and helps keep a reliable record of system activity for post-mission analysis or forensic investigation.",
				"definition": "Authorize read-only access to audit information to [Assignment: organization-defined subset of privileged users or roles].",
				"discussion": "Restricting privileged user or role authorizations to read-only helps to limit the potential damage to organizations that could be initiated by such users or roles, such as deleting audit records to cover up malicious activity.",
				"techniques_id": ["NISTT009","NISTT013"],
				"approaches_id": ["NISTA032", "NISTA033","NISTA046"]
			},
			{
				"id": "NISTC-AU-9(7)",
				"name": "PROTECTION OF AUDIT INFORMATION | STORE ON COMPONENT WITH DIFFERENT OPERATING SYSTEM",
				"ugv_discussion": "Storing audit logs on a different operating system from the main UGV system adds another layer of security. If the main system is attacked using an OS-specific vulnerability, the audit logs may remain safe on the separate OS. For example, a Linux-based UGV may write logs to a component running QNX or a hardened microcontroller.", 
				"definition": "Store audit information on a component running a different operating system than the system or component being audited.",
				"discussion": "Storing auditing information on a system component running a different operating system reduces the risk of a vulnerability specific to the system, resulting in a compromise of the audit records.",
				"techniques_id": ["NISTT006"],
				"approaches_id": ["NISTA018"]
			},
			{
				"id": "NISTC-AU-10(2)",
				"name": "NON-REPUDIATION | VALIDATE BINDING OF INFORMATION PRODUCER IDENTITY",
				"ugv_discussion": "It is important to confirm who generated a log or piece of data. This control ensures the identity of the user or system creating the information is securely linked using methods like cryptographic checksums. If any changes occur after the data is created, it can be detected.",
				"definition": "(a) Validate the binding of the information producer identity to the information at [Assignment: organization-defined frequency]; and \n (b) Perform [Assignment: organization-defined actions] in the event of a validation error",
				"discussion": "Validating the binding of the information producer identity to the information prevents the modification of information between production and review. The validation of bindings can be achieved by, for example, using cryptographic checksums. Organizations determine if validations are in response to user requests or generated automatically.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA047"]
			},
			{
				"id": "NISTC-AU-13",
				"name": "MONITORING FOR INFORMATION DISCLOSURE",
				"ugv_discussion": "Military UGV systems may contain sensitive data, such as mission plans, unit positions, or classified firmware. Monitoring the internet and open sources for leaked or shared information helps detect unauthorised disclosures. Public forums, code-sharing platforms, and social media should be scanned for signs that data has been exposed. If leaks are found, quick action is needed to limit further damage.",
				"definition": "a. Monitor [Assignment: organization-defined open-source information and/or information sites] [Assignment: organization-defined frequency] for evidence of unauthorized disclosure of organizational information; and b. If an information disclosure is discovered: (1) Notify [Assignment: organization-defined personnel or roles]; and (2) Take the following additional actions: [Assignment: organization-defined additional actions].",
				"discussion": "Unauthorized disclosure of information is a form of data leakage. Open-source information includes social networking sites and code-sharing platforms and repositories. Examples of organizational information include personally identifiable information retained by the organization or proprietary information generated by the organization.",
				"techniques_id": ["NISTT001", "NISTT002"],
				"approaches_id": ["NISTA003", "NISTA004"]
			},
			{
				"id": "NISTC-AU-13(3)",
				"name": "MONITORING FOR INFORMATION DISCLOSURE | UNAUTHORIZED REPLICATION OF INFORMATION",
				"ugv_discussion": "In some cases, adversaries may try to replicate or impersonate military UGV systems, websites, or documents to confuse users or steal data. This control supports active monitoring to discover unauthorised copies of organisational material.",
				"definition": "Employ discovery techniques, processes, and tools to determine if external entities are replicating organizational information in an unauthorized manner",
				"discussion": "The unauthorized use or replication of organizational information by external entities can cause adverse impacts on organizational operations and assets, including damage to reputation. Such activity can include the replication of an organizational website by an adversary or hostile threat actor who attempts to impersonate the web-hosting organization. Discovery tools, techniques, and processes used to determine if external entities are replicating organizational information in an unauthorized manner include scanning external websites, monitoring social media, and training staff to recognize the unauthorized use of organizational information.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004"]
			},
			{
				"id": "NISTC-CA-7(3)",
				"name": "CONTINUOUS MONITORING | TREND ANALYSES",
				"ugv_discussion": "Trend analysis helps track changes in cyber threats, attack frequency, and weaknesses in system settings over time. By monitoring these patterns, organizations can determine when security settings need adjustment. This ensures that security measures remain effective as risks evolve and new vulnerabilities and threats are introduced.",
				"definition": "Employ trend analyses to determine if control implementations, the frequency of continuous monitoring activities, and the types of activities used in the continuous monitoring process need to be modified based on empirical data.",
				"discussion": "Trend analyses include examining recent threat information that addresses the types of threat events that have occurred in the organization or the Federal Government, success rates of certain types of attacks, emerging vulnerabilities in technologies, evolving social engineering techniques, the effectiveness of configuration settings, results from multiple control assessments, and findings from Inspectors General or auditors.",
				"techniques_id": ["NISTT003"],
				"approaches_id": ["NISTA007","NISTA008"]
			},
			{
				"id": "NISTC-CA-7(5)",
				"name": "CONTINUOUS MONITORING | CONSISTENCY ANALYSIS",
				"ugv_discussion": "Security controls in UGVs can become inconsistent as new features or patches are added. This control ensures that all settings and defences work well together. For example, one setting may block traffic while another tries to monitor it, causing conflict. Checking for consistency prevents systems working against each other.",
				"definition": "Employ the following actions to validate that policies are established and implemented controls are operating in a consistent manner: [Assignment: organization-defined actions].",
				"discussion": "Security and privacy controls are often added incrementally to a system. As a result, policies for selecting and implementing controls may be inconsistent, and the controls could fail to work together in a consistent or coordinated manner. At a minimum, the lack of consistency and coordination could mean that there are unacceptable security and privacy gaps in the system. At worst, it could mean that some of the controls implemented in one location or by one component are actually impeding the functionality of other controls (e.g., encrypting internal network traffic can impede monitoring). In other situations, failing to consistently monitor all implemented network protocols (e.g., a dual stack of IPv4 and IPv6) may create unintended vulnerabilities in the system that could be exploited by adversaries. It is important to validate—through testing, monitoring, and analysis—that the implemented controls are operating in a consistent, coordinated, non-interfering manner.",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA011"]
			},
			{
				"id": "NISTC-CA-7(6)",
				"name": "CONTINUOUS MONITORING | AUTOMATION SUPPORT FOR MONITORING",
				"ugv_discussion": "Automated tools help monitor UGV systems in real time without relying on manual checks. These tools can track sensor data, network traffic, or user behaviour and alert operators about issues. Using automation ensures the system status is always up to date. This is especially useful for unmanned missions, where human review may not be possible.",
				"definition": "Ensure the accuracy, currency, and availability of monitoring results for the system using [Assignment: organization-defined automated mechanisms].",
				"discussion": "Using automated tools for monitoring helps to maintain the accuracy, currency, and availability of monitoring information which in turns helps to increase the level of ongoing awareness of the system security and privacy posture in support of organizational risk management decisions.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004"]
			},
			{
				"id": "NISTC-CA-8",
				"name": "PENETRATION TESTING",
				"ugv_discussion": "Penetration testing involves simulating attacks on UGV systems to find weak points before real adversaries can exploit them. This is more advanced than just scanning for known issues. It tests how well UGV components like communication links, control systems, and mission software can withstand real-world attacks. Regular testing helps keep systems secure as new threats emerge.",
				"definition": "Conduct penetration testing [Assignment: organization-defined frequency] on [Assignment: organization-defined systems or system components].",
				"discussion": "Penetration testing is a specialized type of assessment conducted on systems or individual system components to identify vulnerabilities that could be exploited by adversaries. Penetration testing goes beyond automated vulnerability scanning and is conducted by agents and teams with demonstrable skills and experience that include technical expertise in network, operating system, and/or application level security. Penetration testing can be used to validate vulnerabilities or determine the degree of penetration resistance of systems to adversaries within specified constraints. Such constraints include time, resources, and skills. Penetration testing attempts to duplicate the actions of adversaries and provides a more in-depth analysis of security- and privacy-related weaknesses or deficiencies. Penetration testing is especially important when organizations are transitioning from older technologies to newer technologies (e.g., transitioning from IPv4 to IPv6 network protocols). \n Organizations can use the results of vulnerability analyses to support penetration testing activities. Penetration testing can be conducted internally or externally on the hardware, software, or firmware components of a system and can exercise both physical and technical controls. A standard method for penetration testing includes a pretest analysis based on full knowledge of the system, pretest identification of potential vulnerabilities based on the pretest analysis, and testing designed to determine the exploitability of vulnerabilities. All parties agree to the rules of engagement before commencing penetration testing scenarios. Organizations correlate the rules of engagement for the penetration tests with the tools, techniques, and procedures that are anticipated to be employed by adversaries. Penetration testing may result in the exposure of information that is protected by laws or regulations, to individuals conducting the testing. Rules of engagement, contracts, or other appropriate mechanisms can be used to communicate expectations for how to protect this information. Risk assessments guide the decisions on the level of independence required for the personnel conducting penetration testing.",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA013"]
			},
			{
				"id": "NISTC-CA-8(1)",
				"name": "PENETRATION TESTING | INDEPENDENT PENETRATION TESTING AGENT OR TEAM",
				"ugv_discussion": "This control requires that penetration tests be done by independent experts, not by those who built or manage the system. This ensures that the testing is unbiased and thorough. This also helps confirm that security measures are reliable and not influenced by internal assumptions.",
				"definition": "Employ an independent penetration testing agent or team to perform penetration testing on the system or system components.",
				"discussion": "Independent penetration testing agents or teams are individuals or groups who conduct impartial penetration testing of organizational systems. Impartiality implies that penetration testing agents or teams are free from perceived or actual conflicts of interest with respect to the development, operation, or management of the systems that are the targets of the penetration testing. CA-2(1) provides additional information on independent assessments that can be applied to penetration testing",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA013"]
			},
			{
				"id": "NISTC-CA-8(2)",
				"name": "PENETRATION TESTING | RED TEAM EXERCISES",
				"ugv_discussion": "Red team exercises are advanced tests where experts act like real attackers. They use techniques such as software exploitation or social engineering to test how the UGV system would perform in real attack situations.",
				"definition": "Employ the following red-team exercises to simulate attempts by adversaries to compromise organizational systems in accordance with applicable rules of engagement: [Assignment: organization-defined red team exercises].",
				"discussion": "Red team exercises extend the objectives of penetration testing by examining the security and privacy posture of organizations and the capability to implement effective cyber defenses. Red team exercises simulate attempts by adversaries to compromise mission and business functions and provide a comprehensive assessment of the security and privacy posture of systems and organizations. Such attempts may include technology-based attacks and social engineering-based attacks. Technology-based attacks include interactions with hardware, software, or firmware components and/or mission and business processes. Social engineering-based attacks include interactions via email, telephone, shoulder surfing, or personal conversations. Red team exercises are most effective when conducted by penetration testing agents and teams with knowledge of and experience with current adversarial tactics, techniques, procedures, and tools. While penetration testing may be primarily laboratory-based testing, organizations can use red team exercises to provide more comprehensive assessments that reflect real-world conditions. The results from red team exercises can be used by organizations to improve security and privacy awareness and training and to assess control effectiveness.",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA013"]
			},
			{
				"id": "NISTC-CA-8(3)",
				"name": "PENETRATION TESTING | FACILITY PENETRATION TESTING",
				"ugv_discussion": "This control focuses on testing physical access points, such as gates, data ports, or mission control rooms. It ensures attackers cannot easily bypass physical barriers and gain access to UGV systems. Such testing is essential in military deployment zones, where equipment is often exposed.",
				"definition": "Employ a penetration testing process that includes [Assignment: organization-defined frequency] [Selection: announced; unannounced] attempts to bypass or circumvent controls associated with physical access points to the facility.",
				"discussion": "Penetration testing of physical access points can provide information on critical vulnerabilities in the operating environments of organizational systems. Such information can be used to correct weaknesses or deficiencies in physical controls that are necessary to protect organizational systems.",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA013"]
			},
			{
				"id": "NISTC-CM-2(7)",
				"name": "BASELINE CONFIGURATION | CONFIGURE SYSTEMS AND COMPONENTS FOR HIGH-RISK AREAS", 
				"ugv_discussion": "When UGV systems are deployed to high-risk areas, they must be specially configured. This includes limiting software, applying strict network policies, and checking systems for tampering after return.",
				"definition": "(a) Issue [Assignment: organization-defined systems or system components] with [Assignment: organization-defined configurations] to individuals traveling to locationsthat the organization deems to be of significant risk; and (b) Apply the following controls to the systems or components when the individuals return from travel: [Assignment: organization-defined controls]",
				"discussion": "When it is known that systems or system components will be in high-risk areas external to the organization, additional controls may be implemented to counter the increased threat in such areas. For example, organizations can take actions for notebook computers used by individuals departing on and returning from travel. Actions include determining the locations that are of concern, defining the required configurations for the components, ensuring that components are configured as intended before travel is initiated, and applying controls to the components after travel is completed. Specially configured notebook computers include computers with sanitized hard drives, limited applications, and more stringent configuration settings. Controls applied to mobile devices upon return from travel include examining the mobile device for signs of physical tampering and purging and reimaging disk drives. Protecting information that resides on mobile devices is addressed in the MP (Media Protection) family",
				"techniques_id": ["NISTT002","NISTT010"],
				"approaches_id": ["NISTA004", "NISTA006","NISTA037"]
			},
			{
				"id": "NISTC-CM-4(1)",
				"name": "IMPACT ANALYSES | SEPARATE TEST ENVIRONMENTS",
				"ugv_discussion": "All changes to UGV systems should be tested in a separate environment before being used in real operations. This prevents bugs or security flaws from affecting mission systems. Test environments can be separate physical machines or virtual setups, and are important for safe updates and upgrades.",
				"definition": "Analyze changes to the system in a separate test environment before implementation in an operational environment, looking for security and privacy impacts due to flaws, weaknesses, incompatibility, or intentional malice.",
				"discussion": "A  separate test environment requires an environment that is physically or logically separate and distinct from the operational environment. The separation is sufficient to ensure that activities in the test environment do not impact activities in the operational environment and that information in the operational environment is not inadvertently transmitted to the test environment. Separate environments can be achieved by physical or logical means. If physically separate test environments are not implemented, organizations determine the strength of mechanism required when implementing logical separation.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-CM-5(4)",
				"name": "ACCESS RESTRICTIONS FOR CHANGE | DUAL AUTHORIZATION",
				"ugv_discussion": "Important changes to UGV systems must be approved by two qualified personnel. This two-person control reduces the risk of mistakes or insider threats. It ensures accountability, especially when changing critical software or configuration that affects safety or mission execution.",
				"definition": "Enforce dual authorization for implementing changes to [Assignment: organization-defined system components and system-level information]",
				"discussion": "Organizations employ dual authorization to help ensure that any changes to selected system components and information cannot occur unless two qualified individuals approve and implement such changes. The two individuals possess the skills and expertise to determine if the proposed changes are correct implementations of approved changes. The individuals are also accountable for the changes. Dual authorization may also be known as two-person control. To reduce the risk of collusion, organizations consider rotating dual authorization duties to other individuals. System-level information includes operational procedures.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032"]
			},
			{
				"id": "NISTC-CM-5(5)",
				"name": "ACCESS RESTRICTIONS FOR CHANGE | PRIVILEGE LIMITATION FOR PRODUCTION AND OPERATION",
				"ugv_discussion": "Only specific personnel should be allowed to make changes in operational UGV systems. Regular reviews of who has access help prevent unauthorised actions and reduce risks during field deployment.",
				"definition": "(a) Limit privileges to change system components and system-related information within a production or operational environment; and (b) Review and reevaluate privileges [Assignment: organization-defined frequency].",
				"discussion": "In many organizations, systems support multiple mission and business functions. Limiting privileges to change system components with respect to operational systems is necessary because changes to a system component may have far-reaching effects on mission and business processes supported by the system. The relationships between systems and mission/business processes are, in some cases, unknown to developers. System-related information includes operational procedures.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032"]
			},
			{
				"id": "NISTC-CM-5(6)",
				"name": "ACCESS RESTRICTIONS FOR CHANGE | LIMIT LIBRARY PRIVILEGES",
				"ugv_discussion": "This control prevents unauthorised changes to important software libraries. These libraries often be included in  system files and functions. Restricting access reduces the chance of system compromise or errors from unapproved modifications.",
				"definition": "Limit privileges to change software resident within software libraries.",
				"discussion": "Software libraries include privileged programs",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032"]
			},
			{
				"id": "NISTC-CM-7(2)",
				"name": "LEAST FUNCTIONALITY | PREVENT PROGRAM EXECUTION",
				"ugv_discussion": "Only approved programs should be allowed to run on UGV systems. This stops malware or unauthorised software from running to protects system integrity.",
				"definition": "Prevent program execution in accordance with [Selection (one or more): [Assignment: organization-defined policies, rules of behavior, and/or access agreements regarding software program usage and restrictions]; rules authorizing the terms and conditions of software program usage].",
				"discussion": "Prevention of program execution addresses organizational policies, rules of behavior, and/or access agreements that restrict software usage and the terms and conditions imposed by the developer or manufacturer, including software licensing and copyrights. Restrictions include prohibiting auto-execute features, restricting roles allowed to approve program execution, permitting or prohibiting specific software programs, or restricting the number of program instances executed at the same time.",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA037"]
			},
			{
				"id": "NISTC-CM-7(4)",
				"name": "LEAST FUNCTIONALITY | UNAUTHORIZED SOFTWARE",
				"ugv_discussion": "UGV systems must prevent unauthorised software from running. This includes old versions or software from untrusted sources. Deny-by-exception policies ensure only known software can operate, reducing the attack surface.",
				"definition": "(a) Identify [Assignment: organization-defined software programs not authorized to execute on the system]; (b) Employ an allow-all, deny-by-exception policy to prohibit the execution of unauthorized software programs on the system; and (c) Review and update the list of unauthorized software programs [Assignment: organization-defined frequency].",
				"discussion": "Unauthorized software programs can be limited to specific versions or from a specific source. The concept of prohibiting the execution of unauthorized software may also be applied to user actions, system ports and protocols, IP addresses/ranges, websites, and MAC addresses.",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA035"]
			},
			{
				"id": "NISTC-CM-7(5)",
				"name": "LEAST FUNCTIONALITY | AUTHORIZED SOFTWARE ",
				"ugv_discussion": "This control allows only pre-approved software to run on the system. Software must be reviewed and verified regularly.",
				"definition": "(a) Identify [Assignment: organization-defined software programs authorized to execute on the system]; (b) Employ a deny-all, permit-by-exception policy to allow the execution of authorized software programs on the system; and (c) Review and update the list of authorized software programs [Assignment: organization-defined frequency]",
				"discussion": "uthorized software programs can be limited to specific versions or from a specific source. To facilitate a comprehensive authorized software process and increase the strength of protection for attacks that bypass application level authorized software, software programs may be decomposed into and monitored at different levels of detail. These  levels include applications, application programming interfaces, application modules, scripts, system processes, system services, kernel functions, registries, drivers, and dynamic link libraries. The concept of permitting the execution of authorized software may also be applied to user actions, system ports and protocols, IP addresses/ranges, websites, and MAC addresses. Organizations consider verifying the integrity of authorized software programs using digital signatures, cryptographic checksums, or hash functions. Verification of authorized software can occur either prior to execution or at system startup. The identification of authorized URLs for websites is addressed in CA-3(5) and SC-7",
				"techniques_id": ["NISTT009", "NISTT010"],
				"approaches_id": ["NISTA032", "NISTA035"]
			},
			{
				"id": "NISTC-CM-7(6)",
				"name": "LEAST FUNCTIONALITY | CONFINED ENVIRONMENTS WITH LIMITED PRIVILEGES",
				"ugv_discussion": "Some user-installed software might be risky. Running it in a limited or isolated environment helps contain any harm. UGVs can use sandboxing to keep untrusted software from affecting the core system.",
				"definition": "Require that the following user-installed software execute in a confined physical or virtual machine environment with limited privileges: [Assignment: organization-defined user-installed software].",
				"discussion": "Organizations identify software that may be of concern regarding its origin or potential for containing malicious code. For this type of software, user installations occur in confined environments of operation to limit or contain damage from malicious code that may be executed",
				"techniques_id": ["NISTT009", "NISTT012"],
				"approaches_id": ["NISTA032","NISTA044","NISTA045"]
			},
			{
				"id": "NISTC-CM-7(7)",
				"name": "LEAST FUNCTIONALITY | CODE EXECUTION IN PROTECTED ENVIRONMENTS",
				"ugv_discussion": "Binary code from unknown sources must run only in a controlled environment. This prevents code from damaging the system if it is malicious or faulty.",
				"definition": "Allow execution of binary or machine-executable code only in confined physical or virtual machine environments and with the explicit approval of [Assignment: organization-defined personnel or roles] when such code is: (a) Obtained from sources with limited or no warranty; and/or (b) Without the provision of source code.",
				"discussion": "Code execution in protected environments applies to all sources of binary or machine-executable code, including commercial software and firmware and open-source software.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-CM-8(3)",
				"name": "SYSTEM COMPONENT INVENTORY | AUTOMATED UNAUTHORIZED COMPONENT DETECTION",
				"ugv_discussion": "UGVs should use tools that automatically detect unknown hardware, firmware or software. These tools can alert, isolate, or block suspicious components. For example, detecting an unauthorised USB or rogue wireless module helps stop tampering or data theft.",
				"definition": "(a) Detect the presence of unauthorized hardware, software, and firmware components within the system using [Assignment: organization-defined automated mechanisms] [Assignment: organization-defined frequency]; and \n (b) Take the following actions when unauthorized components are detected: [Selection (one or more): disable network access by such components; isolate the components; notify [Assignment: organization-defined personnel or roles].",
				"discussion": "Automated unauthorized component detection is applied in addition to the monitoring for unauthorized remote connections and mobile devices. Monitoring for unauthorized system components may be accomplished on an ongoing basis or by the periodic scanning of systems for that purpose. Automated mechanisms may also be used to prevent the connection of unauthorized components (see CM-7(9)). Automated mechanisms can be implemented in systems or in separate system components. When acquiring and implementing automated mechanisms, organizations consider whether such mechanisms depend on the ability of the system component to support an agent or supplicant in order to be detected since some types of components do not have or cannot support agents (e.g., IoT devices, sensors). Isolation can be achieved , for example, by placing unauthorized system components in separate domains or subnets or quarantining such components. This type of component isolation is commonly referred to as “sandboxing.”",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004"]
			},
			{
				"id": "NISTC-CM-14",
				"name": "SIGNED COMPONENTS",
				"ugv_discussion": "Only digitally signed software and firmware should be allowed in UGV systems. This ensures the code comes from a trusted source and has not been modified. Signature checks prevent unauthorised updates and maintain system integrity.",
				"definition": "Prevent the installation of [Assignment: organization-defined software and firmware components] without verification that the component has been digitally signed using a certificate that is recognized and approved by the organization.",
				"discussion": "Software and firmware components prevented from installation unless signed with recognized and approved certificates include software and firmware version updates, patches, service packs, device drivers, and basic input/output system updates. Organizations can identify applicable software and firmware components by type, by specific items, or a combination of both. Digital signatures and organizational verification of such signatures is a method of code authentication.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046","NISTA047"]
			},
			{
				"id": "NISTC-CP-2(1)",
				"name": "CONTINGENCY PLAN | COORDINATE WITH RELATED PLANS",
				"ugv_discussion": "Contingency planning for UGV must align with other strategic plans such as mission continuity, cyber incident response, and critical asset protection. This coordination ensures that recovery actions are consistent and do not conflict with operational priorities or command structures. For example, a cyber breach in a ground control station should activate both the UGV contingency plan and incident response procedures to avoid delays in response.",
				"definition": "Coordinate contingency plan development with organizational elements responsible for related plans",
				"discussion": "lans that are related to contingency plans include Business Continuity Plans, Disaster Recovery Plans, Critical Infrastructure Plans, Continuity of Operations Plans, Crisis Communications Plans, Insider Threat Implementation Plans, Data Breach Response Plans, Cyber Incident Response Plans, Breach Response Plans, and Occupant Emergency Plans",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA011"]
			},
			{
				"id": "NISTC-CP-2(5)",
				"name": "CONTINGENCY PLAN | CONTINUE MISSIONS AND BUSINESS FUNCTIONS",
				"ugv_discussion": "For UGVs, it is essential to maintain mission operations, such as moving, surveillance or delivery, even during partial system failures. The contingency plan may include fallback procedures, degraded operation modes, and manual overrides to ensure continued function.",
				"definition": "Plan for the continuance of [Selection: all; essential] mission and business functions with minimal or no loss of operational continuity and sustains that continuity until full system restoration at primary processing and/or storage sites",
				"discussion": "Organizations may choose to conduct the contingency planning activities to continue mission and business functions as part of business continuity planning or business impact analyses. Primary processing and/or storage sites defined by organizations as part of contingency planning may change depending on the circumstances associated with the contingency.",
				"techniques_id": ["NISTT004", "NISTT001"],
				"approaches_id": ["NISTA012", "NISTA001", "NISTA003"]
			},
			{
				"id": "NISTC-CP-2(8)",
				"name": "CONTINGENCY PLAN | IDENTIFY CRITICAL ASSETS",
				"ugv_discussion": "Critical UGV assets may include mission control software, communication protocols, firmwares, sensors, and encryption keys. Identifying these assets helps prioritise their protection and recovery in contingency scenarios.",
				"definition": "Identify critical system assets supporting [Selection: all; essential] mission and business functions.",
				"discussion": "Organizations may choose to identify critical assets as part of criticality analysis, business continuity planning, or business impact analyses. Organizations identify critical system assets so that additional controls can be employed (beyond the controls routinely implemented) to help ensure that organizational mission and business functions can continue to be conducted during contingency operations. The identification of critical information assets also facilitates the prioritization of organizational resources. Critical system assets include technical and operational aspects. Technical aspects include system components, information technology services, information technology products, and mechanisms. Operational aspects include procedures (i.e., manually executed operations) and personnel (i.e., individuals operating technical controls and/or executing manual procedures). Organizational program protection plans can assist in identifying critical assets. If critical assets are resident within or supported by external service providers, organizations consider implementing CP-2(7) as a control enhancement.",
				"techniques_id": ["NISTT003"],
				"approaches_id": ["NISTA009"]
			},
			{
				"id": "NISTC-CP-4(5)",
				"name": "SELF-CHALLENGE",
				"ugv_discussion": "Military UGV systems benefit from regular tests that simulate cyber and physical attack. These tests may involve disabling communication links, degrading GPS signals, or simulating denial-of-service attacks. The results help identify hidden weaknesses and validate the system's ability to recover under attack or failure.",
				"definition": "Employ [Assignment: organization-defined mechanisms] to [Assignment: organization-defined system or system component] to disrupt and adversely affect the system or system component.",
				"discussion": "Often, the best method of assessing system resilience is to disrupt the system in some manner. The mechanisms used by the organization could disrupt system functions or system services in many ways, including terminating or disabling critical system components, changing the configuration of system components, degrading critical functionality (e.g., restricting network bandwidth), or altering privileges. Automated, on-going, and simulated cyber-attacks and service disruptions can reveal unexpected functional dependencies and help the organization determine its ability to ensure resilience in the face of an actual cyber-attack",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA013"]
			},
			{
				"id": "NISTC-CP-8(3)",
				"name": "TELECOMMUNICATIONS SERVICES | SEPARATION OF PRIMARY AND ALTERNATE PROVIDERS",
				"ugv_discussion": "UGVs should rely on communication services from separate providers or infrastructures. For instance, command-and-control may use military communication links, while a fallback uses encrypted radio or cellular. Physical and logical separation prevents a single point of failure and enhances resilience against cyber attacks and disruptions.",
				"definition": "Obtain alternate telecommunications services from providers that are separated from primary service providers to reduce susceptibility to the same threats",
				"discussion": "Threats that affect telecommunications services are defined in organizational assessments of risk and include natural disasters, structural failures, cyber or physical attacks, and errors of omission or commission. Organizations can reduce common susceptibilities by minimizing shared infrastructure among telecommunications service providers and achieving sufficient geographic separation between services. Organizations may consider using a single service provider in situations where the service provider can provide alternate telecommunications services that meet the separation needs addressed in the risk assessment.",
				"techniques_id": ["NISTT006"],
				"approaches_id": ["NISTA018"]
			},
			{
				"id": "NISTC-CP-9",
				"name": "SYSTEM BACKUP",
				"ugv_discussion": "UGV platforms must regularly back up critical data, including operational logs, control parameters, and mission plans. Both system-level and user-level information should be backed up at defined intervals and stored securely. Backup processes must ensure data integrity using cryptographic signatures.",
				"definition": "a. Conduct backups of user-level information contained in [Assignment: organization-defined system components] [Assignment: organization-defined frequency consistent with recovery time and recovery point objectives]; \n b. Conduct backups of system-level information contained in the system [Assignment: organization-defined frequency consistent with recovery time and recovery point objectives]; \n c. Conduct backups of system documentation, including security- and privacy-related documentation [Assignment: organization-defined frequency consistent with recovery time and recovery point objectives]; and \n d. Protect the confidentiality, integrity, and availability of backup information.",
				"discussion": "System-level information includes system state information, operating system software, middleware, application software, and licenses. User-level information includes information other than system-level information. Mechanisms employed to protect the integrity of system backups include digital signatures and cryptographic hashes. Protection of system backup information while in transit is addressed by MP-5 and SC-8. System backups reflect the requirements in contingency plans as well as other organizational requirements for backing up information. Organizations may be subject to laws, executive orders, directives, regulations, or policies with requirements regarding specific categories of information (e.g., personal health information). Organizational personnel consult with the senior agency official for privacy and legal counsel regarding such requirements.",
				"techniques_id": ["NISTT011"],
				"approaches_id": ["NISTA041"]
			},
			{
				"id": "NISTC-CP-9(1)",
				"name": "SYSTEM BACKUP | TESTING FOR RELIABILITY AND INTEGRITY",
				"ugv_discussion": "Backup data must be tested regularly to confirm it can be restored when needed. For UGVs, this might include checking if corrupted data can be restored or verifying that encrypted files can be decrypted correctly.",
				"definition": "Test backup information [Assignment: organization-defined frequency] to verify media reliability and information integrit",
				"discussion": "Organizations need assurance that backup information can be reliably retrieved. Reliability pertains to the systems and system components where the backup information is stored, the operations used to retrieve the information, and the integrity of the information being retrieved. Independent and specialized tests can be used for each of the aspects of reliability. For example, decrypting and transporting (or transmitting) a random sample of backup files from the alternate storage or backup site and comparing the information to the same information at the primary processing site can provide such assurance",
				"techniques_id": ["NISTT004","NISTT011","NISTT013"],
				"approaches_id": ["NISTA013","NISTA041","NISTA046"]
			},
			{
				"id": "NISTC-CP-9(6)",
				"name": "SYSTEM BACKUP | REDUNDANT SECONDARY SYSTEM",
				"ugv_discussion": " UGV systems can improve continuity by maintaining a mirrored backup unit or redundant onboard computer. This secondary system should be geographically and logically separate and able to take over tasks immediately upon primary system failure.",
				"definition": "Conduct system backup by maintaining a redundant secondary system that is not collocated with the primary system and that can be activated without loss of information or disruption to operations",
				"discussion": "The effect of system backup can be achieved by maintaining a redundant secondary system that mirrors the primary system, including the replication of information. If this type of redundancy is in place and there is sufficient geographic separation between the two systems, the secondary system can also serve as the alternate processing site.",
				"techniques_id": ["NISTT011"],
				"approaches_id": ["NISTA043"]
			},
			{
				"id": "NISTC-CP-9(7)",
				"name": "SYSTEM BACKUP | DUAL AUTHORIZATION",
				"ugv_discussion": "Destruction or deletion of backup data should require authorisation from two qualified personnel, such as a mission commander and cybersecurity officer. This prevents malicious or accidental data loss when dealing with classified mission data.",
				"definition": "Enforce dual authorization for the deletion or destruction of [Assignment: organization-defined backup information].",
				"discussion": "Dual authorization ensures that deletion or destruction of backup information cannot occur unless two qualified individuals carry out the task. Individuals deleting or destroying backup information possess the skills or expertise to determine if the proposed deletion or destruction of information reflects organizational policies and procedures. Dual authorization may also be known as two-person control. To reduce the risk of collusion, organizations consider rotating dual authorization duties to other individuals.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032"]
			},
			{
				"id": "NISTC-CP-9(8)",
				"name": "SYSTEM BACKUP | CRYPTOGRAPHIC PROTECTION",
				"ugv_discussion": "Backup data from UGVs must be encrypted at rest and in transit using military-grade encryption. This prevents unauthorised access or modification, especially when backups are stored off-site or transmitted over communication networks. Key management must also be handled with access limited to authorised personnel only.",
				"definition": "Implement cryptographic mechanisms to prevent unauthorized disclosure and modification of [Assignment: organization-defined backup information",
				"discussion": "The selection of cryptographic mechanisms is based on the need to protect the confidentiality and integrity of backup information. The strength of mechanisms selected is commensurate with the security category or classification of the information. Cryptographic protection applies to system backup information in storage at both primary and alternate locations. Organizations that implement cryptographic mechanisms to protect information at rest also consider cryptographic key management solutions.",
				"techniques_id": ["NISTT005","NISTT011","NISTT013"],
				"approaches_id": ["NISTA014","NISTA041","NISTA046"]
			},
			{
				"id": "NISTC-CP-11",
				"name": "ALTERNATE COMMUNICATIONS PROTOCOLS",
				"ugv_discussion": "UGVs may support alternative communication protocols in case of jamming or system failure. These alternate protocols must be compatible with control software and tested regularly to ensure smooth transitions during real operations.",
				"definition": "Provide the capability to employ [Assignment: organization-defined alternative communications protocols] in support of maintaining continuity of operations",
				"discussion": "Contingency plans and the contingency training or testing associated with those plans incorporate an alternate communications protocol capability as part of establishing resilience in organizational systems. Switching communications protocols may affect software applications and operational aspects of systems. Organizations assess the potential side effects of introducing alternate communications protocols prior to implementation",
				"techniques_id": ["NISTT006"],
				"approaches_id": ["NISTA018","NISTA019"]
			},
			{
				"id": "NISTC-CP-12",
				"name": "SAFE MODE",
				"ugv_discussion": "When critical failures or attacks are detected, UGVs should automatically enter a safe mode. In this mode, only essential functions continue, such as low-speed mobility, minimal sensor operation, or homing routines. This prevents escalation of damage and allows recovery under controlled conditions.",
				"definition": "When [Assignment: organization-defined conditions] are detected, enter a safe mode of operation with [Assignment: organization-defined restrictions of safe mode of operation]",
				"discussion": "For systems that support critical mission and business functions—including military operations, civilian space operations, nuclear power plant operations, and air traffic control operations (especially real-time operational environments)—organizations can identify certain conditions under which those systems revert to a predefined safe mode of operation. The safe mode of operation, which can be activated either automatically or manually, restricts the operations that systems can execute when those conditions are encountered. Restriction includes allowing only selected functions to execute that can be carried out under limited power or with reduced communications bandwidth.",
				"techniques_id": ["NISTT001", "NISTT010"],
				"approaches_id": ["NISTA003", "NISTA037"]
			},
			{
				"id": "NISTC-CP-13",
				"name": "ALTERNATIVE SECURITY MECHANISMS",
				"ugv_discussion": "If primary security mechanisms, such as authentication or encryption, fail due to compromise or malfunction, UGVs should switch to predefined alternatives. For example, switching to a one-time pad or manual key can make sure operational security and mission continuity in emergency scenarios.",
				"definition": "Employ [Assignment: organization-defined alternative or supplemental security mechanisms] for satisfying [Assignment: organization-defined security functions] when the primary means of implementing the security function is unavailable or compromised.",
				"discussion": "Use of alternative security mechanisms supports system resiliency, contingency planning, and continuity of operations. To ensure mission and business continuity, organizations can implement alternative or supplemental security mechanisms. The mechanisms may be less effective than the primary mechanisms. However, having the capability to readily employ alternative or supplemental mechanisms enhances mission and business continuity that might otherwise be adversely impacted if operations had to be curtailed until the primary means of implementing the functions was restored. Given the cost and level of effort required to provide such alternative capabilities, the alternative or supplemental mechanisms are only applied to critical security capabilities provided by systems, system components, or system services. For example, an organization may issue one-time pads to senior executives, officials, and system administrators if multi-factor tokens—the standard means for achieving secure authentication—are compromised",
				"techniques_id": ["NISTT006","NISTT001"],
				"approaches_id": ["NISTA018","NISTA019", "NISTA003"]
			},
			{
				"id": "NISTC-IA-2(6)",
				"name": "IDENTIFICATION AND AUTHENTICATION | ACCESS TO ACCOUNTS – SEPARATE DEVICE",
				"ugv_discussion": "UGVs may use a separate hardware device such as a smart card or token for multi-factor authentication ensures that credentials are not stored on the same system being accessed. This prevents adversaries from capturing both factors during compromise.",
				"definition": "Implement multi-factor authentication for [Selection (one or more): local; network; remote] access to [Selection (one or more): privileged accounts; non-privileged accounts] such that: \n (a) One of the factors is provided by a device separate from the system gaining access; and \n (b) The device meets [Assignment: organization-defined strength of mechanism requirements].",
				"discussion": "The purpose of requiring a device that is separate from the system to which the user is attempting to gain access for one of the factors during multi-factor authentication is to reduce the likelihood of compromising authenticators or credentials stored on the system. Adversaries may be able to compromise such authenticators or credentials and subsequently impersonate authorized users. Implementing one of the factors on a separate device (e.g., a hardware token), provides a greater strength of mechanism and an increased level of assurance in the authentication process",
				"techniques_id": ["NISTT006", "NISTT004"],
				"approaches_id": ["NISTA022", "NISTA010", "NISTA012"]
			},
			{
				"id": "NISTC-IA-2(13)",
				"name": "IDENTIFICATION AND AUTHENTICATION | OUT-OF-BAND AUTHENTICATION",
				"ugv_discussion": "Out-of-band authentication adds an extra layer of protection for UGV command systems. It uses a separate communication channel to verify sensitive actions or access. This helps detect and block man-in-the-middle attacks, especially when operating in high-threat environments or over unstable communication networks.",
				"definition": "Implement the following out-of-band authentication mechanisms under [Assignment: organization-defined conditions]: [Assignment: organization-defined out-of-band authentication]",
				"discussion": "Out-of-band authentication refers to the use of two separate communication paths to identify and authenticate users or devices to an information system. The first path (i.e., the in-band path) is used to identify and authenticate users or devices and is generally the path through which information flows. The second path (i.e., the out-of-band path) is used to independently verify the authentication and/or requested action. For example, a user authenticates via a notebook computer to a remote server to which the user desires access and requests some action of the server via that communication path. Subsequently, the server contacts the user via the user’s cell phone to verify that the requested action originated from the user. The user may confirm the intended action to an individual on the telephone or provide an authentication code via the telephone. Out-of-band authentication can be used to mitigate actual or suspected “man-in the-middle” attacks. The conditions or criteria for activation include suspicious activities, new threat indicators, elevated threat levels, or the impact or classification level of information in requested transactions",
				"techniques_id": ["NISTT006", "NISTT004", "NISTT012"],
				"approaches_id": ["NISTA022", "NISTA010","NISTA012","NISTA044"]
			},
			{
				"id": "NISTC-IA-3(1)",
				"name": "DEVICE IDENTIFICATION AND AUTHENTICATION | CRYPTOGRAPHIC BIDIRECTIONAL AUTHENTICATION",
				"ugv_discussion": "Cryptographic bidirectional authentication should be used when UGVs establish remote connections with mission control, other UGVs, or external network. This ensures both sides validate each other's identity before any data is exchanged to prevent rogue devices.",
				"definition": "Authenticate [Assignment: organization-defined devices and/or types of devices] before establishing [Selection (one or more): local; remote; network] connection using bidirectional authentication that is cryptographically based.",
				"discussion": "A local connection is a connection with a device that communicates without the use of a network. A network connection is a connection with a device that communicates through a network. A remote connection is a connection with a device that communicates through an external network. Bidirectional authentication provides stronger protection to validate the identity of other devices for connections that are of greater risk.",
				"techniques_id": ["NISTT005","NISTT013"],
				"approaches_id": ["NISTA014", "NISTA046"]
			},
			{
				"id": "NISTC-IA-10",
				"name": "ADAPTIVE AUTHENTICATION",
				"ugv_discussion": "UGVs should apply adaptive authentication when abnormal access patterns or behaviours are detected. For example, if a user accesses sensitive mission logs from an unusual location or time, the system should request additional credentials.",
				"definition": "Require individuals accessing the system to employ [Assignment: organization-defined supplemental authentication techniques or mechanisms] under specific [Assignment: organization-defined circumstances or situations]",
				"discussion": "Adversaries may compromise individual authentication mechanisms employed by organizations and subsequently attempt to impersonate legitimate users. To address this threat, organizations may employ specific techniques or mechanisms and establish protocols to assess suspicious behavior. Suspicious behavior may include accessing information that individuals do not typically access as part of their duties, roles, or responsibilities; accessing greater quantities of information than individuals would routinely access; or attempting to access information from suspicious network addresses. When pre-established conditions or triggers occur, organizations can require individuals to provide additional authentication information. Another potential use  for adaptive authentication is to increase the strength of mechanism based on the number or types of records being accessed. Adaptive authentication does not replace and is not used to avoid the use of multi-factor authentication mechanisms but can augment implementations of multi-factor authentication",
				"techniques_id": ["NISTT001", "NISTT009","NISTT004"],
				"approaches_id": ["NISTA003","NISTA034", "NISTA010"]
			},
			{
				"id": "NISTC-IR-4(2)",
				"name": "INCIDENT HANDLING | DYNAMIC RECONFIGURATION",
				"ugv_discussion": "Dynamic reconfiguration is essential for UGVs under cyber attack. The system should be capable of changing firewall rules, driving mode, disconnecting or isolating affected ECUs in real-time. It helps contain threats and maintain mission performance during partial compromise.",
				"definition": "Include the following types of dynamic reconfiguration for [Assignment: organization-defined system components] as part of the incident response capability: [Assignment: organization-defined types of dynamic reconfiguration].", 
				"discussion": "Dynamic reconfiguration includes changes to router rules, access control lists, intrusion detection or prevention system parameters, and filter rules for guards or firewalls. Organizations may perform dynamic reconfiguration of systems to stop attacks, misdirect attackers, and isolate components of systems, thus limiting the extent of the damage from breaches or compromises. Organizations include specific time frames for achieving the reconfiguration of systems in the definition of the reconfiguration capability, considering the potential need for rapid response to effectively address cyber threats.",
				"techniques_id": ["NISTT001", "NISTT007"],
				"approaches_id": ["NISTA001", "NISTA024"]
			},
			{
				"id": "NISTC-IR-4(3)",
				"name": "INCIDENT HANDLING | CONTINUITY OF OPERATIONS",
				"ugv_discussion": "UGVs must maintain mission functionality during cyber incidents. The system should fall back to predefined safe modes such as manual override, degraded operation, or autonomous rerouting. These fallback modes ensure the UGV can complete critical tasks even when normal functions are disrupted.",
				"definition": "Identify [Assignment: organization-defined classes of incidents] and take the following actions in response to those incidents to ensure continuation of organizational mission and business functions: [Assignment: organization-defined actions to take in response to classes of incidents].",
				"discussion": "Classes of incidents include malfunctions due to design or implementation errors and omissions, targeted malicious attacks, and untargeted malicious attacks. Incident response actions include orderly system degradation, system shutdown, fall back to manual mode or activation of alternative technology whereby the system operates differently, employing deceptive measures, alternate information flows, or operating in a mode that is reserved for when systems are under attack. Organizations consider whether continuity of operations requirements during an incident conflict with the capability to automatically disable the system as specified as part of IR-4(5).",
				"techniques_id": ["NISTT001", "NISTT004"],
				"approaches_id": ["NISTA001", "NISTA003", "NISTA012"]
			},
			{
				"id": "NISTC-IR-4(4)",
				"name": "INCIDENT HANDLING | INFORMATION CORRELATION",
				"ugv_discussion": "UGV systems should correlate incident data across sensors, ECUs, communications logs, and external sources to detect complex or hidden attacks. A single event may seem benign, but combining multiple data points can reveal coordinated threats. This helps operators respond faster and more effectively to advanced attacks.",
				"definition": "Correlate incident information and individual incident responses to achieve an organization-wide perspective on incident awareness and response.",
				"discussion": "Sometimes, a threat event, such as a hostile cyber-attack, can only be observed by bringing together information from different sources, including various reports and reporting procedures established by organizations.",
				"techniques_id": ["NISTT004","NISTT002","NISTT003"],
				"approaches_id": ["NISTA012","NISTA005","NISTA008"]
			},
			{
				"id": "NISTC-IR-4(9)",
				"name": "INCIDENT HANDLING | DYNAMIC RESPONSE CAPABILITY",
				"ugv_discussion": "UGVs need to dynamically activate new defence responses when under attack. This may includes fail-safe system, automatocally takeover the control or alternative communication modes.", 
				"definition": "Employ [Assignment: organization-defined dynamic response capabilities] to respond to incidents.",
				"discussion": "The dynamic response capability addresses the timely deployment of new or replacement organizational capabilities in response to incidents. This includes capabilities implemented at the mission and business process level and at the system level.",
				"techniques_id": ["NISTT001"],
				"approaches_id": ["NISTA001"]
			},
			{
				"id": "NISTC-IR-4(10)",
				"name": "INCIDENT HANDLING | SUPPLY CHAIN COORDINATION",
				"ugv_discussion": "When supply chain-related incidents affect UGV systems, coordination with developers and vendors is required. This ensures rapid identification of compromised components or software.",
				"definition": "Coordinate incident handling activities involving supply chain events with other organizations involved in the supply chain.",
				"discussion": "Organizations involved in supply chain activities include product developers, system integrators, manufacturers, packagers, assemblers, distributors, vendors, and resellers. Supply chain incidents can occur anywhere through or to the supply chain and include compromises or breaches that involve primary or sub-tier providers, information technology products, system components, development processes or personnel, and distribution processes or warehousing facilities. Organizations consider including processes for protecting and sharing incident information in information exchange agreements and their obligations for reporting incidents to government oversight bodies (e.g., Federal Acquisition Security Council).",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA012"]
			},
			{
				"id": "NISTC-IR-4(11)",
				"name": "INCIDENT HANDLING | INTEGRATED INCIDENT RESPONSE TEAM",
				"ugv_discussion": "UGV systems should maintain a deployable incident response team. The team must handle forensic analysis, intrusion containment, and rapid recovery actions. Integrating technical experts ensures quick and effective handling of cyber events in field or remote operations.",
				"definition": "Establish and maintain an integrated incident response team that can be deployed to any location identified by the organization in [Assignment: organization-defined time period]",
				"discussion": "An integrated incident response team is a team of experts that assesses, documents, and responds to incidents so that organizational systems and networks can recover quickly and implement the necessary controls to avoid future incidents. Incident response team personnel include forensic and malicious code analysts, tool developers, systems security and privacy engineers, and real-time operations personnel. The incident handling capability includes performing rapid forensic preservation of evidence and analysis of and response to intrusions. For some organizations, the incident response team can be a cross-organizational entity. \n An integrated incident response team facilitates information sharing and allows organizational personnel (e.g., developers, implementers, and operators) to leverage team knowledge of the threat and implement defensive measures that enable organizations to deter intrusions more effectively. Moreover, integrated teams promote the rapid detection of intrusions, the development of appropriate mitigations, and the deployment of effective defensive measures. For example, when an intrusion is detected, the integrated team can rapidly develop an appropriate response for operators to implement, correlate the new incident with information on past intrusions, and augment ongoing cyber intelligence development. Integrated incident response teams are better able to identify adversary tactics, techniques, and procedures that are linked to the operations tempo or specific mission and business functions and to define responsive actions in a way that does not disrupt those mission and business functions. Incident response teams can be distributed within organizations to make the capability resilient.",
				"techniques_id": ["NISTT001", "NISTT002","NISTT004"],
				"approaches_id": ["NISTA001", "NISTA003","NISTA006", "NISTA012"]
			},
			{
				"id": "NISTC-IR-4(12)",
				"name": "INCIDENT HANDLING | MALICIOUS CODE AND FORENSIC ANALYSIS",
				"ugv_discussion": "When UGVs are compromised, forensic analysis of malicious code should be performed in a secure lab environment. This helps identify attacker behaviour and prepares countermeasures.",
				"definition": "Analyze malicious code and/or other residual artifacts remaining in the system after the incident.",
				"discussion": "When conducted carefully in an isolated environment, analysis of malicious code and other residual artifacts of a security incident or breach can give the organization insight into adversary tactics, techniques, and procedures. It can also indicate the identity or some defining characteristics of the adversary. In addition, malicious code analysis can help the organization develop responses to future incidents.",
				"techniques_id": ["NISTT002","NISTT012"],
				"approaches_id": ["NISTA006","NISTA044"]
			},
			{
				"id": "NISTC-IR-4(13)",
				"name": "INCIDENT HANDLING | BEHAVIOR ANALYSIS",
				"ugv_discussion": "UGVs should monitor for abnormal system behaviour that may indicate an attack. This includes abnormal commands, timing anomalies, or resource scans. Analysing these behaviours gives insight into attacker strategies and helps fine-tune automated defences.",
				"definition": "Analyze anomalous or suspected adversarial behavior in or related to [Assignment: organization-defined environments or resources].",
				"discussion": "f the organization maintains a deception environment, an analysis of behaviors in that environment, including resources targeted by the adversary and timing of the incident or event, can provide insight into adversarial tactics, techniques, and procedures. External to a deception environment, the analysis of anomalous adversarial behavior (e.g., changes in system performance or usage patterns) or suspected behavior (e.g., changes in searches for the location of specific resources) can give the organization such insight.",
				"techniques_id": ["NISTT002","NISTT013"],
				"approaches_id": ["NISTA004","NISTA048"]
			},
			{
				"id": "NISTC-IR-5",
				"name": "INCIDENT MONITORING",
				"ugv_discussion": "Military UGVs must log all security-related incidents, including their origin, status, and impact rating. These records support forensic analysis and enable pattern recognition across operations. Regular monitoring ensures early detection and improves long-term resilience.",
				"definition": "Track and document incidents.",
				"discussion": "Documenting incidents includes maintaining records about each incident, the status of the incident, and other pertinent information necessary for forensics as well as evaluating incident details, trends, and handling. Incident information can be obtained from a variety of sources, including network monitoring, incident reports, incident response teams, user complaints, supply chain partners, audit monitoring, physical access monitoring, and user and administrator reports. IR-4 provides information on the types of incidents that are appropriate for monitoring.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004","NISTA006"]
			},
			{
				"id": "NISTC-MA-4(4)",
				"name": "NONLOCAL MAINTENANCE | AUTHENTICATION AND SEPARATION OF MAINTENANCE SESSIONS",
				"ugv_discussion": "For UGVs, remote maintenance must use replay resistant authentication like one-time passwords or certificates. Maintenance sessions should be separated from mission data channels or physically distinct links. This prevents session hijacking and ensures that attackers cannot use maintenance paths to gain control.",
				"definition": "Protect nonlocal maintenance sessions by: \n (a) Employing [Assignment: organization-defined authenticators that are replay resistant]; and \n (b) Separating the maintenance sessions from other network sessions with the system by either: (1) Physically separated communications paths; or (2) Logically separated communications paths.",
				"discussion": "Communications paths can be logically separated using encryption.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-PE-3(5)",
				"name": "PHYSICAL ACCESS CONTROL | TAMPER PROTECTION",
				"ugv_discussion": "Critical UGV hardware like control units and communication modules should use tamper-proof seals or coatings. This is essential to protect against sabotage or hardware-based supply chain threats in military environments.",
				"definition": "Employ [Assignment: organization-defined anti-tamper technologies] to [Selection (one or more): detect; prevent] physical tampering or alteration of [Assignment: organization-defined hardware components] within the system.",
				"discussion": "Organizations can implement tamper detection and prevention at selected hardware components or implement tamper detection at some components and tamper prevention at other components. Detection and prevention activities can employ many types of anti-tamper technologies, including tamper-detection seals and anti-tamper coatings. Anti-tamper programs help to detect hardware alterations through counterfeiting and other supply chain-related risks.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-PE-6",
				"name": "MONITORING PHYSICAL ACCESS",
				"ugv_discussion": "Military UGV deployment sites should monitor physical access using cameras, sensors, or personnel. Access logs must be reviewed periodically or during suspected security events. Coordination with cyber incident teams allows a combined response to both physical and digital intrusions.",
				"definition": "a. Monitor physical access to the facility where the system resides to detect and respond to physical security incidents; \n b. Review physical access logs [Assignment: organization-defined frequency] and upon occurrence of [Assignment: organization-defined events or potential indications of events]; and \n c. Coordinate results of reviews and investigations with the organizational incident response capability",
				"discussion": "hysical access monitoring includes publicly accessible areas within organizational facilities. Examples of physical access monitoring include the employment of guards, video surveillance equipment (i.e., cameras), and sensor devices. Reviewing physical access logs can help identify suspicious activity, anomalous events, or potential threats. The reviews can be supported by audit logging controls, such as AU-2, if the access logs are part of an automated system. Organizational incident response capabilities include investigations of physical security incidents and responses to the incidents. Incidents include security violations or suspicious physical access activities. Suspicious physical access activities include accesses outside of normal work hours, repeated accesses to areas not normally accessed, accesses for unusual lengths of time, and out-of-sequence accesses.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004"]
			},
			{
				"id": "NISTC-PE-6(2)",
				"name": "MONITORING PHYSICAL ACCESS | AUTOMATED INTRUSION RECOGNITION AND RESPONSES",
				"ugv_discussion": "UGV storage and operation areas should use automated systems to detect unauthorised entry. Alerts can trigger alarms, lock entry points, or send notifications to command.",
				"definition": "Recognize [Assignment: organization-defined classes or types of intrusions] and initiate [Assignment: organization-defined response actions] using [Assignment: organization-defined automated mechanisms].",
				"discussion": "Response actions can include notifying selected organizational personnel or law enforcement personnel. Automated mechanisms implemented to initiate response actions include system alert notifications, email and text messages, and activating door locking mechanisms. Physical access monitoring can be coordinated with intrusion detectionsystems and system monitoring capabilities to provide integrated threat coverage for the organization.",
				"techniques_id": ["NISTT002","NISTT001","NISTT004"],
				"approaches_id": ["NISTA004","NISTA003", "NISTA012"]
			},
			{
				"id": "NISTC-PE-6(4)",
				"name": "MONITORING PHYSICAL ACCESS | MONITORING PHYSICAL ACCESS TO SYSTEMS",
				"ugv_discussion": "Physical access to onboard UGV components such as CPUs and communication interfaces should be separately monitored. This adds an extra layer beyond facility access controls.",
				"definition": "Monitor physical access to the system in addition to the physical access monitoring of the facility at [Assignment: organization-defined physical spaces containing one or more components of the system].",
				"discussion": "Monitoring physical access to systems provides additional monitoring for those areas within facilities where there is a concentration of system components, including server rooms, media storage areas, and communications centers. Physical access monitoring can be coordinated with intrusion detection systems and system monitoring capabilities to provide comprehensive and integrated threat coverage for the organization",
				"techniques_id": ["NISTT002","NISTT004"],
				"approaches_id": ["NISTA004", "NISTA010"]
			},
			{
				"id": "NISTC-PE-9(1)",
				"name": "POWER EQUIPMENT AND CABLING | REDUNDANT CABLING",
				"ugv_discussion": "UGVs may include physically separated redundant power lines for critical systems. This ensures continued operation if one power path is damaged in the field. Separation distance can prevent both lines being affected by a single threat or impact.",
				"definition": "Employ redundant power cabling paths that are physically separated by [Assignment: organization-defined distance].",
				"discussion": "Physically separate and redundant power cables ensure that power continues to flow in the event that one of the cables is cut or otherwise damaged.",
				"techniques_id": ["NISTT011"],
				"approaches_id": ["NISTA043"]
			},
			{
				"id": "NISTC-PE-11(1)",
				"name": "EMERGENCY POWER | ALTERNATE POWER SUPPLY – MINIMAL OPERATIONAL CAPABILITY",
				"ugv_discussion": "In case of power loss, UGVs must switch to a backup power supply to maintain minimal control. This allows safe shutdown or emergency operation. The backup should activate automatically to avoid mission failure or system damage.",
				"definition": "Provide an alternate power supply for the system that is activated [Selection: manually; automatically] and that can maintain minimally required operational capability in the event of an extended loss of the primary power source",
				"discussion": "rovision of an alternate power supply with minimal operating capability can be satisfied by accessing a secondary commercial power supply or other external power supply.",
				"techniques_id": ["NISTT011"],
				"approaches_id": ["NISTA043"]
			},
			{
				"id": "NISTC-PE-11(2)",
				"name": "EMERGENCY POWER | ALTERNATE POWER SUPPLY – SELF-CONTAINED",
				"ugv_discussion": "UGVs should carry a self-contained power source, like an internal battery or generator.  This backup must support full or minimal operation without needing external supply. It ensures independence in remote or hostile areas where resupply is uncertain.",
				"definition": "Provide an alternate power supply for the system that is activated [Selection: manually; automatically] and that is: \n (a) Self-contained; \n (b) Not reliant on external power generation; and \n (c) Capable of maintaining [Selection: minimally required operational capability; full operational capability] in the event of an extended loss of the primary power source.",
				"discussion": "The provision of a long-term, self-contained power supply can be satisfied by using one or more generators with sufficient capacity to meet the needs of the organization.",
				"techniques_id": ["NISTT011"],
				"approaches_id": ["NISTA043"]
			},
			{
				"id": "NISTC-PE-17",
				"name": "ALTERNATE WORK SITE",
				"ugv_discussion": "UGV operations should define alternate sites for mission coordination during disruptions. These sites must apply security controls and allow secure communications with cybersecurity personnel. This ensures mission continuity even if the main site is compromised or unavailable.", 
				"definition": "a. Determine and document the [Assignment: organization-defined alternate work sites] allowed for use by employees; \n b. Employ the following controls at alternate work sites: [Assignment: organization-defined controls]; \n c. Assess the effectiveness of controls at alternate work sites; and d. Provide a means for employees to communicate with information security and privacy personnel in case of incidents.",
				"discussion": "Alternate work sites include government facilities or the private residences of employees. While distinct from alternative processing sites, alternate work sites can provide readily available alternate locations during contingency operations. Organizations can define different sets of controls for specific alternate work sites or types of sites depending on the work-related activities conducted at the sites. Implementing and assessing the effectiveness of organization-defined controls and providing a means to communicate incidents at alternate work sites supports the contingency planning activities of organizations.",
				"techniques_id": ["NISTT011"],
				"approaches_id": ["NISTA043"]
			},
			{
				"id": "NISTC-PL-8(1)",
				"name": "SECURITY AND PRIVACY ARCHITECTURE | DEFENSE IN DEPTH",
				"definition": "Design the security and privacy architectures for the system using a defense-in-depth approach that: \n (a) Allocates [Assignment: organization-defined controls] to [Assignment: organization-defined locations and architectural layers]; and \n (b) Ensures that the allocated controls operate in a coordinated and mutually reinforcing manner.",
				"discussion": "Organizations strategically allocate security and privacy controls in the security and privacy architectures so that adversaries must overcome multiple controls to achieve their objective. Requiring adversaries to defeat multiple controls makes it more difficult to attack information resources by increasing the work factor of the adversary; it also increases the likelihood of detection. The coordination of allocated controls is essential to ensure that an attack that involves one control does not create adverse, unintended consequences by interfering with other controls. Unintended consequences can include system lockout and cascading alarms. The placement of controls in systems and organizations is an important activity that requires thoughtful analysis. The value of organizational assets is an important consideration in providing additional layering. Defense-in-depth architectural approaches include modularity and layering (see SA-8(3)), separation of system and user functionality (see SC-2), and security function isolation (see SC-3).",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA010"]
			},
			{
				"id": "NISTC-PL-8(2)",
				"name": "SECURITY AND PRIVACY ARCHITECTURE | SUPPLIER DIVERSITY",
				"definition": "Require that [Assignment: organization-defined controls] allocated to [Assignment: organization-defined locations and architectural layers] are obtained from different suppliers.",
				"discussion": "nformation technology products have different strengths and weaknesses. Providing a broad spectrum of products complements the individual offerings. For example, vendors offering malicious code protection typically update their products at different times, often developing solutions for known viruses, Trojans, or worms based on their priorities and development schedules. By deploying different products at different locations, there is an increased likelihood that at least one of the products will detect the malicious code. With respect to privacy, vendors may offer products that track personally identifiable information in systems. Products may use different tracking methods. Using multiple products may result in more assurance that personally identifiable information is inventoried.",
				"techniques_id": ["NISTT006"],
				"approaches_id": ["NISTA023"]
			},
			{
				"id": "NISTC-PM-7(1)",
				"name": "ENTERPRISE ARCHITECTURE | OFFLOADING",
				"definition": "Offload [Assignment: organization-defined non-essential functions or services] to other systems, system components, or an external provider.",
				"discussion": "Not every function or service that a system provides is essential to organizational mission or business functions. Printing or copying is an example of a non-essential but supporting service for an organization. Whenever feasible, such supportive but non-essential functions or services are not co-located with the functions or services that support essential mission or business functions. Maintaining such functions on the same system or system component increases the attack surface of the organization’s mission-essential functions or services. Moving supportive but non-essential functions to a non-critical system, system component, or external provider can also increase efficiency by putting those functions or services under the control of individuals or providers who are subject matter experts in the functions or services",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA036"]
			},
			{
				"id": "NISTC-PM-16",
				"name": "THREAT AWARENESS PROGRAM",
				"definition": "Implement a threat awareness program that includes a cross-organization information-sharing capability for threat intelligence",
				"discussion": "Because of the constantly changing and increasing sophistication of adversaries, especially the advanced persistent threat (APT), it may be more likely that adversaries can successfully breach or compromise organizational systems. One of the best techniques to address this concern is for organizations to share threat information, including threat events (i.e., tactics, techniques, and procedures) that organizations have experienced, mitigations that organizations have found are effective against certain types of threats, and threat intelligence (i.e., indications and warnings about threats). Threat information sharing may be bilateral or multilateral. Bilateral threat sharing includes government-to-commercial and government-to-government cooperatives. Multilateral threat sharing includes organizations taking part in threat-sharing consortia. Threat information may require special agreements and protection, or it may be freely shared",
				"techniques_id": ["NISTT003"],
				"approaches_id": ["NISTA008"]
			},
			{
				"id": "NISTC-PM-16(1)",
				"name": "THREAT AWARENESS PROGRAM | AUTOMATED MEANS FOR SHARING THREAT INTELLIGENCE",
				"definition": "Employ automated mechanisms to maximize the effectiveness of sharing threat intelligence information",
				"discussion": "To maximize the effectiveness of monitoring, it is important to know what threat observables and indicators the sensors need to be searching for. By using well- established frameworks, services, and automated tools, organizations improve their ability to rapidly share and feed the relevant threat detection signatures into monitoring tools.",
				"techniques_id": ["NISTT003"],
				"approaches_id": ["NISTA008"]
			},
			{
				"id": "NISTC-PM-30(1)",
				"name": "SUPPLY CHAIN RISK MANAGEMENT | SUPPLIERS OF CRITICAL OR MISSION-ESSENTIAL ITEMS",
				"definition": "Identify, prioritize, and assess suppliers of critical or mission-essential technologies, products, and services.",
				"discussion": "The identification and prioritization of suppliers of critical or mission-essential technologies, products, and services is paramount to the mission/business success of organizations. The assessment of suppliers is conducted using supplier reviews (see SR-6) and supply chain risk assessment processes (see RA-3(1)). An analysis of supply chain risk can help an organization identify systems or components for which additional supply chain risk mitigations are required.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA047"]
			},
			{
				"id": "NISTC-PM-31",
				"name": "CONTINUOUS MONITORING STRATEGY",
				"definition": "Develop an organization-wide continuous monitoring strategy and implement continuous monitoring programs that include: \n a. Establishing the following organization-wide metrics to be monitored: [Assignment: organization-defined metrics]; \n b. Establishing [Assignment: organization-defined frequencies] for monitoring and [Assignment: organization-defined frequencies] for assessment of control effectiveness; \n c. Ongoing monitoring of organizationally-defined metrics in accordance with the continuous monitoring strategy; \n d. Correlation and analysis of information generated by control assessments and monitoring; \n e. Response actions to address results of the analysis of control assessment and monitoring information; and \n f. Reporting the security and privacy status of organizational systems to [Assignment:organization-defined personnel or roles] [Assignment: organization-defined frequency]",
				"discussion": "Continuous monitoring at the organization level facilitates ongoing awareness of the security and privacy posture across the organization to support organizational risk management decisions. The terms “continuous” and “ongoing” imply that organizations assess and monitor their controls and risks at a frequency sufficient to support risk-based decisions. Different types of controls may require different monitoring frequencies. The results of continuous monitoring guide and inform risk response actions by organizations. Continuous monitoring programs allow organizations to maintain the authorizations of systems and common controls in highly dynamic environments of operation with changing mission and business needs, threats, vulnerabilities, and technologies. Having access to security- and privacy-related information on a continuing basis through reports and dashboards gives organizational officials the capability to make effective, timely, and informed risk management decisions, including ongoing authorization decisions. To further facilitate security and privacy risk management, organizations consider aligning organization-defined monitoring metrics with organizational risk tolerance as defined in the risk management strategy. Monitoring requirements, including the need for monitoring, may be referenced in other controls and control enhancements such as, AC-2g, AC-2(7), AC-2(12)(a), AC-2(7)(b), AC-2(7)(c), AC-17(1), AT-4a, AU-13, AU-13(1), AU-13(2), CA-7, CM-3f, CM-6d, CM-11c, IR-5, MA-2b, MA-3a, MA-4a, PE-3d, PE-6, PE-14b, PE-16, PE-20, PM-6, PM-23, PS-7e, SA-9c, SC- 5(3)(b), SC-7a, SC-7(24)(b), SC-18b, SC-43b, SI-4",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004","NISTA005"]
			},
			{
				"id": "NISTC-PM-32",
				"name": "PURPOSING",
				"definition": "Analyze [Assignment: organization-defined systems or systems components] supporting mission essential services or functions to ensure that the information resources are being used consistent with their intended purpose.",
				"discussion": "Analyze [Assignment: organization-defined systems or systems components] supporting mission essential services or functions to ensure that the information resources are being used consistent with their intended purpose.",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA035"]
			},
			{
				"id": "NISTC-RA-3(2)",
				"name": "RISK ASSESSMENT | USE OF ALL-SOURCE INTELLIGENCE",
				"definition": "Use all-source intelligence to assist in the analysis of risk",
				"discussion": "Organizations employ all-source intelligence to inform engineering, acquisition, and risk management decisions. All-source intelligence consists of information derived from all available sources, including publicly available or open-source information, measurement and signature intelligence, human intelligence, signals intelligence, and imagery intelligence. All-source intelligence is used to analyze the risk of vulnerabilities (both intentional and unintentional) from development, manufacturing, and delivery processes, people, and the environment. The risk analysis may be performed on suppliers at multiple tiers in the supply chain sufficient to manage risks. Organizations may develop agreements to share all-source intelligence information or resulting decisions with other organizations, as appropriate.",
				"techniques_id": ["NISTT003"],
				"approaches_id": ["NISTA008"]
			},
			{
				"id": "NISTC-RA-3(3)",
				"name": "RISK ASSESSMENT | DYNAMIC THREAT AWARENESS",
				"definition": "Determine the current cyber threat environment on an ongoing basis using [Assignment: organization-defined means]",
				"discussion": "The threat awareness information that is gathered feeds into the organization’s information security operations to ensure that procedures are updated in response to the changing threat environment. For example, at higher threat levels, organizations may change the privilege or authentication thresholds required to perform certain operations.",
				"techniques_id": ["NISTT003", "NISTT001"],
				"approaches_id": ["NISTA008", "NISTA003"]
			},
			{
				"id": "NISTC-RA-3(4)",
				"name": "RISK ASSESSMENT | PREDICTIVE CYBER ANALYTICS",
				"definition": "Employ the following advanced automation and analytics capabilities to predict and identify risks to [Assignment: organization-defined systems or system components]: [Assignment: organization-defined advanced automation and analytics capabilities].",
				"discussion": "A properly resourced Security Operations Center (SOC) or Computer Incident Response Team (CIRT) may be overwhelmed by the volume of information generated by the proliferation of security tools and appliances unless it employs advanced automation and analytics to analyze the data. Advanced automation and analytics capabilities are typically supported by artificial intelligence concepts, including machine learning. Examples include Automated Threat Discovery and Response (which includes broad-based collection, context-based analysis, and adaptive response capabilities), automated workflow operations, and machine assisted decision tools. Note, however, that sophisticated adversaries may be able to extract information related to analytic parameters and retrain the machine learning to classify malicious activity as benign. Accordingly, machine learning is augmented by human monitoring to ensure that sophisticated adversaries are not able to conceal their activities.",
				"techniques_id": ["NISTT003"],
				"approaches_id": ["NISTA008"]
			},
			{
				"id": "NISTC-RA-5(4)",
				"name": "VULNERABILITY MONITORING AND SCANNING | DISCOVERABLE INFORMATION",
				"definition": "Determine information about the system that is discoverable and take [Assignment: organization-defined corrective actions].",
				"discussion": "Discoverable information includes information that adversaries could obtain without compromising or breaching the system, such as by collecting information that the system is exposing or by conducting extensive web searches. Corrective actions include notifying appropriate organizational personnel, removing designated information, or changing the system to make the designated information less relevant or attractive to adversaries. This enhancement excludes intentionally discoverable information that may be part of a decoy capability (e.g., honeypots, honeynets, or deception nets) deployed by the organization.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004"]
			},
			{
				"id": "NISTC-RA-5(5)",
				"name": "VULNERABILITY MONITORING AND SCANNING | PRIVILEGED ACCESS",
				"definition": "Implement privileged access authorization to [Assignment: organization-defined system components] for [Assignment: organization-defined vulnerability scanning activities].",
				"discussion": "In certain situations, the nature of the vulnerability scanning may be more intrusive, or the system component that is the subject of the scanning may contain classified or controlled unclassified information, such as personally identifiable information. Privileged access authorization to selected system components facilitates more thorough vulnerability scanning and protects the sensitive nature of such scanning",
				"techniques_id": ["NISTT002", "NISTT009"],
				"approaches_id": ["NISTA004", "NISTA033"]
			},
			{ 
				"id": "NISTC-RA-5(6)",
				"name": "VULNERABILITY MONITORING AND SCANNING | AUTOMATED TREND ANALYSES",
				"definition": "Compare the results of multiple vulnerability scans using [Assignment: organization-defined automated mechanisms].",
				"discussion": "Using automated mechanisms to analyze multiple vulnerability scans over time can help determine trends in system vulnerabilities and identify patterns of attack.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA005"]
			},
			{
				"id": "NISTC-RA-5(8)",
				"name": "VULNERABILITY MONITORING AND SCANNING | REVIEW HISTORIC AUDIT LOGS",
				"definition": "Review historic audit logs to determine if a vulnerability identified in a [Assignment: organization-defined system] has been previously exploited within an [Assignment: organization-defined time period]",
				"discussion": "Reviewing historic audit logs to determine if a recently detected vulnerability in a system has been previously exploited by an adversary can provide important information for forensic analyses. Such analyses can help identify, for example, the extent of a previous intrusion, the trade craft employed during the attack, organizational information exfiltrated or modified, mission or business capabilities affected, and the duration of the attack.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA005"]
			},
			{
				"id": "NISTC-RA-5(10)", 
				"name": "VULNERABILITY MONITORING AND SCANNING | CORRELATE SCANNING INFORMATION",
				"definition": "Correlate the output from vulnerability scanning tools to determine the presence of multi-vulnerability and multi-hop attack vectors.",
				"discussion": "An attack vector is a path or means by which an adversary can gain access to a system in order to deliver malicious code or exfiltrate information. Organizations can use attack trees to show how hostile activities by adversaries interact and combine to produce adverse impacts or negative consequences to systems and organizations. Such information, together with correlated data from vulnerability scanning tools, can provide greater clarity regarding multi-vulnerability and multi-hop attack vectors. The correlation of vulnerability scanning information is especially important when organizations are transitioning from older technologies to newer technologies (e.g., transitioning from IPv4 to IPv6 network protocols). During such transitions, some system components may inadvertently be unmanaged and create opportunities for adversary exploitation.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA005"]
			},
			{
				"id": "NISTC-RA-9",
				"name": "CRITICALITY ANALYSIS",
				"definition": "Identify critical system components and functions by performing a criticality analysis for [Assignment: organization-defined systems, system components, or system services] at [Assignment: organization-defined decision points in the system development life cycle].",
				"discussion": "Not all system components, functions, or services necessarily require significant protections. For example, criticality analysis is a key tenet of supply chain risk management and informs the prioritization of protection activities. The identification of critical system components and functions considers applicable laws, executive orders, regulations, directives, policies, standards, system functionality requirements, system and component interfaces, and system and component dependencies. Systems engineers conduct a functional decomposition of a system to identify mission-critical functions and components. The functional decomposition includes the identification of organizational missions supported by the system, decomposition into the specific functions to perform those missions, and traceability to the hardware, software, and firmware components that implement those functions, including when the functions are shared by many components within and external to the system. \n The operational environment of a system or a system component may impact the criticality, including the connections to and dependencies on cyber-physical systems, devices, system-of-systems, and outsourced IT services. System components that allow unmediated access to critical system components or functions are considered critical due to the inherent vulnerabilities that such components create. Component and function criticality are assessed in terms of the impact of a component or function failure on the organizational missions that are supported by the system that contains the components and functions. \n Criticality analysis is performed when an architecture or design is being developed, modified, or upgraded. If such analysis is performed early in the system development life cycle, organizations may be able to modify the system design to reduce the critical nature of these components and functions, such as by adding redundancy or alternate paths into the system design. Criticality analysis can also influence the protection measures required by development contractors. In addition to criticality analysis for systems, system components, and system services, criticality analysis of information is an important consideration. Such analysis is conducted as part of security categorization in RA-2.",
				"techniques_id": ["NISTT003", "NISTT010"],
				"approaches_id": ["NISTA009", "NISTA036"]
			},
			{
				"id": "NISTC-RA-10",
				"name": "THREAT HUNTING",
				"definition": "a. Establish and maintain a cyber threat hunting capability to: (1) Search for indicators of compromise in organizational systems; and (2) Detect, track, and disrupt threats that evade existing controls; and \n b. Employ the threat hunting capability [Assignment: organization-defined frequency].",
				"discussion": "Threat hunting is an active means of cyber defense in contrast to traditional protection measures, such as firewalls, intrusion detection and prevention systems, quarantining malicious code in sandboxes, and Security Information and Event Management technologies and systems. Cyber threat hunting involves proactively searching organizational systems, networks, and infrastructure for advanced threats. The objective is to track and disrupt cyber adversaries as early as possible in the attack sequence and to measurably improve the speed and accuracy of organizational responses. Indications of compromise include unusual network traffic, unusual file changes, and the presence of malicious code. Threat hunting teams leverage existing threat intelligence and may create new threat intelligence, which is shared with peer organizations, Information Sharing and Analysis Organizations (ISAO), Information Sharing and Analysis Centers (ISAC), and relevant government departments and agencies.",
				"techniques_id": ["NISTT002", "NISTT003"],
				"approaches_id": ["NISTA004", "NISTA008"]
			},
			{
				"id": "NISTC-SA-3(2)",
				"name": "SYSTEM DEVELOPMENT LIFECYCLE | USE OF LIVE OR OPERATIONAL DATA",
				"definition": "(a) Approve, document, and control the use of live data in preproduction environments for the system, system component, or system service; and \n (b) Protect preproduction environments for the system, system component, or system service at the same impact or classification level as any live data in use within the preproduction environments.",
				"discussion": "Live data is also referred to as operational data. The use of live or operational data in preproduction (i.e., development, test, and integration) environments can result in significant risks to organizations. In addition, the use of personally identifiable information in testing, research, and training increases the risk of unauthorized disclosure or misuse of such information. Therefore, it is important for the organization to manage any additional risks that may result from the use of live or operational data. Organizations can minimize such risks by using test or dummy data during the design, development, and testing of systems, system components, and system services. Risk assessment techniques may be used to determine if the risk of using live or operational data is acceptable.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SA-8(2)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | LEAST COMMON MECHANISM",
				"definition": "Implement the security design principle of least common mechanism in [Assignment: organization-defined systems or system components].", 
				"discussion": "The principle of least common mechanism states that the amount of mechanism common to more than one user and depended on by all users is minimized [POPEK74]. Mechanism minimization implies that different components of a system refrain from using the same mechanism to access a system resource. Every shared mechanism (especially a mechanism involving shared variables) represents a potential information path between users and is designed with care to ensure that it does not unintentionally compromise security [SALTZER75]. Implementing the principle of least common mechanism helps to reduce the adverse consequences of sharing the system state among different programs. A single program that corrupts a shared state (including shared variables) has the potential to corrupt other programs that are dependent on the state. The principle of least common mechanism also supports the principle of simplicity of design and addresses the issue of covert storage channels [LAMPSON73].",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA036", "NISTA037"]
			},
			{
				"id": "NISTC-SA-8(3)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | MODULARITY AND LAYERING",
				"definition": "Implement the security design principles of modularity and layering in [Assignment: organization-defined systems or system components].",
				"discussion": "The principles of modularity and layering are fundamental across system engineering disciplines. Modularity and layering derived from functional decomposition are effective in managing system complexity by making it possible to comprehend the structure of the system. Modular decomposition, or refinement in system design, is challenging and resists general statements of principle. Modularity serves to isolate functions and related data structures into well-defined logical units. Layering allows the relationships of these units to be better understood so that dependencies are clear and undesired complexity can be avoided. The security design principle of modularity extends functional modularity to include considerations based on trust, trustworthiness, privilege, and security policy. Security-informed modular decomposition includes the allocation of policies to systems in a network, separation of system applications into processes with distinct address spaces, allocation of system policies to layers, and separation of processes into subjects with distinct privileges based on hardware-supported privilege domains.",
				"techniques_id": ["NISTT004", "NISTT010", "NISTT012"],
				"approaches_id": ["NISTA010", "NISTA039", "NISTA040", "NISTA044"]
			},
			{
				"id": "NISTC-SA-8(4)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | PARTIALLY ORDERED DEPENDENCIES",
				"definition": "Implement the security design principle of partially ordered dependencies in [Assignment: organization-defined systems or system components].",
				"discussion": "The principle of partially ordered dependencies states that the synchronization, calling, and other dependencies in the system are partially ordered. A fundamental concept in system design is layering, whereby the system is organized into well-defined, functionally related modules or components. The layers are linearly ordered with respect to inter-layer dependencies, such that higher layers are dependent on lower layers. While providing functionality to higher layers, some layers can be self-contained and not dependent on lower layers. While a partial ordering of all functions in a given system may not be possible, if circular dependencies are constrained to occur within layers, the inherent problems of circularity can be more easily managed. Partially ordered dependencies and system layering contribute significantly to the simplicity and coherency of the system design. Partially ordered dependencies also facilitate system testing and analysis.",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA011"]
			},
			{
				"id": "NISTC-SA-8(6)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | MINIMIZED SHARING",
				"definition": "Implement the security design principle of minimized sharing in [Assignment: organization-defined systems or system components].",
				"discussion": "The principle of minimized sharing states that no computer resource is shared between system components (e.g., subjects, processes, functions) unless it is absolutely necessary to do so. Minimized sharing helps to simplify system design and implementation. In order to protect user-domain resources from arbitrary active entities, no resource is shared unless that sharing has been explicitly requested and granted. The need for resource sharing can be motivated by the design principle of least common mechanism in the case of internal entities or driven by stakeholder requirements. However, internal sharing is carefully designed to avoid performance and covert storage and timing channel problems. Sharing via common mechanism can increase the susceptibility of data and information to unauthorized access, disclosure, use, or modification and can adversely affect the inherent capability provided by the system. To minimize sharing induced by common mechanisms, such mechanisms can be designed to be reentrant or virtualized to preserve separation. Moreover, the use of global data to share information is carefully scrutinized. The lack of encapsulation may obfuscate relationships among the sharing entities.",
				"techniques_id": ["NISTT010", "NISTT012"],
				"approaches_id": ["NISTA035", "NISTA037", "NISTA044"]
			},
			{
				"id": "NISTC-SA-8(7)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | REDUCED COMPLEXITY",
				"definition": "Implement the security design principle of reduced complexity in [Assignment: organization-defined systems or system components].",
				"discussion": "The principle of reduced complexity states that the system design is as simple and small as possible. A small and simple design is more understandable, more analyzable, and less prone to error. The reduced complexity principle applies to any aspect of a system, but it has particular importance for security due to the various analyses performed to obtain evidence about the emergent security property of the system. For such analyses to be successful, a small and simple design is essential. Application of the principle of reduced complexity contributes to the ability of system developers to understand the correctness and completeness of system security functions. It also facilitates the identification of potential vulnerabilities. The corollary of reduced complexity states that the simplicity of the system is directly related to the number of vulnerabilities it will contain; that is, simpler systems contain fewer vulnerabilities. An benefit of reduced complexity is that it is easier to understand whether the intended security policy has been captured in the system design and that fewer vulnerabilities are likely to be introduced during engineering development. \n An additional benefit is that any such conclusion about correctness, completeness, and the existence of vulnerabilities can be reached with a higher degree of assurance in contrast to conclusions reached in situations where the system design is inherently more complex. Transitioning from older technologies to newer technologies (e.g., transitioning from IPv4 to IPv6) may require implementing the older and newer technologies simultaneously during the transition period. This may result in a temporary increase in system complexity during the transition.",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA035", "NISTA039"]
			},
			{
				"id": "NISTC-SA-8(8)", 
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | SECURE EVOLVABILITY",
				"definition": "Implement the security design principle of secure evolvability in [Assignment: organization-defined systems or system components].",
				"discussion": "The principle of secure evolvability states that a system is developed to facilitate the maintenance of its security properties when there are changes to the system’s structure, interfaces, interconnections (i.e., system architecture), functionality, or configuration (i.e., security policy enforcement). Changes include a new, enhanced, or upgraded system capability; maintenance and sustainment activities; and reconfiguration. Although it is not possible to plan for every aspect of system evolution, system upgrades and changes can be anticipated by analyses of mission or business strategic direction, anticipated changes in the threat environment, and anticipated maintenance and sustainment needs. It is unrealistic to expect that complex systems remain secure in contexts not envisioned during development, whether such contexts are related to the operational environment or to usage. A system may be secure in some new contexts, but there is no guarantee that its emergent behavior will always be secure. It is easier to build trustworthiness into a system from the outset, and it follows that the sustainment of system trustworthiness requires planning for change as opposed to adapting in an ad hoc or non-methodical manner. The benefits of this principle include reduced vendor life cycle costs, reduced cost of ownership, improved system security, more effective management of security risk, and less risk uncertainty",
				"techniques_id": ["NISTT004", "NISTT010"],
				"approaches_id": ["NISTA012", "NISTA040"]
			},
			{
				"id": "NISTC-SA-8(13)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | MINIMIZED SECURITY ELEMENTS",
				"definition": "Implement the security design principle of minimized security elements in [Assignment: organization-defined systems or system components].", 
				"discussion": "The principle of minimized security elements states that the system does not have extraneous trusted components. The principle of minimized security elements has two aspects: the overall cost of security analysis and the complexity of security analysis. Trusted components are generally costlier to construct and implement, owing to the increased rigor of development processes. Trusted components require greater security analysis to qualify their trustworthiness. Thus, to reduce the cost and decrease the complexity of the security analysis, a system contains as few trustworthy components as possible. The analysis of the interaction of trusted components with other components of the system is one of the most important aspects of system security verification. If the interactions between components are unnecessarily complex, the security of the system will also be more difficult to ascertain than one whose internal trust relationships are simple and elegantly constructed. In general, fewer trusted components result in fewer internal trust relationships and a simpler system",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA035", "NISTA037"]
			},
			{
				"id": "NISTC-SA-8(15)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | PREDICATE PERMISSION",
				"definition": "Implement the security design principle of predicate permission in [Assignment:organization-defined systems or system components].",
				"discussion": "The principle of predicate permission states that system designers consider requiring multiple authorized entities to provide consent before a highly critical operation or access to highly sensitive data, information, or resources is allowed to proceed. [SALTZER75] originally named predicate permission the separation of privilege. It is also equivalent to separation of duty. The division of privilege among multiple parties decreases the likelihood of abuse and provides the safeguard that no single accident, deception, or breach of trust is sufficient to enable an unrecoverable action that can lead to significantly damaging effects. The design options for such a mechanism may require simultaneous action (e.g., the firing of a nuclear weapon requires two different authorized individuals to give the correct command within a small time window) or a sequence of operations where each successive action is enabled by some prior action, but no single individual is able to enable more than one action.",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA032", "NISTA033"]
			},
			{
				"id": "NISTC-SA-8(16)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | SELF-RELIANT TRUSTWORTHINESS",
				"definition": "Implement the security design principle of self-reliant trustworthiness in [Assignment: organization-defined systems or system components].",
				"discussion": "The principle of self-reliant trustworthiness states that systems minimize their reliance on other systems for their own trustworthiness. A system is trustworthy by default, and any connection to an external entity is used to supplement its function. If a system were required to maintain a connection with another external entity in order to maintain its trustworthiness, then that system would be vulnerable to malicious and non-malicious threats that could result in the loss or degradation of that connection. The benefit of the principle of self-reliant trustworthiness is that the isolation of a system will make it less vulnerable to attack. A corollary to this principle relates to the ability of the system (or system component) to operate in isolation and then resynchronize with other components when it is rejoined with them.",
				"techniques_id": ["NISTT001", "NISTT012", "NISTT013"],
				"approaches_id": ["NISTA003", "NISTA045", "NISTA046"]
			},
			{
				"id": "NISTC-SA-8(17)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | SECURE DISTRIBUTED COMPOSITION",
				"definition": "Implement the security design principle of secure distributed composition in [Assignment: organization-defined systems or system components].",
				"discussion": "The principle of secure distributed composition states that the composition of distributed components that enforce the same system security policy result in a system that enforces that policy at least as well as the individual components do. Many of the design principles for secure systems deal with how components can or should interact. The need to create or enable a capability from the composition of distributed components can magnify the relevancy of these principles. In particular, the translation of security policy from a stand-alone to a distributed system or a system-of-systems can have unexpected or emergent results. Communication protocols and distributed data consistency mechanisms help to ensure consistent policy enforcement across a distributed system. To ensure a system-wide level of assurance of correct policy enforcement, the security architecture of a distributed composite system is thoroughly analyzed.",
				"techniques_id": ["NISTT007"],
				"approaches_id": ["NISTA028"]
			},
			{
				"id": "NISTC-SA-8(18)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | TRUSTED COMMUNICATIONS CHANNELS",
				"definition": "Implement the security design principle of trusted communications channels in [Assignment: organization-defined systems or system components].",
				"discussion": "he principle of trusted communication channels states that when composing a system where there is a potential threat to communications between components (i.e., the interconnections between components), each communication channel is trustworthy to a level commensurate with the security dependencies it supports (i.e., how much it is trusted by other components to perform its security functions). Trusted communication channels are achieved by a combination of restricting access to the communication channel (to ensure an acceptable match in the trustworthiness of the endpoints involved in the communication) and employing end-to-end protections for the data transmitted over the communication channel (to protect against interception and modification and to further increase the assurance of proper end-to-end communication).",
				"techniques_id": ["NISTT009"],
				"approaches_id": ["NISTA033"]
			},
			{
				"id": "NISTC-SA-8(19)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | CONTINUOUS PROTECTION",
				"definition": "Implement the security design principle of continuous protection in [Assignment: organization-defined systems or system components].",
				"discussion": "The principle of continuous protection states that components and data used to enforce the security policy have uninterrupted protection that is consistent with the security policy and the security architecture assumptions. No assurances that the system can provide the confidentiality, integrity, availability, and privacy protections for its design capability can be made if there are gaps in the protection. Any assurances about the ability to secure a delivered capability require that data and information are continuously protected. That is, there are no periods during which data and information are left unprotected while under control of the system (i.e., during the creation, storage, processing, or communication of the data and information, as well as during system initialization, execution, failure, interruption, and shutdown). Continuous protection requires adherence to the precepts of the reference monitor concept (i.e., every request is validated by the reference monitor; the reference monitor is able to protect itself from tampering; and sufficient assurance of the correctness and completeness of the mechanism can be ascertained from analysis and testing) and the principle of secure failure and recovery (i.e., preservation of a secure state during error, fault, failure, and successful attack; preservation of a secure state during recovery to normal, degraded, or alternative operational modes). \n Continuous protection also applies to systems designed to operate in varying configurations, including those that deliver full operational capability and degraded-mode configurationsthat deliver partial operational capability. The continuous protection principle requires that changes to the system security policies be traceable to the operational need that drives the configuration and be verifiable (i.e., it is possible to verify that the proposed changes will not put the system into an insecure state). Insufficient traceability and verification may lead to inconsistent states or protection discontinuities due to the complex or undecidable nature of the problem. The use of pre-verified configuration definitions that reflect the new security policy enables analysis to determine that a transition from old to new policies is essentially atomic and that any residual effects from the old policy are guaranteed to not conflict with the new policy. The ability to demonstrate continuous protection is rooted in the clear articulation of life cycle protection needs as stakeholder security requirements.",
				"techniques_id": ["NISTT011","NISTT013"],
				"approaches_id": ["NISTA041", "NISTA046"]
			},
			{
				"id": "NISTC-SA-8(31)",
				"name": "SECURITY AND PRIVACY ENGINEERING PRINCIPLES | SECURE SYSTEM MODIFICATION",
				"definition": "Implement the security design principle of secure system modification in [Assignment: organization-defined systems or system components].", 
				"discussion": "The principle of secure system modification states that system modification maintains system security with respect to the security requirements and risk tolerance of stakeholders. Upgrades or modifications to systems can transform secure systems into systems that are not secure. The procedures for system modification ensure that if the system is to maintain its trustworthiness, the same rigor that was applied to its initial development is applied to any system changes. Because modifications can affect the ability of the system to maintain its secure state, a careful security analysis of the modification is needed prior to its implementation and deployment. This principle parallels the principle of secure evolvability.",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA040"]
			},
			{
				"id": "NISTC-SA-9(7)",
				"name": "EXTERNAL SYSTEM SERVICES | ORGANIZATION-CONTROLLED INTEGRITY CHECKING",
				"definition": "Provide the capability to check the integrity of information while it resides in the external system.",
				"discussion": "Storage of organizational information in an external system could limit visibility into the security status of its data. The ability of the organization to verify and validate the integrity of its stored data without transferring it out of the external system provides such visibility.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SA-11(2)",
				"name": "DEVELOPER TESTING AND EVALUATION | THREAT MODELING AND VULNERABILITY ANALYSIS",
				"definition": "Require the developer of the system, system component, or system service to perform threat modeling and vulnerability analyses during development and the subsequent testing and evaluation of the system, component, or service that: \n (a) Uses the following contextual information: [Assignment: organization-defined information concerning impact, environment of operations, known or assumed threats, and acceptable risk levels]; \b (b) Employs the following tools and methods: [Assignment: organization-defined tools and methods]; \n (c) Conducts the modeling and analyses at the following level of rigor: [Assignment: organization-defined breadth and depth of modeling and analyses]; and \n (d) Produces evidence that meets the following acceptance criteria: [Assignment: organization-defined acceptance criteria].",
				"discussion": "Systems, system components, and system services may deviate significantly from the functional and design specifications created during the requirements and design stages of the system development life cycle. Therefore, updates to threat modeling and vulnerability analyses of those systems, system components, and system services during development and prior to delivery are critical to the effective operation of those systems, components, and services. Threat modeling and vulnerability analyses at this stage of the system development life cycle ensure that design and implementation changes have been accounted for and that vulnerabilities created because of those changes have been reviewed and mitigated.",
				"techniques_id": ["NISTT003"],
				"approaches_id": ["NISTA008"]
			},
			{
				"id": "NISTC-SA-11(5)",
				"name": "DEVELOPER TESTING AND EVALUATION | PENETRATION TESTING",
				"definition": "Require the developer of the system, system component, or system service to perform penetration testing:\n (a) At the following level of rigor: [Assignment: organization-defined breadth and depth of testing]; and \n (b) Under the following constraints: [Assignment: organization-defined constraints].",
				"discussion": "Penetration testing is an assessment methodology in which assessors, using all available information technology product or system documentation and working under specific constraints, attempt to circumvent the implemented security and privacy features of information technology products and systems. Useful information for assessors who conduct penetration testing includes product and system design specifications, source code, and administrator and operator manuals. Penetration testing can include white-box, gray-box, or black-box testing with analyses performed by skilled professionals who simulate adversary actions. The objective of penetration testing is to discover vulnerabilities in systems, system components, and services that result from implementation errors, configuration faults, or other operational weaknesses or deficiencies. Penetration tests can be performed in conjunction with automated and manual code reviews to provide a greater level of analysis than would ordinarily be possible. When user session information and other personally identifiable information is captured or recorded during penetration testing, such information is handled appropriately to protect privacy.",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA013"]
			},
			{
				"id": "NISTC-SA-11(6)",
				"name": "DEVELOPER TESTING AND EVALUATION | ATTACK SURFACE REVIEWS",
				"definition": "Require the developer of the system, system component, or system service to perform attack surface reviews",
				"discussion": "Attack surfaces of systems and system components are exposed areas that make those systems more vulnerable to attacks. Attack surfaces include any accessible areas where weaknesses or deficiencies in the hardware, software, and firmware components provide opportunities for adversaries to exploit vulnerabilities. Attack surface reviews ensure that developers analyze the design and implementation changes to systems and mitigate attack vectors generated as a result of the changes. The correction of identified flaws includes deprecation of unsafe functions.",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA038"]
			},
			{
				"id": "NISTC-SA-15(5)",
				"name": "DEVELOPMENT PROCESS, STANDARDS, AND TOOLS | ATTACK SURFACE REDUCTION",
				"definition": "Require the developer of the system, system component, or system service to reduce attack surfaces to [Assignment: organization-defined thresholds].",
				"discussion": "Attack surface reduction is closely aligned with threat and vulnerability analyses and system architecture and design. Attack surface reduction is a means of reducing risk to organizations by giving attackers less opportunity to exploit weaknesses or deficiencies (i.e., potential vulnerabilities) within systems, system components, and system services. Attack surface reduction includes implementing the concept of layered defenses, applying the principles of least privilege and least functionality, applying secure software development practices, deprecating unsafe functions, reducing entry points available to unauthorized users, reducing the amount of code that executes, and eliminating application programming interfaces (APIs) that are vulnerable to attacks.",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA038"]
			},
			{
				"id": "NISTC-SA-17(6)",
				"name": "DEVELOPER SECURITY ARCHITECTURE AND DESIGN | STRUCTURE FOR TESTING",
				"definition": "Require the developer of the system, system component, or system service to structure security-relevant hardware, software, and firmware to facilitate testing.",
				"discussion": "Applying the security design principles in [SP 800-160-1] promotes complete, consistent, and comprehensive testing and evaluation of systems, system components, and services. The thoroughness of such testing contributes to the evidence produced to generate an effective assurance case or argument as to the trustworthiness of the system, system component, or service.",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA040"]
			},
			{
				"id": "NISTC-SA-17(8)", 
				"name": "DEVELOPER SECURITY ARCHITECTURE AND DESIGN | ORCHESTRATION",
				"definition": "Design [Assignment: organization-defined critical systems or system components] with coordinated behavior to implement the following capabilities: [Assignment: organization-defined capabilities, by system or component].",
				"discussion": "Security resources that are distributed, located at different layers or in different system elements, or are implemented to support different aspects of trustworthiness can interact in unforeseen or incorrect ways. Adverse consequences can include cascading failures, interference, or coverage gaps. Coordination of the behavior of security resources (e.g., by ensuring that one patch is installed across all resources before making a configuration change that assumes that the patch is propagated) can avert such negative  interactions.",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA012"]
			},
			{
				"id": "NISTC-SA-17(9)",
				"name": "DEVELOPER SECURITY ARCHITECTURE AND DESIGN | DESIGN DIVERSITY",
				"definition": "Use different designs for [Assignment: organization-defined critical systems or system components] to satisfy a common set of requirements or to provide equivalent functionality.",
				"discussion": " Design diversity is achieved by supplying the same requirements specification to multiple developers, each of whom is responsible for developing a variant of the system or system component that meets the requirements. Variants can be in software design, in hardware design, or in both hardware and a software design. Differences in the designs of the variants can result from developer experience (e.g., prior use of a design pattern), design style (e.g., when decomposing a required function into smaller tasks, determining what constitutes a separate task and how far to decompose tasks into sub-tasks), selection of libraries to incorporate into the variant, and the development environment (e.g., different design tools make some design patterns easier to visualize). Hardware design diversity includes making different decisions about what information to keep in analog form and what information to convert to digital form, transmitting the same information at different times, and introducing delays in sampling (temporal diversity). Design diversity is commonly used to support fault tolerance",
				"techniques_id": ["NISTT006"],
				"approaches_id": ["NISTA019"]
			},
			{
				"id": "NISTC-SA-20",
				"name": "CUSTOMIZED DEVELOPMENT OF CRITICAL COMPONENTS",
				"definition": "Reimplement or custom develop the following critical system components: [Assignment: organization-defined critical system components]",
				"discussion": "Organizations determine that certain system components likely cannot be trusted due to specific threats to and vulnerabilities in those components for which there are no viable security controls to adequately mitigate risk. Reimplementation or custom development of such components may satisfy requirements for higher assurance and is carried out by initiating changes to system components (including hardware, software, and firmware) such that the standard attacks by adversaries are less likely to succeed. In situations where no alternative sourcing is available and organizations choose not to reimplement or custom develop critical system components, additional controls can be employed. Controls include enhanced auditing, restrictions on source code and system utility access, and protection from deletion of system and application files.",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA039"]
			},
			{
				"id": "NISTC-SA-23",
				"name": "SPECIALIZATION",
				"definition": "Employ [Selection (one or more): design; modification; augmentation; reconfiguration] on [Assignment: organization-defined systems or system components] supporting mission essential services or functions to increase the trustworthiness in those systems or components.",
				"discussion": "It is often necessary for a system or system component that supports mission-essential services or functions to be enhanced to maximize the trustworthiness of the resource. Sometimes this enhancement is done at the design level. In other instances, it is done post-design, either through modifications of the system in question or by augmenting the system with additional components. For example, supplemental authentication or non-repudiation functions may be added to the system to enhance the identity of critical resources to other resources that depend on the organization-defined resources.",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA039"]
			},
			{
				"id": "NISTC-SC-2",
				"name": "SEPARATION OF SYSTEM AND USER FUNCTIONALITY",
				"definition": "Separate user functionality, including user interface services, from system management functionality.",
				"discussion": "System management functionality includes functions that are necessary to administer databases, network components, workstations, or servers. These functions typically require privileged user access. The separation of user functions from system management functions is physical or logical. Organizations may separate system management functions from user functions by using different computers, instances of operating systems, central processing units, or network addresses; by employing virtualization techniques; or some combination of these or other methods. Separation of system management functions from user functions includes web administrative interfaces that employ separate authentication methods for users of any other system resources. Separation of system and user functions may include isolating administrative interfaces on different domains and with additional access controls. The separation of system and user functionality can be achieved by applying the systems security engineering design principles in SA-8, including SA-8(1), SA-8(3), SA-8(4), SA-8(10), SA-8(12), SA-8(13), SA-8(14), and SA-8(18).",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-2(1)",
				"name": "SEPARATION OF SYSTEM AND USER FUNCTIONALITY | INTERFACES FOR NON-PRIVILEGED USERS",
				"definition": "Prevent the presentation of system management functionality at interfaces to non-privileged users.",
				"discussion": "Preventing the presentation of system management functionality at interfaces to non-privileged users ensures that system administration options, including administrator privileges, are not available to the general user population. Restricting user access also prohibits the use of the grey-out option commonly used to eliminate accessibility to such information. One potential solution is to withhold system administration options until users establish sessions with administrator privileges.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-3",
				"name": "SECURITY FUNCTION ISOLATION",
				"definition": "Isolate security functions from nonsecurity functions.",
				"discussion": "Security functions are isolated from nonsecurity functions by means of an isolationboundary implemented within a system via partitions and domains. The isolation boundary controls access to and protects the integrity of the hardware, software, and firmware that perform system security functions. Systems implement code separation in many ways, such as through the provision of security kernels via processor rings or processor modes. For non-kernel code, security function isolation is often achieved through file system protections that protect the code on disk and address space protections that protect executing code. Systems can restrict access to security functions using access control mechanisms and by implementing least privilege capabilities. While the ideal is for all code within the defined security function isolation boundary to only contain security-relevant code, it is sometimes necessary to include nonsecurity functions as an exception. The isolation of security functions from nonsecurity functions can be achieved by applying the systems security engineering design principles in SA-8, including SA-8(1), SA-8(3), SA-8(4), SA-8(10), SA-8(12), SA-8(13), SA-8(14), and SA-8(18)",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-3(1)",
				"name": "SECURITY FUNCTION ISOLATION | HARDWARE SEPARATION",
				"definition": "Employ hardware separation mechanisms to implement security function isolation.",
				"discussion": "Hardware separation mechanisms include hardware ring architectures that are implemented within microprocessors and hardware-enforced address segmentation used to support logically distinct storage objects with separate attributes (i.e., readable, writeable).",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-3(2)",
				"name": "SECURITY FUNCTION ISOLATION | ACCESS AND FLOW CONTROL FUNCTIONS",
				"definition": "Isolate security functions enforcing access and information flow control from nonsecurity functions and from other security functions.",
				"discussion": "Security function isolation occurs because of implementation. The functions can still be scanned and monitored. Security functions that are potentially isolated from access and flow control enforcement functions include auditing, intrusion detection, and malicious code protection functions.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-3(3)",
				"name": "SECURITY FUNCTION ISOLATION | MINIMIZE NONSECURITY FUNCTIONALITY",
				"definition": "Minimize the number of nonsecurity functions included within the isolation boundary containing security functions.",
				"discussion": "Where it is not feasible to achieve strict isolation of nonsecurity functions from security functions, it is necessary to take actions to minimize nonsecurity-relevant functions within the security function boundary. Nonsecurity functions contained within the isolation boundary are considered security-relevant because errors or malicious code in the software can directly impact the security functions of systems. The fundamental design objective is that the specific portions of systems that provide information security are of minimal size and complexity. Minimizing the number of nonsecurity functions in the security-relevant system components allows designers and implementers to focus only on those functions which are necessary to provide the desired security capability (typically access enforcement). By minimizing the nonsecurity functions within the isolation boundaries, the amount of code that is trusted to enforce security policies is significantly reduced, thus contributing to understandability.",
				"techniques_id": ["NISTT010"],
				"approaches_id": ["NISTA037"]
			},
			{
				"id": "NISTC-SC-3(5)",
				"name": "SECURITY FUNCTION ISOLATION | LAYERED STRUCTURES",
				"definition": "Implement security functions as a layered structure minimizing interactions between layers of the design and avoiding any dependence by lower layers on the functionality or correctness of higher layers.",
				"discussion": "The implementation of layered structures with minimized interactions among security functions and non-looping layers (i.e., lower-layer functions do not depend on higher-layer functions) enables the isolation of security functions and the management of complexity.",
				"techniques_id": ["NISTT004", "NISTT012", "NISTT010"],
				"approaches_id": ["NISTA012", "NISTA044", "NISTA036"]
			},
			{
				"id": "NISTC-SC-5(2)",
				"name": "DENIAL OF SERVICE PROTECTION | CAPACITY, BANDWIDTH, AND REDUNDANCY",
				"definition": "Manage capacity, bandwidth, or other redundancy to limit the effects of information flooding denial-of-service attacks.",
				"discussion": "Managing capacity ensures that sufficient capacity is available to counter flooding attacks. Managing capacity includes establishing selected usage priorities, quotas, partitioning, or load balancing.",
				"techniques_id": ["NISTT001", "NISTT011"],
				"approaches_id": ["NISTA002", "NISTA042"]
			},
			{
				"id": "NISTC-SC-5(3)",
				"name": "DENIAL OF SERVICE PROTECTION | DETECTION AND MONITORING",
				"definition": "(a) Employ the following monitoring tools to detect indicators of denial-of-service attacks against, or launched from, the system: [Assignment: organization-defined monitoring tools]; and \n (b) Monitor the following system resources to determine if sufficient resources exist to prevent effective denial-of-service attacks: [Assignment: organization-defined system resources]",
				"discussion": "Organizations consider the utilization and capacity of system resources when managing risk associated with a denial of service due to malicious attacks. Denial-of-service attacks can originate from external or internal sources. System resources that are sensitive to denial of service include physical disk storage, memory, and CPU cycles. Techniques used to prevent denial-of-service attacks related to storage utilization and capacity include instituting disk quotas, configuring systems to automatically alert administrators when specific storage capacity thresholds are reached, using file compression technologies to maximize available storage space, and imposing separate partitions for system and user data.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTT002"]
			},
			{
				"id": "NISTC-SC-7",
				"name": "BOUNDARY PROTECTION",
				"definition": "a. Monitor and control communications at the external managed interfaces to the system and at key internal managed interfaces within the system; \n b. Implement subnetworks for publicly accessible system components that are [Selection: physically; logically] separated from internal organizational networks; and \n c. Connect to external networks or systems only through managed interfaces consisting of boundary protection devices arranged in accordance with an organizational security and privacy architecture.",
				"discussion": "Managed interfaces include gateways, routers, firewalls, guards, network-based malicious code analysis, virtualization systems, or encrypted tunnels implemented within a security architecture. Subnetworks that are physically or logically separated from internal networks are referred to as demilitarized zones or DMZs. Restricting or prohibiting interfaces within organizational systems includes restricting external web traffic to designated web servers within managed interfaces, prohibiting external traffic that appears to be spoofing internal addresses, and prohibiting internal traffic that appears to be spoofing external addresses. [SP800-189] provides additional information on source address validation techniques to prevent ingress and egress of traffic with spoofed addresses. Commercial telecommunications services are provided by network components and consolidated management systems shared by customers. These services may also include third party-provided access lines and other service elements. Such services may represent sources of increased risk despite contract security provisions. Boundary protection may be implemented as a common control for all or part of an organizational network such that the boundary to be protected is greater than a system-specific boundary (i.e., an authorization boundary).",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-7(10)",
				"name": "BOUNDARY PROTECTION | PREVENT EXFILTRATION",
				"definition": "(a) Prevent the exfiltration of information; and \n (b) Conduct exfiltration tests [Assignment: organization-defined frequency].",
				"discussion": "Prevention of exfiltration applies to both the intentional and unintentional exfiltration of information. Techniques used to prevent the exfiltration of information from systems may be implemented at internal endpoints, external boundaries, and across managed interfaces and include adherence to protocol formats, monitoring for beaconing activity from systems, disconnecting external network interfaces except when explicitly needed, employing traffic profile analysis to detect deviations from the volume and types of traffic expected, call backs to command and control centers, conducting penetration testing, monitoring for steganography, disassembling and reassembling packet headers, and using data loss and data leakage prevention tools. Devices that enforce strict adherence to protocol formats include deep packet inspection firewalls and Extensible Markup Language (XML) gateways. The devices verify adherence to protocol formats and specifications at the application layer and identify vulnerabilities that cannot be detected by devices that operate at the network or transport layers. The prevention of exfiltration is similar to data loss prevention or data leakage prevention and is closely associated with cross-domain solutions and system guards that enforce information flow requirements.",
				"techniques_id": ["NISTT002", "NISTT008", "NISTT004"],
				"approaches_id": ["NISTA004", "NISTA029", "NISTA031", "NISTA013"]
			},
			{
				"id": "NISTC-SC-7(11)",
				"name": "BOUNDARY PROTECTION | RESTRICT INCOMING COMMUNICATIONS TRAFFIC",
				"definition": "Only allow incoming communications from [Assignment: organization-defined authorized sources] to be routed to [Assignment: organization-defined authorized destinations].",
				"discussion": "General source address validation techniques are applied to restrict the use of illegal and unallocated source addresses as well as source addresses that should only be used within the system. The restriction of incoming communications traffic provides  determinations that source and destination address pairs represent authorized or allowed communications. Determinations can be based on several factors, including the presence of such address pairs in the lists of authorized or allowed communications, the absence of such address pairs in lists of unauthorized or disallowed pairs, or meeting more general rules for authorized or allowed source and destination pairs. Strong authentication of network addresses is not possible without the use of explicit security protocols, and thus, addresses can often be spoofed. Further, identity-based incoming traffic restriction methods can be employed, including router access control lists and firewall rules.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA047"]
			},
			{
				"id": "NISTC-SC-7(13)",
				"name": "BOUNDARY PROTECTION | ISOLATION OF SECURITY TOOLS, MECHANISMS, AND SUPPORT COMPONENTS",
				"definition": "Isolate [Assignment: organization-defined information security tools, mechanisms, and support components] from other internal system components by implementing physically separate subnetworks with managed interfaces to other components of the system.",
				"discussion": "Physically separate subnetworks with managed interfaces are useful in isolating computer network defenses from critical operational processing networks to prevent adversaries from discovering the analysis and forensics techniques employed by organizations.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-7(15)",
				"name": "BOUNDARY PROTECTION | NETWORK PRIVILEGE ACCESSES",
				"definition": "Route networked, privileged accesses through a dedicated, managed interface for purposes of access control and auditing.",
				"discussion": "Privileged access provides greater accessibility to system functions, including security functions. Adversaries attempt to gain privileged access to systems through remote access to cause adverse mission or business impacts, such as by exfiltrating information or bringing down a critical system capability. Routing networked, privileged access requests through a dedicated, managed interface further restricts privileged access for increased access control and auditing.",
				"techniques_id": ["NISTT010","NISTT012", "NISTT009"],
				"approaches_id": ["NISTA036", "NISTA044", "NISTA032"]
			},
			{
				"id": "NISTC-SC-7(16)",
				"name": "BOUNDARY PROTECTION | PREVENT DISCOVERY OF SYSTEM COMPONENTS",
				"definition": "Prevent the discovery of specific system components that represent a managed interface.",
				"discussion": "Preventing the discovery of system components representing a managed interface helps protect network addresses of those components from discovery through common tools and techniques used to identify devices on networks. Network addresses are not available for discovery and require prior knowledge for access. Preventing the discovery of components and devices can be accomplished by not publishing network addresses, using network address translation, or not entering the addresses in domain name systems. Another prevention technique is to periodically change network addresses.",
				"techniques_id": ["NISTT005", "NISTT007"],
				"approaches_id": ["NISTA014", "NISTA025"]
			},
			{
				"id": "NISTC-SC-7(20)",
				"name": "BOUNDARY PROTECTION | DYNAMIC ISOLATION AND SEGREGATION",
				"definition": "Provide the capability to dynamically isolate [Assignment: organization-defined system components] from other system components.",
				"discussion": "The capability to dynamically isolate certain internal system components is useful when it is necessary to partition or separate system components of questionable origin from components that possess greater trustworthiness. Component isolation reduces the attack surface of organizational systems. Isolating selected system components can also limit the damage from successful attacks when such attacks occur.",
				"techniques_id": ["NISTT012", "NISTT001"],
				"approaches_id": ["NISTA045", "NISTA001"]
			},
			{
				"id": "NISTC-SC-7(21)",
				"name": "BOUNDARY PROTECTION | ISOLATION OF SYSTEM COMPONENTS",
				"definition": "Employ boundary protection mechanisms to isolate [Assignment: organization-defined system components] supporting [Assignment: organization-defined missions and/orbusiness functions].",
				"discussion": "Organizations can isolate system components that perform different mission or business functions. Such isolation limits unauthorized information flows among system components and provides the opportunity to deploy greater levels of protection for selected system components. Isolating system components with boundary protection mechanisms provides the capability for increased protection of individual system components and to more effectively control information flows between those components. Isolating system components provides enhanced protection that limits the potential harm from hostile cyber-attacks and errors. The degree of isolation varies depending upon the mechanisms chosen. Boundary protection mechanisms include routers, gateways, and firewalls that separate system components into physically separate networks or subnetworks; cross-domain devices that separate subnetworks; virtualization techniques; and the  encryption of information flows among system components using distinct encryption keys.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-7(22)",
				"name": "BOUNDARY PROTECTION | SEPARATE SUBNETS FOR CONNECTING TO DIFFERENT SECURITY DOMAINS",
				"definition": "Implement separate network addresses to connect to systems in different security domains.",
				"discussion": "The decomposition of systems into subnetworks (i.e., subnets) helps to provide the appropriate level of protection for network connections to different security domains that contain information with different security categories or classification levels.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-7(29)",
				"name": "BOUNDARY PROTECTION | SEPARATE SUBNETS TO ISOLATE FUNCTIONS",
				"definition": "Implement [Selection: physically; logically] separate subnetworks to isolate the following critical system components and functions: [Assignment: organization-defined critical system components and functions].",
				"discussion": "Separating critical system components and functions from other noncritical system components and functions through separate subnetworks may be necessary to reduce susceptibility to a catastrophic or debilitating breach or compromise that results in system failure. For example, physically separating the command and control function from the in-flight entertainment function through separate subnetworks in a commercial aircraft provides an increased level of assurance in the trustworthiness of critical system functions.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-8(1)",
				"name": "TRANSMISSION CONFIDENTIALITY AND INTEGRITY | CRYPTOGRAPHIC PROTECTION",
				"definition": "Implement cryptographic mechanisms to [Selection (one or more): prevent unauthorized disclosure of information; detect changes to information] during transmission.",
				"discussion": "Encryption protects information from unauthorized disclosure and modification during transmission. Cryptographic mechanisms that protect the confidentiality and integrity of information during transmission include TLS and IPSec. Cryptographic mechanisms used to protect information integrity include cryptographic hash functions that have applications in digital signatures, checksums, and message authentication codes.",
				"techniques_id": ["NISTT005", "NISTT013"],
				"approaches_id": ["NISTA014", "NISTA046"]
			},
			{
				"id": "NISTC-SC-8(4)",
				"name": "TRANSMISSION CONFIDENTIALITY AND INTEGRITY | CONCEAL OR RANDOMIZE COMMUNICATIONS",
				"definition": "Implement cryptographic mechanisms to conceal or randomize communication patterns unless otherwise protected by [Assignment: organization-defined alternative physical controls].",
				"discussion": "Concealing or randomizing communication patterns addresses protection from unauthorized disclosure of information. Communication patterns include frequency, periods, predictability, and amount. Changes to communications patterns can reveal information with intelligence value, especially when combined with other available information related to the mission and business functions of the organization. Concealing or randomizing communications prevents the derivation of intelligence based on communications patterns and applies to both internal and external networks or links that may be visible to individuals who are not authorized users. Encrypting the links and transmitting in continuous, fixed, or random patterns prevents the derivation of intelligence from the system communications patterns. Alternative physical controls include protected distribution systems.",
				"techniques_id": ["NISTT005", "NISTT014"],
				"approaches_id": ["NISTA014", "NISTA050"]
			},
			{
				"id": "NISTC-SC-8(5)",
				"name": "TRANSMISSION CONFIDENTIALITY AND INTEGRITY | PROTECTED DISTRIBUTION SYSTEM",
				"definition": "Implement [Assignment: organization-defined protected distribution system] to [Selection (one or more): prevent unauthorized disclosure of information; detect changes to information] during transmission",
				"discussion": "The purpose of a protected distribution system is to deter, detect, and/or make difficult physical access to the communication lines that carry national security information.",
				"techniques_id": ["NISTT012", "NISTT013"],
				"approaches_id": ["NISTA044", "NISTA046"]
			},
			{
				"id": "NISTC-SC-10",
				"name": "NETWORK DISCONNECT",
				"definition": "Terminate the network connection associated with a communications session at the end of the session or after [Assignment: organization-defined time period] of inactivity.",
				"discussion": "Network disconnect applies to internal and external networks. Terminating network connections associated with specific communications sessions includes de-allocating TCP/IP address or port pairs at the operating system level and de-allocating the networking assignments at the application level if multiple application sessions are using a single operating system-level network connection. Periods of inactivity may be established by organizations and include time periods by type of network access or for specific network accesses.",
				"techniques_id": ["NISTT008"],
				"approaches_id": ["NISTA031"]
			},
			{
				"id": "NISTC-SC-11",
				"name": "TRUSTED PATH",
				"definition": "a. Provide a [Selection: physically; logically] isolated trusted communications path for communications between the user and the trusted components of the system; and b. Permit users to invoke the trusted communications path for communications between the user and the following security functions of the system, including at a minimum, authentication and re-authentication: [Assignment: organization-defined security functions].",
				"discussion": "Trusted paths are mechanisms by which users can communicate (using input devices such as keyboards) directly with the security functions of systems with the requisite assurance to support security policies. Trusted path mechanisms can only be activated by users or the security functions of organizational systems. User responses that occur via trusted paths are protected from modification by and disclosure to untrusted applications. Organizations employ trusted paths for trustworthy, high-assurance connections between security functions of systems and users, including during system logons. The original implementations of trusted paths employed an out-of-band signal to initiate the path, such as using the <BREAK> key, which does not transmit characters that can be spoofed. In later implementations, a key combination that could not be hijacked was used (e.g., the <CTRL> + <ALT> + <DEL> keys). Such key combinations, however, are platform-specific and may not provide a trusted path implementation in every case. The enforcement of trusted communications paths is provided by a specific implementation that meets the reference monitor concept.",
				"techniques_id": ["NISTT012", "NISTT013"],
				"approaches_id": ["NISTA044", "NISTA047"]
			},
			{
				"id": "NISTC-SC-15(1)",
				"name": "COLLABORATIVE COMPUTING DEVICES | PHYSICAL OR LOGICAL DISCONNECT",
				"definition": "Provide [Selection (one or more): physical; logical] disconnect of collaborative computing devices in a manner that supports ease of use",
				"discussion": "Failing to disconnect from collaborative computing devices can result in subsequent compromises of organizational information. Providing easy methods to disconnect from such devices after a collaborative computing session ensures that participants carry out the disconnect activity without having to go through complex and tedious procedures. Disconnect from collaborative computing devices can be manual or automatic.",
				"techniques_id": ["NISTT008"],
				"approaches_id": ["NISTA031"]
			},
			{
				"id": "NISTC-SC-16(1)",
				"name": "TRANSMISSION OF SECURITY AND PRIVACY ATTRIBUTES | INTEGRITY VERIFICATION",
				"definition": "Verify the integrity of transmitted security and privacy attributes.",
				"discussion": "Part of verifying the integrity of transmitted information is ensuring that security and privacy attributes that are associated with such information have not been modified in an unauthorized manner. Unauthorized modification of security or privacy attributes can result in a loss of integrity for transmitted information.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SC-16(3)",
				"name": "TRANSMISSION OF SECURITY AND PRIVACY ATTRIBUTES | CRYPTOGRAPHIC BINDING",
				"definition": "Implement [Assignment: organization-defined mechanisms or techniques] to bind security and privacy attributes to transmitted information.",
				"discussion": "Cryptographic mechanisms and techniques can provide strong security and privacy attribute binding to transmitted information to help ensure the integrity of such information.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SC-18(5)",
				"name": "MOBILE CODE | ALLOW EXECUTION ONLY IN CONFINED ENVIRONMENTS",
				"definition": "Allow execution of permitted mobile code only in confined virtual machine environments",
				"discussion": "Permitting the execution of mobile code only in confined virtual machine environments helps prevent the introduction of malicious code into other systems and system components.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA045"]
			},
			{
				"id": "NISTC-SC-22",
				"name": "ARCHITECTURE AND PROVISIONING FOR NAME/ADDRESS RESOLUTION SERVICE",
				"definition": "Ensure the systems that collectively provide name/address resolution service for an organization are fault-tolerant and implement internal and external role separation.",
				"discussion": "Systems that provide name and address resolution services include domain name system (DNS) servers. To eliminate single points of failure in systems and enhance redundancy, organizations employ at least two authoritative domain name system servers—one configured as the primary server and the other configured as the secondary server. Additionally, organizations typically deploy the servers in two geographically separated network subnetworks (i.e., not located in the same physical facility). For role separation, DNS servers with internal roles only process name and address resolution requests from within organizations (i.e., from internal clients). DNS servers with external roles only process name and address resolution information requests from clients external to organizations (i.e., on external networks, including the Internet). Organizations specify clients that can access authoritative DNS servers in certain roles (e.g., by address ranges and explicit lists).",
				"techniques_id": ["NISTT011"],
				"approaches_id": ["NISTA043"]
			},
			{
				"id": "NISTC-SC-23(3)",
				"name": "SESSION AUTHENTICITY | UNIQUE SYSTEM-GENERATED SESSION IDENTIFIERS",
				"definition": "Generate a unique session identifier for each session with [Assignment: organization-defined randomness requirements] and recognize only session identifiers that are system-generated.",
				"discussion": "Generating unique session identifiers curtails the ability of adversaries to reuse previously valid session IDs. Employing the concept of randomness in the generation of unique session identifiers protects against brute-force attacks to determine future session identifiers.",
				"techniques_id": ["NISTT008", "NISTT014"],
				"approaches_id": ["NISTA029", "NISTA049"]
			},
			{
				"id": "NISTC-SC-25",
				"name": "THIN NODES",
				"definition": "Employ minimal functionality and information storage on the following system components: [Assignment: organization-defined system components].",
				"discussion": "The deployment of system components with minimal functionality reduces the need to secure every endpoint and may reduce the exposure of information, systems, and services to attacks. Reduced or minimal functionality includes diskless nodes and thin client technologies.",
				"techniques_id": ["NISTT010", "NISTT008"],
				"approaches_id": ["NISTA036", "NISTA037", "NISTA029", "NISTA030"]
			},
			{
				"id": "NISTC-SC-26",
				"name": "DECOYS",
				"definition": "Include components within organizational systems specifically designed to be the target of malicious attacks for detecting, deflecting, and analyzing such attacks.",
				"discussion": " Decoys (i.e., honeypots, honeynets, or deception nets) are established to attract adversaries and deflect attacks away from the operational systems that support organizational mission and business functions. Use of decoys requires some supporting isolation measures to ensure that any deflected malicious code does not infect organizational systems. Depending on the specific usage of the decoy, consultation with the Office of the General Counsel before deployment may be needed.",
				"techniques_id": ["NISTT005", "NISTT002"],
				"approaches_id": ["NISTA016", "NISTA004", "NISTA006"]
			},
			{
				"id": "NISTC-SC-27",
				"name": "PLATFORM-INDEPENDENT APPLICATIONS",
				"definition": "Include within organizational systems the following platform independent applications: [Assignment: organization-defined platform-independent applications].",
				"discussion": "Platforms are combinations of hardware, firmware, and software components used to execute software applications. Platforms include operating systems, the underlying computer architectures, or both. Platform-independent applications are applications with the capability to execute on multiple platforms. Such applications promote portability and reconstitution on different platforms. Application portability and the ability to reconstitute on different platforms increase the availability of mission-essential functions within organizations in situations where systems with specific operating systems are under attack.",
				"techniques_id": ["NISTT006", "NISTT010"],
				"approaches_id": ["NISTA018", "NISTA040"]
			},
			{
				"id": "NISTC-SC-28(1)",
				"name": "PROTECTION OF INFORMATION AT REST | CRYPTOGRAPHIC PROTECTION",
				"definition": "Implement cryptographic mechanisms to prevent unauthorized disclosure and modification of the following information at rest on [Assignment: organization-defined system components or media]: [Assignment: organization-defined information].",
				"discussion": "The selection of cryptographic mechanisms is based on the need to protect the confidentiality and integrity of organizational information. The strength of mechanism is commensurate with the security category or classification of the information. Organizations have the flexibility to encrypt information on system components or media or encrypt data structures, including files, records, or fields.",
				"techniques_id": ["NISTT005", "NISTT013"],
				"approaches_id": ["NISTA014", "NISTA046"]
			},
			{
				"id": "NISTC-SC-29",
				"name": "HETEROGENEITY",
				"definition": "Employ a diverse set of information technologies for the following system components in the implementation of the system: [Assignment: organization-defined system components].",
				"discussion": "Increasing the diversity of information technologies within organizational systems reduces the impact of potential exploitations or compromises of specific technologies. Such diversity protects against common mode failures, including those failures induced by supply chain attacks. Diversity in information technologies also reduces the likelihood that the means adversaries use to compromise one system component will be effective against other system components, thus further increasing the adversary work factor to successfully complete planned attacks. An increase in diversity may add complexity and management overhead that could ultimately lead to mistakes and unauthorized configurations.",
				"techniques_id": ["NISTT006"],
				"approaches_id": ["NISTA018"]
			},
			{
				"id": "NISTC-SC-29(1)",
				"name": "HETEROGENEITY | VIRTUALIZATION TECHNIQUES",
				"definition": "Employ virtualization techniques to support the deployment of a diversity of operating systems and applications that are changed [Assignment: organization-defined frequency].",
				"discussion": "While frequent changes to operating systems and applications can pose significant configuration management challenges, the changes can result in an increased work factor for adversaries to conduct successful attacks. Changing virtual operating systems or  applications, as opposed to changing actual operating systems or applications, provides virtual changes that impede attacker success while reducing configuration management efforts. Virtualization techniques can assist in isolating untrustworthy software or software of dubious provenance into confined execution environments.",
				"techniques_id": ["NISTT006", "NISTT008"],
				"approaches_id": ["NISTA018", "NISTA030"]
			},
			{
				"id": "NISTC-SC-30",
				"name": "CONCEALMENT AND MISDIRECTION",
				"definition": "Employ the following concealment and misdirection techniques for [Assignment: organization-defined systems] at [Assignment: organization-defined time periods] to confuse and mislead adversaries: [Assignment: organization-defined concealment and misdirection techniques]",
				"discussion": "Concealment and misdirection techniques can significantly reduce the targeting capabilities of adversaries (i.e., window of opportunity and available attack surface) to initiate and complete attacks. For example, virtualization techniques provide organizations with the ability to disguise systems, potentially reducing the likelihood of successful attacks without the cost of having multiple platforms. The increased use of concealment and misdirection techniques and methods—including randomness, uncertainty, and virtualization—may sufficiently confuse and mislead adversaries and subsequently increase the risk of discovery and/or exposing tradecraft. Concealment and misdirection techniques may provide additional time to perform core mission and business functions. The implementation of concealment and misdirection techniques may add to the complexity and management overhead required for the system.",
				"techniques_id": ["NISTT005"],
				"approaches_id": ["NISTA014", "NISTA016"]
			},
			{
				"id": "NISTC-SC-30(2)",
				"name": "CONCEALMENT AND MISDIRECTION | RANDOMNESS",
				"definition": "Employ [Assignment: organization-defined techniques] to introduce randomness into organizational operations and assets.",
				"discussion": "Randomness introduces increased levels of uncertainty for adversaries regarding the actions that organizations take to defend their systems against attacks. Such actions may impede the ability of adversaries to correctly target information resources of organizations that support critical missions or business functions. Uncertainty may also cause adversaries to hesitate before initiating or continuing attacks. Misdirection techniques that involve randomness include performing certain routine actions at different times of day, employing different information technologies, using different suppliers, and rotating roles and responsibilities of organizational personnel.",
				"techniques_id": ["NISTT014"],
				"approaches_id": ["NISTA049", "NISTA050"]
			},
			{
				"id": "NISTC-SC-30(3)",
				"name": "CONCEALMENT AND MISDIRECTION | CHANGE PROCESSING AND STORAGE LOCATIONS",
				"definition": "Change the location of [Assignment: organization-defined processing and/or storage] [Selection: [Assignment: organization-defined time frequency]; at random time intervals]].",
				"discussion": "Adversaries target critical mission and business functions and the systems that support those mission and business functions while also trying to minimize the exposure of their existence and tradecraft. The static, homogeneous, and deterministic nature of organizational systems targeted by adversaries make such systems more susceptible to attacks with less adversary cost and effort to be successful. Changing processing and storage locations (also referred to as moving target defense) addresses the advanced persistent threat using techniques such as virtualization, distributed processing, and replication. This enables organizations to relocate the system components (i.e., processing, storage) that support critical mission and business functions. Changing the locations of processing activities and/or storage sites introduces a degree of uncertainty into the targeting activities of adversaries. The targeting uncertainty increases the work factor of adversaries and makes compromises or breaches of the organizational systems more difficult and time-consuming. It also increases the chances that adversaries may inadvertently disclose certain aspects of their tradecraft while attempting to locate critical organizational resources.",
				"techniques_id": ["NISTT007", "NISTT014"],
				"approaches_id": ["NISTA026", "NISTA025", "NISTA049"]
			},
			{
				"id": "NISTC-SC-30(4)",
				"name": "CONCEALMENT AND MISDIRECTION | MISLEADING INFORMATION",
				"definition": "Employ realistic, but misleading information in [Assignment: organization-defined system components] about its security state or posture.",
				"discussion": "Employing misleading information is intended to confuse potential adversaries regarding the nature and extent of controls deployed by organizations. Thus, adversaries may employ incorrect and ineffective attack techniques. One technique for misleading adversaries is for organizations to place misleading information regarding the specific controls deployed in external systems that are known to be targeted by adversaries. Another technique is the use of deception nets that mimic actual aspects of organizational systems but use, for example, out-of-date software configurations.",
				"techniques_id": ["NISTT005"],
				"approaches_id": ["NISTA015"]
			},
			{
				"id": "NISTC-SC-30(5)",
				"name": "CONCEALMENT AND MISDIRECTION | CONCEALMENT OF SYSTEM COMPONENTS",
				"definition": "Employ the following techniques to hide or conceal [Assignment: organization-defined system components]: [Assignment: organization-defined techniques]",
				"discussion": " By hiding, disguising, or concealing critical system components, organizations may be able to decrease the probability that adversaries target and successfully compromise those assets. Potential means to hide, disguise, or conceal system components include the configuration of routers or the use of encryption or virtualization techniques.",
				"techniques_id": ["NISTT005"],
				"approaches_id": ["NISTA014"]
			},
			{
				"id": "NISTC-SC-32",
				"name": "SYSTEM PARTITIONING",
				"definition": "Partition the system into [Assignment: organization-defined system components] residing in separate [Selection: physical; logical] domains or environments based on [Assignment: organization-defined circumstances for physical or logical separation of components].",
				"discussion": "System partitioning is part of a defense-in-depth protection strategy. Organizations determine the degree of physical separation of system components. Physical separation options include physically distinct components in separate racks in the same room, critical components in separate rooms, and geographical separation of critical components. Security categorization can guide the selection of candidates for domain partitioning. Managed interfaces restrict or prohibit network access and information flow among partitioned system components.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-32(1)",
				"name": "SYSTEM PARTITIONING | SEPARATE PHYSICAL DOMAINS FOR PRIVILEGED FUNCTIONS",
				"definition": "Partition privileged functions into separate physical domains.",
				"discussion": "Privileged functions that operate in a single physical domain may represent a single point of failure if that domain becomes compromised or experiences a denial of service.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044", "NISTA045"]
			},
			{
				"id": "NISTC-SC-34",
				"name": "NON-MODIFIABLE EXECUTABLE PROGRAMS",
				"definition": "For [Assignment: organization-defined system components], load and execute: \n a. The operating environment from hardware-enforced, read-only media; and \n b. The following applications from hardware-enforced, read-only media: [Assignment: organization-defined applications].",
				"discussion": "The operating environment for a system contains the code that hosts applications, including operating systems, executives, or virtual machine monitors (i.e., hypervisors). It can also include certain applications that run directly on hardware platforms. Hardware-enforced, read-only media include Compact Disc-Recordable (CD-R) and Digital Versatile Disc-Recordable (DVD-R) disk drives as well as one-time, programmable, read-only memory. The use of non-modifiable storage ensures the integrity of software from the point of creation of the read-only image. The use of reprogrammable, read-only memory can be accepted as read-only media provided that integrity can be adequately protected from the point of initial writing to the insertion of the memory into the system, and there are reliable hardware protections against reprogramming the memory while installed in organizational systems",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SC-34(1)",
				"name": "NON-MODIFIABLE EXECUTABLE PROGRAMS | NO WRITABLE STORAGE",
				"definition": "Employ [Assignment: organization-defined system components] with no writeable storage that is persistent across component restart or power on/off.",
				"discussion": "Disallowing writeable storage eliminates the possibility of malicious code insertion via persistent, writeable storage within the designated system components. The restriction applies to fixed and removable storage, with the latter being addressed either directly or as specific restrictions imposed through access controls for mobile devices.",
				"techniques_id": ["NISTT008"],
				"approaches_id": ["NISTA029"]
			},
			{
				"id": "NISTC-SC-34(2)",
				"name": "NON-MODIFIABLE EXECUTABLE PROGRAMS | INTEGRITY PROTECTION ON READ-ONLY MEDIA",
				"definition": "Protect the integrity of information prior to storage on read-only media and control the media after such information has been recorded onto the media.",
				"discussion": "Controls prevent the substitution of media into systems or the reprogramming of programmable read-only media prior to installation into the systems. Integrity protection controls include a combination of prevention, detection, and response.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SC-35",
				"name": "EXTERNAL MALICIOUS CODE IDENTIFICATION",
				"definition": "Include system components that proactively seek to identify network-based malicious code or malicious websites.",
				"discussion": "External malicious code identification differs from decoys in SC-26 in that the components actively probe networks, including the Internet, in search of malicious code contained on external websites. Like decoys, the use of external malicious code identification techniques requires some supporting isolation measures to ensure that any malicious code discovered during the search and subsequently executed does not infect organizational systems. Virtualization is a common technique for achieving such isolation.",
				"techniques_id": ["NISTT002", "NISTT005", "NISTT012"],
				"approaches_id": ["NISTA004", "NISTA006", "NISTA016", "NISTA045"]
			},
			{
				"id": "NISTC-SC-36",
				"name": "DISTRIBUTED PROCESSING AND STORAGE",
				"definition": "Distribute the following processing and storage components across multiple [Selection: physical locations; logical domains]: [Assignment: organization-defined processing and storage components]",
				"discussion": "Distributing processing and storage across multiple physical locations or logical domains provides a degree of redundancy or overlap for organizations. The redundancy and overlap increase the work factor of adversaries to adversely impact organizational operations, assets, and individuals. The use of distributed processing and storage does not assume a single primary processing or storage location. Therefore, it allows for parallel processing and storage.",
				"techniques_id": ["NISTT007", "NISTT011"],
				"approaches_id": ["NISTA028", "NISTA025", "NISTA043"]
			},
			{
				"id": "NISTC-SC-36(1)",
				"name": "DISTRIBUTED PROCESSING AND STORAGE | POLLING TECHNIQUES",
				"definition": "(a) Employ polling techniques to identify potential faults, errors, or compromises to the following processing and storage components: [Assignment: organization-defined distributed processing and storage components]; and \n (b) Take the following actions in response to identified faults, errors, or compromises: [Assignment: organization-defined actions]",
				"discussion": "Distributed processing and/or storage may be used to reduce opportunities for adversaries to compromise the confidentiality, integrity, or availability of organizational information and systems. However, the distribution of processing and storage components does not prevent adversaries from compromising one or more of the components. Polling compares the processing results and/or storage content from the distributed components and subsequently votes on the outcomes. Polling identifies potential faults, compromises, or errors in the distributed processing and storage components.",
				"techniques_id": ["NISTT001", "NISTT013"],
				"approaches_id": ["NISTA003", "NISTA048"]
			},
			{
				"id": "NISTC-SC-36(2)",
				"name": "DISTRIBUTED PROCESSING AND STORAGE | SYNCHRONIZATION",
				"definition": "Synchronize the following duplicate systems or system components: [Assignment: organization-defined duplicate systems or system components].",
				"discussion": "SC-36 and CP-9(6) require the duplication of systems or system components in distributed locations. The synchronization of duplicated and redundant services and data helps to ensure that information contained in the distributed locations can be used in the mission or business functions of organizations, as needed.",
				"techniques_id": ["NISTT011", "NISTT004"],
				"approaches_id": ["NISTA043", "NISTA012"]
			},
			{
				"id": "NISTC-SC-37",
				"name": "OUT-OF-BAND CHANNELS",
				"definition": "Employ the following out-of-band channels for the physical delivery or electronic transmission of [Assignment: organization-defined information, system components, or devices] to [Assignment: organization-defined individuals or systems]: [Assignment: organization-defined out-of-band channels]",
				"discussion": "Out-of-band channels include local, non-network accesses to systems; network paths physically separate from network paths used for operational traffic; or non-electronic paths, such as the U.S. Postal Service. The use of out-of-band channels is contrasted with the use of in-band channels (i.e., the same channels) that carry routine operational traffic. Out-of-band channels do not have the same vulnerability or exposure as in-band channels. Therefore, the confidentiality, integrity, or availability compromises of in-band channels will not compromise or adversely affect the out-of-band channels. Organizations may employ out-of-band channels in the delivery or transmission of organizational items, including authenticators and credentials; cryptographic key management information; system and data backups; configuration management changes for hardware, firmware, or software; security updates; maintenance information; and malicious code protection updates.",
				"techniques_id": ["NISTT006"],
				"approaches_id": ["NISTA022"]
			},
			{
				"id": "NISTC-SC-39",
				"name": "PROCESS ISOLATION",
				"definition": "Maintain a separate execution domain for each executing system process.",
				"discussion": "Systems can maintain separate execution domains for each executing process by assigning each process a separate address space. Each system process has a distinct address space so that communication between processes is performed in a manner controlled through the security functions, and one process cannot modify the executing code of another process. Maintaining separate execution domains for executing processes can be achieved, for example, by implementing separate address spaces. Process isolation technologies, including sandboxing or virtualization, logically separate software and firmware from other software, firmware, and data. Process isolation helps limit the access of potentially untrusted software to other system resources. The capability to maintain separate execution domains is available in commercial operating systems that employ multi-state processor technologies.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044", "NISTA045"]
			},
			{
				"id": "NISTC-SC-39(1)",
				"name": "PROCESS ISOLATION | HARDWARE SEPARATION",
				"definition": "Implement hardware separation mechanisms to facilitate process isolation",
				"discussion": "Hardware-based separation of system processes is generally less susceptible to compromise than software-based separation, thus providing greater assurance that the separation will be enforced. Hardware separation mechanisms include hardware memory management.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044", "NISTA045"]
			},
			{
				"id": "NISTC-SC-39(2)",
				"name": "PROCESS ISOLATION | SEPARATION EXECUTION DOMAINS PER THREAD",
				"definition": "Maintain a separate execution domain for each thread in [Assignment: organization-defined multi-threaded processing]",
				"discussion": "None",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044", "NISTA045"]
			},
			{
				"id": "NISTC-SC-40(2)",
				"name": "WIRELESS LINK PROTECTION | REDUCE DETECTION POTENTIAL",
				"definition": "Implement cryptographic mechanisms to reduce the detection potential of wireless links to [Assignment: organization-defined level of reduction]", 
				"discussion": "The implementation of cryptographic mechanisms to reduce detection potential is used for covert communications and to protect wireless transmitters from geo-location. It also ensures that the spread spectrum waveforms used to achieve a low probability of detection are not predictable by unauthorized individuals. Mission requirements, projected threats, concept of operations, and applicable laws, executive orders, directives, regulations, policies, and standards determine the levels to which wireless links are undetectable.",
				"techniques_id": ["NISTT005"],
				"approaches_id": ["NISTA014"]
			},
			{
				"id": "NISTC-SC-40(3)",
				"name": "WIRELESS LINK PROTECTION | IMITATIVE OR MANIPULATIVE COMMUNICATIONS DECEPTION",
				"definition": "Implement cryptographic mechanisms to identify and reject wireless transmissions that are deliberate attempts to achieve imitative or manipulative communications deception based on signal parameters",
				"discussion": " The implementation of cryptographic mechanisms to identify and reject imitative or manipulative communications ensures that the signal parameters of wireless transmissions are not predictable by unauthorized individuals. Such unpredictability reduces the probability of imitative or manipulative communications deception based on signal parameters alone.",
				"techniques_id": ["NISTT005", "NISTT014"],
				"approaches_id": ["NISTA014", "NISTA049", "NISTA050"]
			},
			{
				"id": "NISTC-SC-44",
				"name": "DETONATION CHAMBERS",
				"definition": "Employ a detonation chamber capability within [Assignment: organization-defined system, system component, or location].",
				"discussion": " Detonation chambers, also known as dynamic execution environments, allow organizations to open email attachments, execute untrusted or suspicious applications, and execute Universal Resource Locator requests in the safety of an isolated environment or a virtualized sandbox. Protected and isolated execution environments provide a means of determining whether the associated attachments or applications contain malicious code. While related to the concept of deception nets, the employment of detonation chambers is not intended to maintain a long-term environment in which adversaries can operate and their actions can be observed. Rather, detonation chambers are intended to quickly identify malicious code and either reduce the likelihood that the code is propagated to user environments of operation or prevent such propagation completely.",
				"techniques_id": ["NISTT012", "NISTT002", "NISTT005"],
				"approaches_id": ["NISTA044", "NISTA006", "NISTA016"]
			},
			{
				"id": "NISTC-SC-46",
				"name": "CROSS-DOMAIN POLICY ENFORCEMENT",
				"definition": "mplement a policy enforcement mechanism [Selection: physically; logically] between the physical and/or network interfaces for the connecting security domains.",
				"discussion": "For logical policy enforcement mechanisms, organizations avoid creating a logical path between interfaces to prevent the ability to bypass the policy enforcement mechanism. For physical policy enforcement mechanisms, the robustness of physical isolation afforded by the physical implementation of policy enforcement to preclude the presence of logical covert channels penetrating the security domain may be needed. Contact ncdsmo@nsa.gov for more information.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-47",
				"name": "ALTERNATE COMMUNICATION PATHS",
				"definition": " Establish [Assignment: organization-defined alternate communications paths] for system operations organizational command and control.",
				"discussion": "An incident, whether adversarial- or nonadversarial-based, can disrupt established communications paths used for system operations and organizational command and control. Alternate communications paths reduce the risk of all communications paths being affected by the same incident. To compound the problem, the inability of organizational officials to obtain timely information about disruptions or to provide timely direction to operational elements after a communications path incident, can impact the ability of the organization to respond to such incidents in a timely manner. Establishing alternate communications paths for command and control purposes, including designating alternative decision makers if primary decision makers are unavailable and establishing the extent and limitations of their actions, can greatly facilitate the organization’s ability to continue to operate and take appropriate actions during an incident.",
				"techniques_id": ["NISTT006"],
				"approaches_id": ["NISTA022"]
			},
			{
				"id": "NISTC-SC-48",
				"name": "SENSOR RELOCATION",
				"definition": " Relocate [Assignment: organization-defined sensors and monitoring capabilities] to [Assignment: organization-defined locations] under the following conditions or circumstances: [Assignment: organization-defined conditions or circumstances].",
				"discussion": "Adversaries may take various paths and use different approaches as they move laterally through an organization (including its systems) to reach their target or as they attempt to exfiltrate information from the organization. The organization often only has a limited set of monitoring and detection capabilities, and they may be focused on the critical or likely infiltration or exfiltration paths. By using communications paths that the organization typically does not monitor, the adversary can increase its chances of achieving its desired goals. By relocating its sensors or monitoring capabilities to new locations, the organization can impede the adversary’s ability to achieve its goals. The relocation of the sensors or monitoring capabilities might be done based on threat information that the organization has acquired or randomly to confuse the adversary and make its lateral transition through the system or organization more challenging.",
				"techniques_id": ["NISTT007"],
				"approaches_id": ["NISTA024"]
			},
			{
				"id": "NISTC-SC-48(1)",
				"name": "SENSOR RELOCATION | DYNAMIC RELOCATION OF SENSORS OR MONITORING CAPABILITIES",
				"definition": "Dynamically relocate [Assignment: organization-defined sensors and monitoring capabilities] to [Assignment: organization-defined locations] under the following conditions or circumstances: [Assignment: organization-defined conditions or circumstances].",
				"discussion": "None",
				"techniques_id": ["NISTT007"],
				"approaches_id": ["NISTA024"]
			},
			{
				"id": "NISTC-SC-49",
				"name": "HARDWARE-ENFORCED SEPARATION AND POLICY ENFORCEMENT",
				"definition": "Implement hardware-enforced separation and policy enforcement mechanisms between [Assignment: organization-defined security domains]",
				"discussion": "System owners may require additional strength of mechanism and robustness to ensure domain separation and policy enforcement for specific types of threats and environments of operation. Hardware-enforced separation and policy enforcement provide greater strength of mechanism than software-enforced separation and policy enforcement.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-50",
				"name": "SOFTWARE-ENFORCED SEPARATION AND POLICY ENFORCEMENT",
				"definition": "Implement software-enforced separation and policy enforcement mechanisms between [Assignment: organization-defined security domains].",
				"discussion": " System owners may require additional strength of mechanism to ensure domain separation and policy enforcement for specific types of threats and environments of operation.",
				"techniques_id": ["NISTT012"],
				"approaches_id": ["NISTA044"]
			},
			{
				"id": "NISTC-SC-51",
				"name": "NON-MODIFIABLE EXECUTABLE PROGRAMS | HARDWARE-BASED PROTECTION",
				"definition": "a. Employ hardware-based, write-protect for [Assignment: organization-defined system firmware components]; and \n b. Implement specific procedures for [Assignment: organization-defined authorized individuals] to manually disable hardware write-protect for firmware modifications and re-enable thewrite-protect prior to returning to operational mode.",
				"discussion": "None",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SI-3(10)",
				"name": "MALICIOUS CODE PROTECTION | MALICIOUS CODE ANALYSIS",
				"definition": "(a) Employ the following tools and techniques to analyze the characteristics and behavior of malicious code: [Assignment: organization-defined tools and techniques]; and \n (b) Incorporate the results from malicious code analysis into organizational incident response and flaw remediation processes.",
				"discussion": "The use of malicious code analysis tools provides organizations with a more in-depth understanding of adversary tradecraft (i.e., tactics, techniques, and procedures) and the functionality and purpose of specific instances of malicious code. Understanding the characteristics of malicious code facilitates effective organizational responses to current and future threats. Organizations can conduct malicious code analyses by employing reverse engineering techniques or by monitoring the behavior of executing code.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA006"]
			},
			{
				"id": "NISTC-SI-4(1)",
				"name": "SYSTEM MONITORING | SYSTEM-WIDE INTRUSION DETECTION SYSTEM",
				"definition": "Connect and configure individual intrusion detection tools into a system-wide intrusion detection system.",
				"discussion": "Linking individual intrusion detection tools into a system-wide intrusion detection system provides additional coverage and effective detection capabilities. The information contained in one intrusion detection tool can be shared widely across the organization, making the system-wide detection capability more robust and powerful",
				"techniques_id": ["NISTT002", "NISTT003"],
				"approaches_id": ["NISTA005", "NISTA009"]
			},
			{
				"id": "NISTC-SI-4(2)",
				"name": "SYSTEM MONITORING | AUTOMATED TOOLS AND MECHANISMS FOR REAL-TIME ANALYSIS",
				"definition": "Employ automated tools and mechanisms to support near real-time analysis of events.",
				"discussion": " Automated tools and mechanisms include host-based, network-based, transport-based, or storage-based event monitoring tools and mechanisms or security information and event management (SIEM) technologies that provide real-time analysis of alerts and notifications generated by organizational systems. Automated monitoring techniques can create unintended privacy risks because automated controls may connect to external or otherwise unrelated systems. The matching of records between these systems may create linkages with unintended consequences. Organizations assess and document these risks in their privacy impact assessment and make determinations that are in alignment with their privacy program plan.",
				"techniques_id": ["NISTT002", "NISTT003", "NISTT013"],
				"approaches_id": ["NISTA004", "NISTA009", "NISTA048"]
			},
			{
				"id": "NISTC-SI-4(3)",
				"name": "SYSTEM MONITORING | AUTOMATED TOOL AND MECHANISM INTEGRATION",
				"definition": "Employ automated tools and mechanisms to integrate intrusion detection tools and mechanisms into access control and flow control mechanisms.", 
				"discussion": "Using automated tools and mechanisms to integrate intrusion detection tools and mechanisms into access and flow control mechanisms facilitates a rapid response to attacks by enabling the reconfiguration of mechanisms in support of attack isolation and elimination",
				"techniques_id": ["NISTT002", "NISTT001"],
				"approaches_id": ["NISTA005", "NISTA003"]
			},
			{
				"id": "NISTC-SI-4(4)",
				"name": "SYSTEM MONITORING | INBOUND AND OUTBOUND COMMUNICATIONS TRAFFIC",
				"definition": "(a) Determine criteria for unusual or unauthorized activities or conditions for inbound and outbound communications traffic; \n (b) Monitor inbound and outbound communications traffic [Assignment: organization-defined frequency] for [Assignment: organization-defined unusual or unauthorizedactivities or conditions]",
				"discussion": "Unusual or unauthorized activities or conditions related to system inbound and outbound communications traffic includes internal traffic that indicates the presence of malicious code or unauthorized use of legitimate code or credentials within organizational systems or propagating among system components, signaling to external systems, and the unauthorized exporting of information. Evidence of malicious code or unauthorized use of legitimate code or credentials is used to identify potentially compromised systems or system components.",
				"techniques_id": ["NISTT002", "NISTT013"],
				"approaches_id": ["NISTA004", "NISTA048"]
			},
			{
				"id": "NISTC-SI-4(7)",
				"name": "SYSTEM MONITORING | AUTOMATED RESPONSE TO SUSPICIOUS EVENTS",
				"definition": "(a) Notify [Assignment: organization-defined incident response personnel (identified by name and/or by role)] of detected suspicious events; and \n (b) Take the following actions upon detection: [Assignment: organization-defined least-disruptive actions to terminate suspicious events].",
				"discussion": "Least-disruptive actions include initiating requests for human responses.",
				"techniques_id": ["NISTT002", "NISTT001"],
				"approaches_id": ["NISTA004", "NISTA003"]
			},
			{
				"id": "NISTC-SI-4(10)",
				"name": "SYSTEM MONITORING | VISIBILITY OF ENCRYPTED COMMUNICATIONS",
				"definition": "Make provisions so that [Assignment: organization-defined encrypted communications traffic] is visible to [Assignment: organization-defined system monitoring tools and mechanisms].",
				"discussion": "Organizations balance the need to encrypt communications traffic to protect data confidentiality with the need to maintain visibility into such traffic from a monitoring perspective. Organizations determine whether the visibility requirement applies to internal encrypted traffic, encrypted traffic intended for external destinations, or a subset of the traffic types.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004"]
			},
			{
				"id": "NISTC-SI-4(11)",
				"name": "SYSTEM MONITORING | ANALYZE COMMUNICATIONS TRAFFIC ANOMALIES",
				"definition": "Analyze outbound communications traffic at the external interfaces to the system and selected [Assignment: organization-defined interior points within the system] to discover anomalies.",
				"discussion": " Organization-defined interior points include subnetworks and subsystems. Anomalies within organizational systems include large file transfers, long-time persistent connections, attempts to access information from unexpected locations, the use of unusual protocols and ports, the use of unmonitored network protocols (e.g., IPv6 usage during IPv4 transition), and attempted communications with suspected malicious external addresses.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004"]
			},
			{
				"id": "NISTC-SI-4(13)",
				"name": "SYSTEM MONITORING | ANALYZE TRAFFIC AND EVENT PATTERNS",
				"definition": "(a) Analyze communications traffic and event patterns for the system; \n (b) Develop profiles representing common traffic and event patterns; and \n (c) Use the traffic and event profiles in tuning system-monitoring devices.",
				"discussion": "Identifying and understanding common communications traffic and event patterns help organizations provide useful information to system monitoring devices to more effectively identify suspicious or anomalous traffic and events when they occur. Such information can help reduce the number of false positives and false negatives during system monitoring.",
				"techniques_id": ["NISTT002", "NISTT013"],
				"approaches_id": ["NISTA004", "NISTA048"]
			},
			{
				"id": "NISTC-SI-4(16)",
				"name": "SYSTEM MONITORING | CORRELATE MONITORING INFORMATION",
				"definition": "Correlate information from monitoring tools and mechanisms employed throughout the system.",
				"discussion": "Correlating information from different system monitoring tools and mechanisms can provide a more comprehensive view of system activity. Correlating system monitoring tools and mechanisms that typically work in isolation—including malicious code protection  software, host monitoring, and network monitoring—can provide an organization-wide monitoring view and may reveal otherwise unseen attack patterns. Understanding the capabilities and limitations of diverse monitoring tools and mechanisms and how to maximize the use of information generated by those tools and mechanisms can help organizations develop, operate, and maintain effective monitoring programs. The correlation of monitoring information is especially important during the transition from older to newer technologies (e.g., transitioning from IPv4 to IPv6 network protocols)",
				"techniques_id": ["NISTT002", "NISTT003"],
				"approaches_id": ["NISTA005", "NISTA007"]
			},
			{
				"id": "NISTC-SI-4(17)",
				"name": "SYSTEM MONITORING | INTEGRATED SITUATIONAL AWARENESS",
				"definition": "Correlate information from monitoring physical, cyber, and supply chain activities to achieve integrated, organization-wide situational awareness",
				"discussion": " Correlating monitoring information from a more diverse set of information sources helps to achieve integrated situational awareness. Integrated situational awareness from a combination of physical, cyber, and supply chain monitoring activities enhances the capability of organizations to more quickly detect sophisticated attacks and investigate the methods and techniques employed to carry out such attacks. In contrast to SI-4(16), which correlates the various cyber monitoring information, integrated situational awareness is intended to correlate monitoring beyond the cyber domain. Correlation of monitoring information from multiple activities may help reveal attacks on organizations that are operating across multiple attack vectors.",
				"techniques_id": ["NISTT002", "NISTT003"],
				"approaches_id": ["NISTA005", "NISTA007"]
			},
			{
				"id": "NISTC-SI-4(18)",
				"name": "SYSTEM MONITORING | ANALYZE TRAFFIC AND COVERT EXFILTRATION",
				"definition": "Analyze outbound communications traffic at external interfaces to the system and at the following interior points to detect covert exfiltration of information: [Assignment:organization-defined interior points within the system].",
				"discussion": "Organization-defined interior points include subnetworks and subsystems. Covert means that can be used to exfiltrate information include steganography.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004"]
			},
			{
				"id": "NISTC-SI-4(24)",
				"name": "SYSTEM MONITORING | INDICATORS OF COMPROMISE",
				"definition": "Discover, collect, and distribute to [Assignment: organization-defined personnel or roles], indicators of compromise provided by [Assignment: organization-defined sources].",
				"discussion": " Indicators of compromise (IOC) are forensic artifacts from intrusions that are identified on organizational systems at the host or network level. IOCs provide valuable information on systems that have been compromised. IOCs can include the creation of registry key values. IOCs for network traffic include Universal Resource Locator or protocol elements that indicate malicious code command and control servers. The rapid distribution and adoption of IOCs can improve information security by reducing the time that systems and organizations are vulnerable to the same exploit or attack. Threat indicators, signatures, tactics, techniques, procedures, and other indicators of compromise may be available via government and non-government cooperatives, including the Forum of Incident Response and Security Teams, the United States Computer Emergency Readiness Team, the Defense Industrial Base Cybersecurity Information Sharing Program, and the CERT Coordination Center.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004", "NISTA005"]
			},
			{
				"id": "NISTC-SI-4(25)",
				"name": "SYSTEM MONITORING | OPTIMIZE NETWORK TRAFFIC ANALYSIS",
				"definition": "Provide visibility into network traffic at external and key internal system interfaces to optimize the effectiveness of monitoring devices.",
				"discussion": " Encrypted traffic, asymmetric routing architectures, capacity and latency limitations, and transitioning from older to newer technologies (e.g., IPv4 to IPv6 network protocol transition) may result in blind spots for organizations when analyzing network traffic. Collecting, decrypting, pre-processing, and distributing only relevant traffic to monitoring devices can streamline the efficiency and use of devices and optimize traffic analysis.",
				"techniques_id": ["NISTT002"],
				"approaches_id": ["NISTA004", "NISTA005"]
			},
			{
				"id": "NISTC-SI-6",
				"name": "SECURITY AND PRIVACY FUNCTION VERIFICATION",
				"definition": "a. Verify the correct operation of [Assignment: organization-defined security and privacy functions]; \n b. Perform the verification of the functions specified in SI-6a [Selection (one or more):[Assignment: organization-defined system transitional states]; upon command by user withappropriate privilege; [Assignment: organization-defined frequency]]; \n c. Alert [Assignment: organization-defined personnel or roles] to failed security and privacy verification tests; and \n d. [Selection (one or more): Shut the system down; Restart the system; [Assignment: organization-defined alternative action(s)]] when anomalies are discovered.",
				"discussion": "Transitional states for systems include system startup, restart, shutdown, and abort. System notifications include hardware indicator lights, electronic alerts to system administrators, and messages to local computer consoles. In contrast to security function verification, privacy function verification ensures that privacy functions operate as expected and are approved by the senior agency official for privacy or that privacy attributes are applied or used as expected.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SI-7",
				"name": "SOFTWARE, FIRMWARE, AND INFORMATION INTEGRITY",
				"definition": "a. Employ integrity verification tools to detect unauthorized changes to the following software, firmware, and information: [Assignment: organization-defined software, firmware, and information]; and \n b. Take the following actions when unauthorized changes to the software, firmware, and information are detected: [Assignment: organization-defined actions].",
				"discussion": "Unauthorized changes to software, firmware, and information can occur due to errors or malicious activity. Software includes operating systems (with key internal components, such as kernels or drivers), middleware, and applications. Firmware interfaces include Unified Extensible Firmware Interface (UEFI) and Basic Input/Output System (BIOS). Information includes personally identifiable information and metadata that contains security and privacy attributes associated with information. Integrity-checking mechanisms, including parity checks, cyclical redundancy checks, cryptographic hashes, and associated tools—can automatically monitor the integrity of systems and hosted applications.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SI-7(1)",
				"name": "SOFTWARE, FIRMWARE, AND INFORMATION INTEGRITY | INTEGRITY CHECKS",
				"definition": "Perform an integrity check of [Assignment: organization-defined software, firmware, and information] [Selection (one or more): at startup; at [Assignment: organization-defined transitional states or security-relevant events]; [Assignment: organization-defined frequency]].",
				"discussion": "Security-relevant events include the identification of new threats to which organizational systems are susceptible and the installation of new hardware, software, or firmware. Transitional states include system startup, restart, shutdown, and abort.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SI-7(5)",
				"name": "SOFTWARE, FIRMWARE, AND INFORMATION INTEGRITY | AUTOMATED RESPONSE TO INTEGRITY VIOLATIONS",
				"definition": "Automatically [Selection (one or more): shut the system down; restart the system; implement [Assignment: organization-defined controls]] when integrity violations are discovered.",
				"discussion": " Organizations may define different integrity-checking responses by type of information, specific information, or a combination of both. Types of information include firmware, software, and user data. Specific information includes boot firmware for certain types of machines. The automatic implementation of controls within organizational systems includes reversing the changes, halting the system, or triggering audit alerts when unauthorized modifications to critical security files occur.",
				"techniques_id": ["NISTT013", "NISTT001"],
				"approaches_id": ["NISTA046", "NISTA003"]
			},
			{
				"id": "NISTC-SI-7(6)",
				"name": "SOFTWARE, FIRMWARE, AND INFORMATION INTEGRITY | CRYPTOGRAPHIC PROTECTION",
				"definition": "Implement cryptographic mechanisms to detect unauthorized changes to software, firmware, and information.",
				"discussion": " Cryptographic mechanisms used to protect integrity include digital signatures and the computation and application of signed hashes using asymmetric cryptography, protecting the confidentiality of the key used to generate the hash, and using the public key to verify the hash information. Organizations that employ cryptographic mechanisms also consider cryptographic key management solutions",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SI-7(7)",
				"name": "SOFTWARE, FIRMWARE, AND INFORMATION INTEGRITY | INTEGRATION OF DETECTION AND RESPONSE",
				"definition": "Incorporate the detection of the following unauthorized changes into the organizational incident response capability: [Assignment: organization-defined security-relevant changes to the system].",
				"discussion": " Integrating detection and response helps to ensure that detected events are tracked, monitored, corrected, and available for historical purposes. Maintaining historical records is important for being able to identify and discern adversary actions over an extended time period and for possible legal actions. Security-relevant changes include unauthorized changes to established configuration settings or the unauthorized elevation of system privileges.",
				"techniques_id": ["NISTT013", "NISTT002"],
				"approaches_id": ["NISTA046", "NISTA004"]
			},
			{
				"id": "NISTC-SI-7(9)",
				"name": "SOFTWARE, FIRMWARE, AND INFORMATION INTEGRITY | VERIFY BOOT PROCESS",
				"definition": "Verify the integrity of the boot process of the following system components: [Assignment: organization-defined system components].",
				"discussion": " Ensuring the integrity of boot processes is critical to starting system components in known, trustworthy states. Integrity verification mechanisms provide a level of assurance that only trusted code is executed during boot processes.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SI-7(10)",
				"name": "SOFTWARE, FIRMWARE, AND INFORMATION INTEGRITY | PROTECTION OF BOOT FIRMWARE",
				"definition": "Implement the following mechanisms to protect the integrity of boot firmware in [Assignment: organization-defined system components]: [Assignment: organization-defined mechanisms].",
				"discussion": "Unauthorized modifications to boot firmware may indicate a sophisticated, targeted attack. These types of targeted attacks can result in a permanent denial of service or a persistent malicious code presence. These situations can occur if the firmware is corrupted or if the malicious code is embedded within the firmware. System components can protect the integrity of boot firmware in organizational systems by verifying the integrity and authenticity of all updates to the firmware prior to applying changes to the system component and preventing unauthorized processes from modifying the boot firmware.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SI-7(12)",
				"name": "SOFTWARE, FIRMWARE, AND INFORMATION INTEGRITY | INTEGRITY VERIFICATION",
				"definition": "Require that the integrity of the following user-installed software be verified prior to execution: [Assignment: organization-defined user-installed software].",
				"discussion": " Organizations verify the integrity of user-installed software prior to execution to reduce the likelihood of executing malicious code or programs that contains errors from unauthorized modifications. Organizations consider the practicality of approaches to verifying software integrity, including the availability of trustworthy checksums from software developers and vendors.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SI-7(15)",
				"name": "SOFTWARE, FIRMWARE, AND INFORMATION INTEGRITY | CODE AUTHENTICATION",
				"definition": "Implement cryptographic mechanisms to authenticate the following software or firmware components prior to installation: [Assignment: organization-defined software or firmware components].",
				"discussion": " Cryptographic authentication includes verifying that software or firmware components have been digitally signed using certificates recognized and approved by organizations. Code signing is an effective method to protect against malicious code. Organizations that employ cryptographic mechanisms also consider cryptographic key management solutions",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA047"]
			},
			{
				"id": "NISTC-SI-10(3)",
				"name": "INFORMATION INPUT VALIDATION |PREDICTABLE BEHAVIOR",
				"definition": "Verify that the system behaves in a predictable and documented manner when invalid inputs are received.",
				"discussion": "A common vulnerability in organizational systems is unpredictable behavior when invalid inputs are received. Verification of system predictability helps ensure that the system behaves as expected when invalid inputs are received. This occurs by specifying system responses that allow the system to transition to known states without adverse, unintended side effects. The invalid inputs are those related to the information inputs defined by the organization in the base control (SI-10).",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA048"]
			},
			{
				"id": "NISTC-SI-10(5)",
				"name": "INFORMATION INPUT VALIDATION | RESTRICT INPUTS TO TRUSTED SOURCES AND APPROVED FORMATS",
				"definition": "Restrict the use of information inputs to [Assignment: organization-defined trusted sources] and/or [Assignment: organization-defined formats].",
				"discussion": " Restricting the use of inputs to trusted sources and in trusted formats applies the concept of authorized or permitted software to information inputs. Specifying known trusted sources for information inputs and acceptable formats for such inputs can reduce the probability of malicious activity. The information inputs are those defined by the organization in the base control (SI-10).",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA047"]
			},
			{
				"id": "NISTC-SI-14",
				"name": "NON-PERSISTENCE",
				"definition": "Implement non-persistent [Assignment: organization-defined system components and services] that are initiated in a known state and terminated [Selection (one or more): upon end of session of use; periodically at [Assignment: organization-defined frequency]].",
				"discussion": "Implementation of non-persistent components and services mitigates risk from advanced persistent threats (APTs) by reducing the targeting capability of adversaries (i.e., window of opportunity and available attack surface) to initiate and complete attacks. By implementing the concept of non-persistence for selected system components, organizations can provide a trusted, known state computing resource for a specific time period that does not give adversaries sufficient time to exploit vulnerabilities in organizational systems or operating environments. Since the APT is a high-end, sophisticated threat with regard to capability, intent, and targeting, organizations assume that over an extended period, a percentage of attacks will be successful. Non-persistent system components and services are activated as required using protected information and terminated periodically or at the end of sessions. Non-persistence increases the work factor of adversaries attempting to compromise or breach organizational systems. \n Non-persistence can be achieved by refreshing system components, periodically reimaging components, or using a variety of common virtualization techniques. Non-persistent services can be implemented by using virtualization techniques as part of virtual machines or as new instances of processes on physical machines (either persistent or non-persistent). The benefit of periodic refreshes of system components and services is that it does not require organizations to first determine whether compromises of components or services have occurred (something that may often be difficult to determine). The refresh of selected system components and services occurs with sufficient frequency to prevent the spread or intended impact of attacks, but not with such frequency that it makes the system unstable. Refreshes of critical components and services may be done periodically to hinder the ability of adversaries to exploit optimum windows of vulnerabilities.",
				"techniques_id": ["NISTT008"],
				"approaches_id": ["NISTA030"]
			},
			{
				"id": "NISTC-SI-14(1)",
				"name": "NON-PERSISTENCE | REFRESH FROM TRUSTED SOURCES",
				"definition": "Obtain software and data employed during system component and service refreshes from the following trusted sources: [Assignment: organization-defined trusted sources].",
				"discussion": "Trusted sources include software and data from write-once, read-only media or from selected offline secure storage facilities",
				"techniques_id": ["NISTT008", "NISTT013"],
				"approaches_id": ["NISTA030", "NISTA029", "NISTA047"]
			},
			{
				"id": "NISTC-SI-14(2)",
				"name": "NON-PERSISTENCE | NON-PERSISTENT INFORMATION",
				"definition": "(a) [Selection: Refresh [Assignment: organization-defined information] [Assignment:organization-defined frequency]; Generate [Assignment: organization-defined information] on demand]; and \n (b) Delete information when no longer needed.",
				"discussion": "Retaining information longer than is needed makes the information a potential target for advanced adversaries searching for high value assets to compromise through unauthorized disclosure, unauthorized modification, or exfiltration. For system-related information, unnecessary retention provides advanced adversaries information that can assist in their reconnaissance and lateral movement through the system.",
				"techniques_id": ["NISTT008"],
				"approaches_id": ["NISTA029"]
			},
			{
				"id": "NISTC-SI-14(3)",
				"name": "NON-PERSISTENCE | NON-PERSISTENT CONNECTIVITY",
				"definition": "Establish connections to the system on demand and terminate connections after [Selection: completion of a request; a period of non-use].",
				"discussion": "Persistent connections to systems can provide advanced adversaries with paths to move laterally through systems and potentially position themselves closer to high value assets. Limiting the availability of such connections impedes the adversary’s ability to move freely through organizational systems",
				"techniques_id": ["NISTT008"],
				"approaches_id": ["NISTA031"]
			},
			{
				"id": "NISTC-SI-15",
				"name": "INFORMATION OUTPUT FILTERING",
				"definition": "Validate information output from the following software programs and/or applications to ensure that the information is consistent with the expected content: [Assignment: organization-defined software programs and/or applications]",
				"discussion": " Certain types of attacks, including SQL injections, produce output results that are unexpected or inconsistent with the output results that would be expected from software programs or applications. Information output filtering focuses on detecting extraneous content, preventing such extraneous content from being displayed, and then alerting monitoring tools that anomalous behavior has been discovered.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SI-16",
				"name": "MEMORY PROTECTION",
				"definition": "Implement the following controls to protect the system memory from unauthorized code execution: [Assignment: organization-defined controls].",
				"discussion": "Some adversaries launch attacks with the intent of executing code in non-executable regions of memory or in memory locations that are prohibited. Controls employed to protect memory include data execution prevention and address space layout randomization. Data execution prevention controls can either be hardware-enforced or software-enforced with  hardware enforcement providing the greater strength of mechanism.",
				"techniques_id": ["NISTA014", "NISTT010", "NISTT014"],
				"approaches_id": ["NISTA020", "NISTA037", "NISTT014"]
			},
			{
				"id": "NISTC-SI-19(4)",
				"name": "DE-IDENTIFICATION | REMOVAL, MASKING, ENCRYPTION, HASHING, OR REPLACEMENT OF DIRECT IDENTIFIERS",
				"definition": "Remove, mask, encrypt, hash, or replace direct identifiers in a dataset.",
				"discussion": "There are many possible processes for removing direct identifiers from a dataset. Columns in a dataset that contain a direct identifier can be removed. In masking, the direct identifier is transformed into a repeating character, such as XXXXXX or 999999. Identifiers can be encrypted or hashed so that the linked records remain linked. In the case of encryption or hashing, algorithms are employed that require the use of a key, including the Advanced Encryption Standard or a Hash-based Message Authentication Code.  Implementations may use the same key for all identifiers or use a different key for each identifier. Using a different key for each identifier provides a higher degree of security and privacy. Identifiers can alternatively be replaced with a keyword, including transforming “George Washington” to “PATIENT” or replacing it with a surrogate value, such as transforming “George Washington” to “Abraham Polk.”",
				"techniques_id": ["NISTT005"],
				"approaches_id": ["NISTA014"]
			},
			{
				"id": "NISTC-SI-19(6)",
				"name": "DE-IDENTIFICATION | DIFFERENTIAL PRIVACY",
				"definition": "Prevent disclosure of personally identifiable information by adding non-deterministic noise to the results of mathematical operations before the results are reported",
				"discussion": "The mathematical definition for differential privacy holds that the result of a dataset analysis should be approximately the same before and after the addition or removal of a single data record (which is assumed to be the da ta from a single individual). In its most basic form, differential privacy applies only to online query systems. However, it can also be used to produce machine-learning statistical classifiers and synthetic data. Differential privacy comes at the cost of decreased accuracy of results, forcing organizations to quantify the trade-off between privacy protection and the overall accuracy, usefulness, and utility of the de-identified dataset. Non-deterministic noise can include adding small, random values to the results of mathematical operations in dataset analysis",
				"techniques_id": ["NISTT005"],
				"approaches_id": ["NISTA014"]
			},
			{
				"id": "NISTC-SI-19(8)",
				"name": "DE-IDENTIFICATION | MOTIVATED INTRUDER",
				"definition": "Perform a motivated intruder test on the de-identified dataset to determine if the identified data remains or if the de-identified data can be re-identified",
				"discussion": "A motivated intruder test is a test in which an individual or group takes a data release and specified resources and attempts to re-identify one or more individuals in the de-identified dataset. Such tests specify the amount of inside knowledge, computational resources, financial resources, data, and skills that intruders possess to conduct the tests. A motivated intruder test can determine if the de-identification is insufficient. It can also be a useful diagnostic tool to assess if de-identification is likely to be sufficient. However, the test alone cannot prove that de-identification is sufficient.",
				"techniques_id": ["NISTT004"],
				"approaches_id": ["NISTA013"]
			},
			{
				"id": "NISTC-SI-20",
				"name": "TAINTING",
				"definition": "Embed data or capabilities in the following systems or system components to determine if organizational data has been exfiltrated or improperly removed from the organization: [Assignment: organization-defined systems or system components]",
				"discussion": " Many cyber-attacks target organizational information, or information that the organization holds on behalf of other entities (e.g., personally identifiable information), and exfiltrate that data. In addition, insider attacks and erroneous user procedures can remove information from the system that is in violation of the organizational policies. Tainting approaches can range from passive to active. A passive tainting approach can be as simple as adding false email names and addresses to an internal database. If the organization receives email at one of the false email addresses, it knows that the database has been compromised. Moreover, the organization knows that the email was sent by an unauthorized entity, so any packets it includes potentially contain malicious code, and that the unauthorized entity may have potentially obtained a copy of the database. Another tainting approach can include embedding false data or steganographic data in files to enable the data to be found via open-source analysis. Finally, an active tainting approach can include embedding software in the data that is able to “call home,” thereby alerting the organization to its “capture,” and possibly its location, and the path by which it was exfiltrated or removed.",
				"techniques_id": ["NISTT005"],
				"approaches_id": ["NISTA017"]
			},
			{
				"id": "NISTC-SI-21",
				"name": "INFORMATION REFRESH",
				"definition": "Refresh [Assignment: organization-defined information] at [Assignment: organization-defined frequencies] or generate the information on demand and delete the information when no longer needed.",
				"discussion": " Retaining information for longer than it is needed makes it an increasingly valuable and enticing target for adversaries. Keeping information available for the minimum period of time needed to support organizational missions or business functions reduces the opportunity for adversaries to compromise, capture, and exfiltrate that information",
				"techniques_id": ["NISTT008"],
				"approaches_id": ["NISTA029"]
			},
			{
				"id": "NISTC-SI-22",
				"name": "INFORMATION DIVERSITY",
				"definition": "a. Identify the following alternative sources of information for [Assignment: organization-defined essential functions and services]: [Assignment: organization-defined alternative information sources]; and \n b. Use an alternative information source for the execution of essential functions or services on [Assignment: organization-defined systems or system components] when the primary source of information is corrupted or unavailable.",
				"discussion": " Actions taken by a system service or a function are often driven by the information it receives. Corruption, fabrication, modification, or deletion of that information could impact the ability of the service function to properly carry out its intended actions. By having multiple sources of input, the service or function can continue operation if one source is corrupted or no longer available. It is possible that the alternative sources of information may be less precise or less accurate than the primary source of information. But having such sub-optimal information sources may still provide a sufficient level of quality that the essential service or function can be carried out, even in a degraded or debilitated manner.",
				"techniques_id": ["NISTT006"],
				"approaches_id": ["NISTA021"]
			},
			{
				"id": "NISTC-SI-23",
				"name": "INFORMATION FRAGMENTATION",
				"definition": "Based on [Assignment: organization-defined circumstances]: \n  a. Fragment the following information: [Assignment: organization-defined information]; and \n b. Distribute the fragmented information across the following systems or system components: [Assignment organization-defined systems or system components].",
				"discussion": "One objective of the advanced persistent threat is to exfiltrate valuable information. Once exfiltrated, there is generally no way for the organization to recover the lost information. Therefore, organizations may consider dividing the information into disparate elements and distributing those elements across multiple systems or system components and locations. Such actions will increase the adversary’s work factor to capture and exfiltrate the desired information and, in so doing, increase the probability of detection. The fragmentation of information impacts the organization’s ability to access the information in a timely manner. The extent of the fragmentation is dictated by the impact or classification level (and value) of the information, threat intelligence information received, and whether data tainting is used (i.e., data tainting-derived information about the exfiltration of some information could result in the fragmentation of the remaining information).",
				"techniques_id": ["NISTT007"],
				"approaches_id": ["NISTA027"]
			},
			{
				"id": "NISTC-SR-3(1)",
				"name": "SUPPLY CHAIN CONTROLS AND PROCESSES | DIVERSE SUPPLY CHAIN",
				"definition": "Employ a diverse set of sources for the following system components and services: [Assignment: organization-defined system components and services].",
				"discussion": "Diversifying the supply of systems, system components, and services can reduce the probability that adversaries will successfully identify and target the supply chain and can reduce the impact of a supply chain event or compromise. Identifying multiple suppliers for replacement components can reduce the probability that the replacement component will become unavailable. Employing a diverse set of developers or logistics service providers can reduce the impact of a natural disaster or other supply chain event. Organizations consider designing the system to include diverse materials and components.",
				"techniques_id": ["NISTT006"],
				"approaches_id": ["NISTA023"]
			},
			{
				"id": "NISTC-SR-3(2)",
				"name": "SUPPLY CHAIN CONTROLS AND PROCESSES | LIMITATION OF HARM",
				"definition": "Employ the following controls to limit harm from potential adversaries identifying and targeting the organizational supply chain: [Assignment: organization-defined controls]",
				"discussion": "Controls that can be implemented to reduce the probability of adversaries successfully identifying and targeting the supply chain include avoiding the purchase of custom or non-standardized configurations, employing approved vendor lists with standing reputations in industry, following pre-agreed maintenance schedules and update and patch delivery mechanisms, maintaining a contingency plan in case of a supply chain event, using procurement carve-outs that provide exclusions to commitments or obligations, using diverse delivery routes, and minimizing the time between purchase decisions and delivery.",
				"techniques_id": ["NISTT006", "NISTT005"],
				"approaches_id": ["NISTA023", "NISTA014"]
			},
			{
				"id": "NISTC-SR-4",
				"name": "PROVENANCE",
				"definition": "Document, monitor, and maintain valid provenance of the following systems, system components, and associated data: [Assignment: organization-defined systems, system components, and associated data].", 
				"discussion": " Every system and system component has a point of origin and may be changed throughout its existence. Provenance is the chronology of the origin, development, ownership, location, and changes to a system or system component and associated data. It may also include personnel and processes used to interact with or make modifications to the system, component, or associated data. Organizations consider developing procedures (see SR-1) for allocating responsibilities for the creation, maintenance, and monitoring of provenance for systems and system components; transferring provenance documentation and responsibility between organizations; and preventing and monitoring for unauthorized changes to the provenance records. Organizations have methods to document, monitor, and maintain valid provenance baselines for systems, system components, and related data. These actions help track, assess, and document any changes to the provenance, including changes in supply chain elements or configuration, and help ensure non-repudiation of provenance information and the provenance change records. Provenance considerations are addressed throughout the system development life cycle and incorporated into contracts and other arrangements, as appropriate",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA047"]	
			},
			{
				"id": "NISTC-SR-4(1)",
				"name": "PROVENANCE | IDENTITY",
				"definition": "Establish and maintain unique identification of the following supply chain elements, processes, and personnel associated with the identified system and critical system components: [Assignment: organization-defined supply chain elements, processes, and personnel associated with organization-defined systems and critical system components].",
				"discussion": "Knowing who and what is in the supply chains of organizations is critical to gaining visibility into supply chain activities. Visibility into supply chain activities is also important for monitoring and identifying high-risk events and activities. Without reasonable visibility into supply chains elements, processes, and personnel, it is very difficult for organizations to understand and manage risk and reduce their susceptibility to adverse events. Supply chain elements include organizations, entities, or tools used for the research and development, design, manufacturing, acquisition, delivery, integration, operations, maintenance, and disposal of systems and system components. Supply chain processes include development processes for hardware, software, and firmware; shipping and handling procedures; configuration management tools, techniques, and measures to maintain provenance; personnel and physical security programs; or other programs, processes, or procedures associated with the production and distribution of supply chain elements. Supply chain personnel are individuals with specific roles and responsibilities related to the secure the research and development, design, manufacturing, acquisition, delivery, integration, operations and maintenance, and disposal of a system or system component. Identification methods are sufficient to support an investigation in case of a supply chain change (e.g. if a supply company is purchased), compromise, or event.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA047"]
			},
			{
				"id": "NISTC-SR-4(2)",
				"name": "PROVENANCE | TRACK AND TRACE",
				"definition": "Establish and maintain unique identification of the following systems and critical system components for tracking through the supply chain: [Assignment: organization-defined systems and critical system components].",
				"discussion": "Tracking the unique identification of systems and system components during development and transport activities provides a foundational identity structure for the establishment and maintenance of provenance. For example, system components may be labeled using serial numbers or tagged using radio-frequency identification tags. Labels and tags can help provide better visibility into the provenance of a system or system component. A system or system component may have more than one unique identifier. Identification methods are sufficient to support a forensic investigation after a supply chain compromise or event.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA047"]
			},
			{
				"id": "NISTC-SR-4(3)",
				"name": "PROVENANCE | VALIDATE AS GENUINE AND NOT ALTERED",
				"definition": "Employ the following controls to validate that the system or system component received is genuine and has not been altered: [Assignment: organization-defined controls].",
				"discussion": "For many systems and system components, especially hardware, there are technical means to determine if the items are genuine or have been altered, including optical and nanotechnology tagging, physically unclonable functions, side-channel analysis, cryptographic hash verifications or digital signatures, and visible anti-tamper labels or stickers. Controls can also include monitoring for out of specification performance, which can be an indicator of tampering or counterfeits. Organizations may leverage supplier and contractor processes for validating that a system or component is genuine and has not been altered and for replacing a suspect system or component. Some indications of tampering may be visible and addressable before accepting delivery, such as inconsistent packaging, broken seals, and incorrect labels. When a system or system component is suspected of being altered or counterfeit, the supplier, contractor, or original equipment manufacturer may be able to replace the item or provide a forensic capability to determine the origin of the counterfeit or altered item. Organizations can provide training to personnel on how to identify suspicious system or component deliveries.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046", "NISTA047"]
			},
			{
				"id": "NISTC-SR-4(4)",
				"name": "PROVENANCE | SUPPLY CHAIN INTEGRITY – PEDIGREE",
				"definition": "Employ [Assignment: organization-defined controls] and conduct [Assignment: organization-defined analysis] to ensure the integrity of the system and system components by validating the internal composition and provenance of critical or mission-essential technologies, products, and services.",
				"discussion": "Authoritative information regarding the internal composition of system components and the provenance of technology, products, and services provides a strong basis for trust. The validation of the internal composition and provenance of technologies,  products, and services is referred to as the pedigree. For microelectronics, this includes material composition of components. For software this includes the composition of open-source and proprietary code, including the version of the component at a given point in time. Pedigrees increase the assurance that the claims suppliers assert about the internal composition and provenance of the products, services, and technologies they provide are valid. The validation of the internal composition and provenance can be achieved by various evidentiary artifacts or records that manufacturers and suppliers produce during the research and development, design, manufacturing, acquisition, delivery, integration, operations and maintenance, and disposal of technology, products, and services. Evidentiary artifacts include, but are not limited to, software identification (SWID) tags, software component inventory, the manufacturers’ declarations of platform attributes (e.g., serial numbers, hardware component inventory), and measurements (e.g., firmware hashes) that are tightly bound to the hardware itself.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA047"]
			},
			{
				"id": "NISTC-SR-5",
				"name": "ACQUISITION STRATEGIES, TOOLS, AND METHODS",
				"definition": "Employ the following acquisition strategies, contract tools, and procurement methods to protect against, identify, and mitigate supply chain risks: [Assignment: organization-defined acquisition strategies, contract tools, and procurement methods].",
				"discussion": "The use of the acquisition process provides an important vehicle to protect the supply chain. There are many useful tools and techniques available, including obscuring the end use of a system or system component, using blind or filtered buys, requiring tamper-evident packaging, or using trusted or controlled distribution. The results from a supply chain risk assessment can guide and inform the strategies, tools, and methods that are most applicable to the situation. Tools and techniques may provide protections against unauthorized production, theft, tampering, insertion of counterfeits, insertion of malicious software or backdoors, and poor development practices throughout the system development life cycle. Organizations also consider providing incentives for suppliers who implement controls, promote transparency into their processes and security and privacy practices, provide contract language that addresses the prohibition of tainted or counterfeit components, and restrict purchases from untrustworthy suppliers. Organizations consider providing training, education, and awareness programs for personnel regarding supply chain risk, available mitigation strategies, and when the programs should be employed. Methods for reviewing and protecting development plans, documentation, and evidence are commensurate with the security and privacy requirements of the organization. Contracts may specify documentation protection requirements.",
				"techniques_id": ["NISTT013", "NISTT005"],
				"approaches_id": ["NISTA046", "NISTA047", "NISTA014"]
			},
			{
				"id": "NISTC-SR-5(1)",
				"name": "ACQUISITION STRATEGIES, TOOLS, AND METHODS | ADEQUATE SUPPLY",
				"definition": "Employ the following controls to ensure an adequate supply of [Assignment: organization-defined critical system components]: [Assignment: organization-defined controls].",
				"discussion": "Adversaries can attempt to impede organizational operations by disrupting the supply of critical system components or corrupting supplier operations. Organizations may track systems and component mean time to failure to mitigate the loss of temporary or permanent system function. Controls to ensure that adequate supplies of critical system components include the use of multiple suppliers throughout the supply chain for the identified critical components, stockpiling spare components to ensure operation during mission-critical times, and the identification of functionally identical or similar components that may be used, if necessary.",
				"techniques_id": ["NISTT011", "NISTT006"],
				"approaches_id": ["NISTA043", "NISTA023"]
			},
			{
				"id": "NISTC-SR-6(1)",
				"name": "SUPPLIER ASSESSMENTS AND REVIEWS | TESTING AND ANALYSIS",
				"definition": "Employ [Selection (one or more): organizational analysis; independent third-party analysis; organizational testing; independent third-party testing] of the following supply chain elements, processes, and actors associated with the system, system component, or systemservice: [Assignment: organization-defined supply chain elements, processes, and actors].",
				"discussion": "Relationships between entities and procedures within the supply chain, including development and delivery, are considered. Supply chain elements include organizations, entities, or tools that are used for the research and development, design, manufacturing, acquisition, delivery, integration, operations, maintenance, and disposal of systems, system components, or system services. Supply chain processes include supply chain risk management programs; SCRM strategies and implementation plans; personnel and physical security programs; hardware, software, and firmware development processes; configuration management tools, techniques, and measures to maintain provenance; shipping and handling procedures; and programs, processes, or procedures associated with the production and distribution of supply chain elements. Supply chain actors are individuals with specific roles and responsibilities in the supply chain. The evidence generated and collected during analyses and testing of supply chain elements, processes, and actors is documented and used to inform organizational risk management activities and decisions.",
				"techniques_id": ["NISTT004", "NISTT002"],
				"approaches_id": ["NISTA013", "NISTA004"]
			},
			{
				"id": "NISTC-SR-7",
				"name": "SUPPLY CHAIN OPERATIONS SECURITY",
				"definition": "Employ the following Operations Security (OPSEC) controls to protect supply chain-related information for the system, system component, or system service: [Assignment: organization-defined Operations Security (OPSEC) controls].",
				"discussion": "upply chain OPSEC expands the scope of OPSEC to include suppliers and potential suppliers. OPSEC is a process that includes identifying critical information, analyzing friendly actions related to operations and other activities to identify actions that can be observed by potential adversaries, determining indicators that potential adversaries might obtain that could be interpreted or pieced together to derive information in sufficient time to cause harm to organizations, implementing safeguards or countermeasures to eliminate or reduce exploitable vulnerabilities and risk to an acceptable level, and considering how aggregated information may expose users or specific uses of the supply chain. Supply chain information includes user identities; uses for systems, system components, and system services; supplier identities; security and privacy requirements; system and component configurations; supplier processes; design specifications; and testing and evaluation results. Supply chain OPSEC may require organizations to withhold mission or business information from suppliers and may include the use of intermediaries to hide the end use or users of systems, system components, or system services.",
				"techniques_id": ["NISTT005", "NISTT004"],
				"approaches_id": ["NISTA014", "NISTA015", "NISTA013"]
			},
			{
				"id": "NISTC-SR-9",
				"name": "TAMPER RESISTANCE AND DETECTION",
				"definition": "Implement a tamper protection program for the system, system component, or system service.",
				"discussion": "Anti-tamper technologies, tools, and techniques provide a level of protection for systems, system components, and services against many threats, including reverse engineering, modification, and substitution. Strong identification combined with tamper resistance and/or tamper detection is essential to protecting systems and components during distribution and when in use.",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			},
			{
				"id": "NISTC-SR-9(1)",
				"name": "TAMPER RESISTANCE AND DETECTION | MULTIPLE STAGES OF SYSTEM DEVELOPMENT LIFE CYCLE",
				"definition": "Employ anti-tamper technologies, tools, and techniques throughout the system development life cycle.",
				"discussion": "The system development life cycle includes research and development, design, manufacturing, acquisition, delivery, integration, operations and maintenance, and disposal. Organizations use a combination of hardware and software techniques for tamper resistance and detection. Organizations use obfuscation and self-checking to make reverse engineering and modifications more difficult, time-consuming, and expensive for adversaries. The customization of systems and system components can make substitutions easier to detect and therefore limit damage",
				"techniques_id": ["NISTT013", "NISTT005"],
				"approaches_id": ["NISTA046", "NISTA014"]
			},
			{
				"id": "NISTC-SR-10",
				"name": "INSPECTION OF SYSTEMS OR COMPONENTS",
				"definition": "Inspect the following systems or system components [Selection (one or more): at random; at [Assignment: organization-defined frequency], upon [Assignment: organization-defined indications of need for inspection]] to detect tampering: [Assignment: organization-defined systems or system components].",
				"discussion": "The inspection of systems or systems components for tamper resistance and detection addresses physical and logical tampering and is applied to systems and system components removed from organization-controlled areas. Indications of a need for inspection include changes in packaging, specifications, factory location, or entity in which the part is purchased, and when individuals return from travel to high-risk locations.",
				"techniques_id": ["NISTT013", "NISTT002"],
				"approaches_id": ["NISTA046", "NISTA004", "NISTA006"]
			},
			{
				"id": "NISTC-SR-11",
				"name": "COMPONENT AUTHENTICITY",
				"definition": "a. Develop and implement anti-counterfeit policy and procedures that include the means to detect and prevent counterfeit components from entering the system; and \n b. Report counterfeit system components to [Selection (one or more): source of counterfeit component; [Assignment: organization-defined external reporting organizations]; [Assignment: organization-defined personnel or roles]].",
				"discussion": "Sources of counterfeit components include manufacturers, developers, vendors, and contractors. Anti-counterfeiting policies and procedures support tamper resistance and provide a level of protection against the introduction of malicious code. External reporting organizations include CISA",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046", "NISTA047"]
			},
			{
				"id": "NISTC-SR-11(3)",
				"name": "COMPONENT AUTHENTICITY | ANTI-COUNTERFEIT SCANNING",
				"definition": "Scan for counterfeit system components [Assignment: organization-defined frequency].",
				"discussion": " The type of component determines the type of scanning to be conducted (e.g., web application scanning if the component is a web application).",
				"techniques_id": ["NISTT013"],
				"approaches_id": ["NISTA046"]
			}
		],
		"techniques": [
			{
				"id": "NISTT001",
				"name": "Adaptive Response",
				"definition": "Implement agile courses of action to manage risks.",
				"purpose": "Enable AV systems to respond quickly and effectively to cyber threats or environmental changes, ensuring safety and continued vehicle operation.",
				"approach_ids": ["NISTA001","NISTA002","NISTA003"],
				"control_ids": ["NISTC-AC-2(6)", "NISTC-AC-2(8)", "NISTC-AC-4(3)", "NISTC-AU-5(3)", "NISTC-AU-6", "NISTC-AU-13", "NISTC-CP-2(5)", "NISTC-CP-12", "NISTC-CP-13", "NISTC-IA-10", "NISTC-IR-4(2)", "NISTC-IR-4(3)", "NISTC-IR-4(9)", "NISTC-IR-4(11)", "NISTC-PE-6(2)", "NISTC-RA-3(3)", "NISTC-SA-8(16)", "NISTC-SC-5(2)", "NISTC-SC-7(20)", "NISTC-SC-36(1)", "NISTC-SI-4(3)", "NISTC-SI-4(7)", "NISTC-SI-7(5)"]
			},
			{
				"id": "NISTT002",
				"name": "Analytic Monitoring",
				"definition": "Monitor and analyze a wide range of properties and behaviors on an ongoing basis and in a coordinated way.",
				"purpose": "Help AVs detect and understand unusual activity or faults by continuously checking sensor data, software, and network behaviour.",
				"approach_ids": ["NISTA004","NISTA005","NISTA006"],
				"control_ids": ["NISTC-AC-2(12)", "NISTC-AC-23", "NISTC-AU-6", "NISTC-AU-6(3)", "NISTC-AU-6(5)", "NISTC-AU-6(6)", "NISTC-AU-6(8)", "NISTC-AU-6(9)", "NISTC-AU-13", "NISTC-AU-13(3)", "NISTC-CA-7(6)", "NISTC-CM-2(7)", "NISTC-CM-8(3)", "NISTC-IR-4(4)", "NISTC-IR-4(11)", "NISTC-IR-4(12)", "NISTC-IR-4(13)", "NISTC-IR-5", "NISTC-PE-6", "NISTC-PE-6(2)", "NISTC-PE-6(4)", "NISTC-PM-31", "NISTC-RA-5(4)", "NISTC-RA-5(5)", "NISTC-RA-5(6)", "NISTC-RA-5(8)", "NISTC-RA-5(10)", "NISTC-RA-10", "NISTC-SC-5(3)", "NISTC-SC-7(10)", "NISTC-SC-26", "NISTC-SC-35", "NISTC-SC-44", "NISTC-SI-3(10)", "NISTC-SI-4(1)", "NISTC-SI-4(2)", "NISTC-SI-4(3)", "NISTC-SI-4(4)", "NISTC-SI-4(7)", "NISTC-SI-4(10)", "NISTC-SI-4(11)", "NISTC-SI-4(13)", "NISTC-SI-4(16)", "NISTC-SI-4(17)", "NISTC-SI-4(18)", "NISTC-SI-4(24)", "NISTC-SI-4(25)", "NISTC-SI-7(7)", "NISTC-SR-6(1)", "NISTC-SR-10"]
			},
			{
				"id": "NISTT003",
				"name": "Contextual Awareness",
				"definition": "Construct and maintain current representations of the posture of organizational missions or business functions while considering threat events and courses of action.",
				"purpose": "Give AVs a better understanding of what's happening around them by connecting vehicle status with known risks and environment data.",
				"approach_ids": ["NISTA007","NISTA008","NISTA009"],
				"control_ids": ["NISTC-AT-2(1)", "NISTC-AT-2(3)", "NISTC-AT-2(5)", "NISTC-AT-3(3)", "NISTC-CA-7(3)", "NISTC-CP-2(8)", "NISTC-IR-4(4)", "NISTC-PM-16", "NISTC-PM-16(1)", "NISTC-RA-3(2)", "NISTC-RA-3(3)", "NISTC-RA-3(4)", "NISTC-RA-9", "NISTC-RA-10", "NISTC-SA-11(2)", "NISTC-SI-4(1)", "NISTC-SI-4(2)", "NISTC-SI-4(16)", "NISTC-SI-4(17)"]
			},
			{
				"id": "NISTT004",
				"name": "Coordinated Protection",
				"definition": "Ensure that protection mechanisms operate in a coordinated and effective manner.",
				"purpose": "Ensure multiple safety and security systems in an AV work together to prevent interference and improve defence against attacks.",
				"approach_ids": ["NISTA010","NISTA011","NISTA012", "NISTA013"],
				"control_ids": ["NISTC-AC-4(29)", "NISTC-AC-6(7)", "NISTC-AT-2(1)", "NISTC-AT-3(3)", "NISTC-CA-7(5)", "NISTC-CA-8", "NISTC-CA-8(1)", "NISTC-CA-8(2)", "NISTC-CA-8(3)", "NISTC-CP-2(1)", "NISTC-CP-2(5)", "NISTC-CP-4(5)", "NISTC-CP-9(1)", "NISTC-IA-2(6)", "NISTC-IA-2(13)", "NISTC-IA-10", "NISTC-IR-4(3)", "NISTC-IR-4(4)", "NISTC-IR-4(10)", "NISTC-IR-4(11)", "NISTC-PE-6(2)", "NISTC-PE-6(4)", "NISTC-PL-8(1)", "NISTC-SA-8(3)", "NISTC-SA-8(4)", "NISTC-SA-8(8)", "NISTC-SA-11(5)", "NISTC-SA-17(8)", "NISTC-SC-3(5)", "NISTC-SC-7(10)", "NISTC-SC-36(2)", "NISTC-SI-19(8)", "NISTC-SR-6(1)", "NISTC-SR-7"]
			},
			{
				"id": "NISTT005",
				"name": "Deception",
				"definition": "Mislead, confuse, hide critical assets from, or expose covertly tainted assets to the adversary.",
				"purpose": "Trick or confuse attackers by hiding or faking parts of the AV system to delay attacks or expose the attacker.",
				"approach_ids": ["NISTA014","NISTA015","NISTA016", "NISTA017"],
				"control_ids": [ "NISTC-CP-9(8)", "NISTC-IA-3(1)", "NISTC-SC-7(16)", "NISTC-SC-8(1)", "NISTC-SC-8(4)", "NISTC-SC-26", "NISTC-SC-28(1)", "NISTC-SC-30", "NISTC-SC-30(4)", "NISTC-SC-30(5)", "NISTC-SC-35", "NISTC-SC-40(2)", "NISTC-SC-40(3)", "NISTC-SC-44", "NISTC-SI-19(4)", "NISTC-SI-19(6)", "NISTC-SI-20", "NISTC-SR-3(2)", "NISTC-SR-5", "NISTC-SR-7", "NISTC-SR-9(1)"]
			},
			{
				"id": "NISTT006",
				"name": "Diversity",
				"definition": "Use heterogeneity to minimize common mode failures, particularly threat events exploiting common vulnerabilities.",
				"purpose": "Use different types of software or hardware in AVs to reduce the chance that one weakness affects the entire system.",
				"approach_ids": ["NISTA018","NISTA019","NISTA020", "NISTA021","NISTA022", "NISTA023"],
				"control_ids": ["NISTC-AC-4(27)", "NISTC-AC-4(30)", "NISTC-AC-7(4)", "NISTC-AU-9(7)", "NISTC-CP-8(3)", "NISTC-CP-11", "NISTC-CP-13", "NISTC-IA-2(6)", "NISTC-IA-2(13)", "NISTC-PL-8(2)", "NISTC-SA-17(9)", "NISTC-SC-27", "NISTC-SC-29", "NISTC-SC-29(1)", "NISTC-SC-37", "NISTC-SC-47", "NISTC-SI-22", "NISTC-SR-3(1)", "NISTC-SR-3(2)", "NISTC-SR-5(1)"]
			},
			{
				"id": "NISTT007",
				"name": "Dynamic Positioning",
				"definition": "Distribute and dynamically relocate functionality or system resources.",
				"purpose": "Move or switch AV components and services during operation to make it harder for attackers to find and attack them.",
				"approach_ids": ["NISTA024","NISTA025","NISTA026", "NISTA027","NISTA028"],
				"control_ids": ["NISTC-IR-4(2)", "NISTC-SA-8(17)", "NISTC-SC-7(16)", "NISTC-SC-30(3)", "NISTC-SC-36", "NISTC-SC-48", "NISTC-SC-48(1)", "NISTC-SI-23"]
			},
			{
				"id": "NISTT008",
				"name": "Non-Persistence",
				"definition": "Generate and retain resources as needed or for a limited time.",
				"purpose": "Temporarily activate AV components only when needed to limit the attack window and reduce the risk of malware remaining in the system.",
				"approach_ids": ["NISTA029","NISTA030","NISTA031"],
				"control_ids": ["NISTC-AC-12", "NISTC-SC-7(10)", "NISTC-SC-10", "NISTC-SC-15(1)", "NISTC-SC-23(3)", "NISTC-SC-25", "NISTC-SC-29(1)", "NISTC-SC-34(1)", "NISTC-SI-14", "NISTC-SI-14(1)", "NISTC-SI-14(2)", "NISTC-SI-14(3)", "NISTC-SI-21"]
			},
			{
				"id": "NISTT009",
				"name": "Privilege Restriction",
				"definition": "Restrict privileges based on the attributes of users and system elements as well as on environmental factors.",
				"purpose": "Limit access within the AV system so that even if attackers gain access, they can’t control everything easily.",
				"approach_ids": ["NISTA032","NISTA033","NISTA034"],
				"control_ids": ["NISTC-AC-2(6)", "NISTC-AC-2(8)", "NISTC-AC-3(2)", "NISTC-AC-3(7)", "NISTC-AC-3(11)", "NISTC-AC-3(12)", "NISTC-AC-3(13)", "NISTC-AC-6", "NISTC-AC-6(1)", "NISTC-AC-6(2)", "NISTC-AC-6(3)", "NISTC-AC-6(4)", "NISTC-AC-6(5)", "NISTC-AC-6(6)", "NISTC-AC-6(7)", "NISTC-AC-6(8)", "NISTC-AC-6(10)", "NISTC-AC-23", "NISTC-AU-9(5)", "NISTC-AU-9(6)", "NISTC-CM-5(4)", "NISTC-CM-5(5)", "NISTC-CM-5(6)", "NISTC-CM-7(5)", "NISTC-CM-7(6)", "NISTC-CP-9(7)", "NISTC-IA-10", "NISTC-RA-5(5)", "NISTC-SA-8(15)", "NISTC-SA-8(18)", "NISTC-SC-7(15)"]
			},
			{
				"id": "NISTT010",
				"name": "Realignment",
				"definition": "Structure systems and resource uses to meet mission or business function needs, reduce current and anticipated risks, and accommodate the evolution of technical, operational, and threat environments.",
				"purpose": "Continuously adjust the AV’s internal systems to keep up with new threats, updates, or driving needs, while limiting unnecessary risk.",
				"approach_ids": ["NISTA035","NISTA036","NISTA037", "NISTA038","NISTA039","NISTA040"],
				"control_ids": ["NISTC-AC-6(2)", "NISTC-CM-2(7)", "NISTC-CM-7(2)", "NISTC-CM-7(4)", "NISTC-CM-7(5)", "NISTC-CP-12", "NISTC-PM-7(1)", "NISTC-PM-32", "NISTC-RA-9", "NISTC-SA-8(2)", "NISTC-SA-8(3)", "NISTC-SA-8(6)", "NISTC-SA-8(7)", "NISTC-SA-8(8)", "NISTC-SA-8(13)", "NISTC-SA-8(31)", "NISTC-SA-11(6)", "NISTC-SA-15(5)", "NISTC-SA-17(6)", "NISTC-SA-20", "NISTC-SA-23", "NISTC-SC-3(3)", "NISTC-SC-3(5)", "NISTC-SC-7(15)", "NISTC-SC-25", "NISTC-SC-27", "NISTC-SI-16"]
			},
			{
				"id": "NISTT011",
				"name": "Redundancy",
				"definition": "Provide multiple protected instances of critical resources.",
				"purpose": "Ensure that AVs have backup systems ready to keep operating safely even if something fails or is attacked.",
				"approach_ids": ["NISTA041","NISTA042","NISTA043"],
				"control_ids": ["NISTC-AC-4(27)", "NISTC-AC-4(30)", "NISTC-CP-9", "NISTC-CP-9(1)", "NISTC-CP-9(6)", "NISTC-CP-9(8)", "NISTC-PE-9(1)", "NISTC-PE-11(1)", "NISTC-PE-11(2)", "NISTC-PE-17", "NISTC-SA-8(19)", "NISTC-SC-5(2)", "NISTC-SC-22", "NISTC-SC-36", "NISTC-SC-36(2)", "NISTC-SR-5(1)"]
			},
			{
				"id": "NISTT012",
				"name": "Segmentation",
				"definition": "Define and separate system elements based on criticality and trustworthiness.",
				"purpose": "Separate AV systems so that if one part is compromised, the rest of the vehicle remains protected and functional.",
				"approach_ids": ["NISTA044","NISTA045"],
				"control_ids": ["NISTC-AC-4(2)", "NISTC-AC-4(21)", "NISTC-AC-6(4)", "NISTC-AU-6(8)", "NISTC-AU-9(2)", "NISTC-CM-4(1)", "NISTC-CM-7(6)", "NISTC-CM-7(7)", "NISTC-IA-2(13)", "NISTC-IR-4(12)", "NISTC-MA-4(4)", "NISTC-SA-3(2)", "NISTC-SA-8(3)", "NISTC-SA-8(6)", "NISTC-SA-8(16)", "NISTC-SC-2", "NISTC-SC-2(1)", "NISTC-SC-3", "NISTC-SC-3(1)", "NISTC-SC-3(2)", "NISTC-SC-3(5)", "NISTC-SC-7", "NISTC-SC-7(13)", "NISTC-SC-7(15)", "NISTC-SC-7(20)", "NISTC-SC-7(21)", "NISTC-SC-7(22)", "NISTC-SC-7(29)", "NISTC-SC-8(5)", "NISTC-SC-11", "NISTC-SC-18(5)", "NISTC-SC-32", "NISTC-SC-32(1)", "NISTC-SC-35", "NISTC-SC-39", "NISTC-SC-39(1)", "NISTC-SC-39(2)", "NISTC-SC-44", "NISTC-SC-46", "NISTC-SC-49", "NISTC-SC-50"]
			},
			{
				"id": "NISTT013",
				"name": "Substantiated Integrity",
				"definition": "Ascertain whether critical system elements have been corrupted.",
				"purpose": "Help the AV detect if important files or software have been tampered with, ensuring the vehicle is running trusted components.",
				"approach_ids": ["NISTA046","NISTA047","NISTA048"],
				"control_ids": ["NISTC-AC-2(12)", "NISTC-AC-4(8)", "NISTC-AC-4(12)", "NISTC-AC-4(17)", "NISTC-AU-6", "NISTC-AU-9(1)", "NISTC-AU-9(3)", "NISTC-AU-9(6)", "NISTC-AU-10(2)", "NISTC-CM-14", "NISTC-CP-9(1)", "NISTC-CP-9(8)", "NISTC-IA-3(1)", "NISTC-IR-4(13)", "NISTC-PE-3(5)", "NISTC-PM-30(1)", "NISTC-SA-8(16)", "NISTC-SA-8(19)", "NISTC-SA-9(7)", "NISTC-SC-7(11)", "NISTC-SC-8(1)", "NISTC-SC-8(5)", "NISTC-SC-11", "NISTC-SC-16(1)", "NISTC-SC-16(3)", "NISTC-SC-28(1)", "NISTC-SC-34", "NISTC-SC-34(2)", "NISTC-SC-36(1)", "NISTC-SC-51", "NISTC-SI-4(2)", "NISTC-SI-4(4)", "NISTC-SI-4(13)", "NISTC-SI-6", "NISTC-SI-7", "NISTC-SI-7(1)", "NISTC-SI-7(5)", "NISTC-SI-7(6)", "NISTC-SI-7(7)", "NISTC-SI-7(9)", "NISTC-SI-7(10)", "NISTC-SI-7(12)", "NISTC-SI-7(15)", "NISTC-SI-10(3)", "NISTC-SI-10(5)", "NISTC-SI-14(1)", "NISTC-SI-15", "NISTC-SR-4", "NISTC-SR-4(1)", "NISTC-SR-4(2)", "NISTC-SR-4(3)", "NISTC-SR-4(4)", "NISTC-SR-5", "NISTC-SR-9", "NISTC-SR-9(1)", "NISTC-SR-10", "NISTC-SR-11", "NISTC-SR-11(3)"]
			},
			{
				"id": "NISTT014",
				"name": "Unpredictability",
				"definition": "Make changes randomly or unpredictably.",
				"purpose": "Add randomness to AV behaviour or system operations to confuse attackers and make it harder to plan effective attacks.",
				"approach_ids": ["NISTA049","NISTA050"],
				"control_ids": ["NISTC-SC-8(4)", "NISTC-SC-23(3)", "NISTC-SC-30(2)", "NISTC-SC-30(3)", "NISTC-SC-40(3)", "NISTC-SI-16"]
			}
		],
		"approaches": [
			{
				"id": "NISTA001",
				"name": "Dynamic Reconfiguration",
				"definition": "Make changes to individual systems, components, or resources to alter functionality or behaviour without interrupting service.",
				"example": "\n\t- Dynamically reroute internal CAN traffic to bypass a compromised ECU while keeping essential vehicle functions operational.\n\t- Update in-vehicle firewall rules in real-time to block malicious diagnostic messages without rebooting the system.\n\t- Reconfigure the vehicle gateway to isolate non-critical networks when abnormal activity is detected.",
				"mitigation_ids": ["M5001", "M5002", "M5016", "M5017", "M5029", "M5037"],
				"effect_ids": []
				
			},
			{
				"id": "NISTA002",
				"name": "Dynamic Resource Allocation",
				"definition": "Change the allocation of resources to tasks or functions without terminating critical functions or processes.",
				"example": "\n\t- Reduce processing priority for infotainment services to ensure real-time sensor data processing during high CPU load.\n\t- Allocate more bandwidth to emergency braking messages during a suspected network flood attack.\n\t- Preempt non-safety-critical tasks to reserve power for mission-critical autonomous driving functions.",
				"mitigation_ids": ["M5029"],
				"effect_ids": []
			},
			{
				"id": "NISTA003",
				"name": "Adaptive Management",
				"definition": "Change how mechanisms are used based on changes in the operational environment as well as changes in the threat environment.",
				"example": "\n\t- Disable remote debugging ports when the AV enters a public or untrusted network zone.\n\t- Enable stricter authentication checks for remote commands when suspicious behaviour is detected.\n\t- Use onboard AI to automatically activate enhanced security policies when threat levels rise or system integrity is uncertain.",
				"mitigation_ids": ["M5001", "M5016", "M5017", "M5034", "M5037"],
				"effect_ids": []
			},
			{
				"id": "NISTA004",
				"name": "Monitoring and Damage Assessment",
				"definition": "Monitor and analyse behaviour and characteristics of components and resources to look for indicators of adversary activity or precursor conditions or indications of other threat events and to detect and assess damage from adversity.",
				"example": "\n\t- Use onboard fault detection systems to identify unexpected ECU resets or message spikes.\n\t- Deploy in-vehicle IDS to monitor CAN traffic for known attack patterns or flooding behaviour.\n\t- Perform runtime checks on camera or sensor feeds to detect tampering or spoofed signals.\n\t- Analyse diagnostic logs to detect malware presence after OTA updates.\n\t- Monitor vehicle connectivity modules for suspicious communication attempts.",
				"mitigation_ids": ["M5001", "M5002", "M5003", "M5017", "M5023", "M5028", "M5031", "M5036", "M5043", "M5044", "M5046"],
				"effect_ids": []
			},
			{
				"id": "NISTA005",
				"name": "Sensor Fusion and Analysis",
				"definition": "Fuse and analyse monitoring data and analysis results from different information sources or at different times together with externally provided threat intelligence.",
				"example": "\n\t- Combine sensor input (e.g., LIDAR + GPS) with threat database alerts to detect inconsistent positioning.\n\t- Correlate anomalies in braking performance with sudden network activity.\n\t- Fuse error logs from multiple ECUs to trace coordinated manipulation or signal injection.\n\t- Cross-check external diagnostic input with real-time system state to detect spoofing.",
				"mitigation_ids": ["M5002", "M5043", "M5044"],
				"effect_ids": []
			},
			{
				"id": "NISTA006",
				"name": "Forensic and Behavioural Analysis",
				"definition": "Analyse indicators and adversary TTPs, including observed behaviour, malware, and other artefacts left behind by adverse events.",
				"example": "\n\t- Examine post-incident logs to identify the origin of malicious commands.\n\t- Reverse engineer suspicious firmware from a compromised ECU (rare in field but useful for post-mortem).\n\t- Use event timeline reconstruction to understand the attack flow during a simulation replay.\n\t- Investigate data exfiltration attempts through the telematics unit.",
				"mitigation_ids": ["M5003", "M5023", "M5043"],
				"effect_ids": []
			}, 
			{
				"id": "NISTA007",
				"name": "Dynamic Resource Awareness",
				"definition": "Maintain current information about resources, the status of resources, and resource connectivity.",
				"example": "\n\t- Maintain a real-time map of all in-vehicle ECUs and their communication status.\n\t- Continuously monitor CPU load, memory usage, and connectivity health of key modules such as the ADAS or telematics unit.\n\t- Integrate sensor health data with cybersecurity status to detect early signs of failure or compromise.",
				"mitigation_ids": [],
				"effect_ids": []
			}, 
			{
				"id": "NISTA008",
				"name": "Dynamic Threat Awareness",
				"definition": "Maintain current information about threat actors, indicators, and potential, predicted, and observed adverse events.",
				"example": "\n\t- Dynamically update threat models based on known vehicle firmware vulnerabilities shared across the industry.\n\t- Ingest over-the-air (OTA) threat intelligence feeds to adjust vehicle defences in real time.\n\t- Log changes in supplier firmware ownership to detect supply chain risk.\n\t- Track suspicious location-based activity patterns that may indicate coordinated attacks on connected fleets.",
				"mitigation_ids": ["M5043", "M5044"],
				"effect_ids": []
			},
			{
				"id": "NISTA009",
				"name": "Mission Dependency and Status Visualisation",
				"definition": "Maintain current information about the status of missions or business functions, dependencies on resources, and the status of those resources with respect to threats.",
				"example": "\n\t- Visualise AV safety-critical systems (e.g., braking, steering, perception) and their live status during runtime.\n\t- Continuously assess the cyber health of components that are directly tied to driving safety.\n\t- Display a dashboard of security status with alerts for high-risk modules that are interdependent.",
				"mitigation_ids": ["M5043"],
				"effect_ids": []
			},
			{
				"id": "NISTA010",
				"name": "Calibrated Defence-in-Depth",
				"definition": "Provide complementary protective mechanisms at different architectural layers or in different locations, calibrating the strength and number of mechanisms to resource value.",
				"example": "\n\t- Deploy separate intrusion detection systems for CAN and Ethernet networks to protect layered communication channels.\n\t- Use multi-factor authentication for remote access to vehicle debugging tools.\n\t- Apply stricter access control to ECUs responsible for steering and braking.\n\t- Monitor internal and external communication interfaces independently.\n\t- Avoid single points of failure by separating critical and non-critical subsystems.",
				"mitigation_ids": ["M5004", "M5018", "M5032", "M5039"],
				"effect_ids": []
			},
			{
				"id": "NISTA011",
				"name": "Consistency Analysis",
				"definition": "Determine whether and how protections can be applied in a coordinated, consistent way that minimises interference, potential cascading failures, or coverage gaps.",
				"example": "\n\t- Ensure consistent access rules across all ECUs, including redundant and backup systems.\n\t- Apply the same authentication policy across in-vehicle diagnostics, OTA updates, and user apps.\n\t- Use privilege audit tools to verify consistent access levels across subsystems.\n\t- Align identity verification rules for different driver profiles and remote services.\n\t- Avoid configuration drift by synchronising firmware policies during routine maintenance.",
				"mitigation_ids": ["M5004", "M5043"],
				"effect_ids": []
			},
			{
				"id": "NISTA012",
				"name": "Orchestration",
				"definition": "Coordinate modifications to and the ongoing behaviour of mechanisms and processes at different layers, in different locations, or implemented for different aspects of trustworthiness to avoid causing cascading failures, interference, or coverage gaps.",
				"example": "\n\t- Coordinate AV software updates with security policy changes to avoid unintended service disruption.\n\t- Plan and test cyber incident response with simulations that reflect mission-critical driving scenarios.\n\t- Schedule logging, IDS, and failover configuration updates to run in coordination.\n\t- Use a security playbook to align updates across infotainment, powertrain, and ADAS domains.",
				"mitigation_ids": ["M5037", "M5045"],
				"effect_ids": []
			},
			{
				"id": "NISTA013",
				"name": "Self-Challenge",
				"definition": "Affect mission or business processes or system elements adversely in a controlled manner to validate the effectiveness of protections and enable proactive response and improvement.",
				"example": "\n\t- Perform Red Team testing to simulate attacks on the vehicle's wireless interfaces.\n\t- Use fault injection to assess how the AV responds to sensor manipulation.\n\t- Conduct tabletop exercises simulating ransomware in the telematics backend.\n\t- Trigger controlled system errors to validate fallback and fail-safe protocols.",
				"mitigation_ids": ["M5016", "M5043"],
				"effect_ids": []
			},
			{
				"id": "NISTA014",
				"name": "Obfuscation",
				"definition": "Hide, transform, or otherwise obscure the contents, properties, or presence of information or other assets from the adversary.",
				"example": "\n\t- Encrypt vehicle log data before writing it to persistent storage.\n\t- Use steganography to hide calibration parameters within multimedia data.\n\t- Mask internal ECU identifiers in external diagnostics or OTA traffic.\n\t- Obfuscate routing paths for cloud communication through tunnelling or onion routing.\n\t- Randomise telemetry reporting intervals to reduce traffic predictability.",
				"mitigation_ids": ["M5007", "M5011", "M5013", "M5027", "M5029", "M5033"],
				"effect_ids": []
			},
			{
				"id": "NISTA015",
				"name": "Disinformation",
				"definition": "Provide deliberately misleading information to adversaries.",
				"example": "\n\t- Generate fake diagnostic trouble codes to mislead attackers into targeting non-critical ECUs.\n\t- Create decoy credentials or tokens on the telematics server to detect misuse attempts.\n\t- Post misleading metadata in non-critical firmware to act as a decoy during reverse engineering.",
				"mitigation_ids": ["M5023", "M5035"],
				"effect_ids": []
			},
			{
				"id": "NISTA016",
				"name": "Misdirection",
				"definition": "Maintain deception resources or environments, and direct adversary activities there.",
				"example": "\n\t- Deploy honeypot interfaces on non-critical services to attract adversaries and log activity.\n\t- Create a decoy diagnostic port with fake subsystem responses.\n\t- Use simulated ECUs that mirror real behaviour but serve as deception environments.",
				"mitigation_ids": ["M5023"],
				"effect_ids": []
			},
			{
				"id": "NISTA017",
				"name": "Tainting",
				"definition": "Embed covert capabilities in resources.",
				"example": "\n\t- Include beacon metadata in exfiltrated firmware files to alert backend systems.\n\t- Insert decoy configurations that ‘phone home’ when accessed or copied.\n\t- Use hidden watermarks in AV route datasets to trace unauthorised distribution.",
				"mitigation_ids": ["M5035"],
				"effect_ids": []
			}, 
			{
				"id": "NISTA018",
				"name": "Architectural Diversity",
				"definition": "Use multiple sets of technical standards, different technologies, and different architectural patterns.",
				"example": "\n\t- Use multiple operating systems for different vehicle domains, such as Linux for infotainment and RTOS for safety-critical ECUs.\n\t- Apply different intrusion detection systems for CAN and automotive Ethernet.\n\t- Employ protocol diversity, e.g., mix of UDS and DoIP for diagnostics.\n\t- Distribute tasks across different hardware platforms to avoid shared points of failure.",
				"mitigation_ids": ["M5010"],
				"effect_ids": []
			}, 
			{
				"id": "NISTA019",
				"name": "Design Diversity",
				"definition": "Use different designs within a given architecture to meet the same requirements or provide equivalent functionality.",
				"example": "\n\t- Implement both hardware and software watchdogs to monitor ECU performance.\n\t- Use multiple supplier designs for the same ECU type, such as two different LiDAR processors from different vendors.\n\t- Employ redundant braking control paths developed using different logic circuits or tools.",
				"mitigation_ids": ["M5037"],
				"effect_ids": []
			},
			{
				"id": "NISTA020",
				"name": "Synthetic Diversity",
				"definition": "Transform implementations of software to produce a variety of instances.",
				"example": "\n\t- Randomise the memory layout of ECU software using address space layout randomisation.\n\t- Use automated build tools that generate slightly different binary variations to reduce predictability for attackers.",
				"mitigation_ids": ["M5029"],
				"effect_ids": []
			},
			{
				"id": "NISTA021",
				"name": "Information Diversity",
				"definition": "Provide information from different sources or transform information in different ways.",
				"example": "\n\t- Cross-check vehicle speed from GPS, IMU, and wheel encoders to detect spoofing.\n\t- Validate external map data with in-vehicle environmental perception to detect tampered data.\n\t- Combine OEM threat intelligence feeds with open-source indicators to enrich situational awareness.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA022",
				"name": "Path Diversity",
				"definition": "Provide multiple independent paths for command, control, and communications.",
				"example": "\n\t- Use both cellular and DSRC for V2X communications.\n\t- Enable out-of-band communication through a service technician channel for emergency firmware recovery.\n\t- Provide separate backup communication buses between ECUs for failover handling.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA023",
				"name": "Supply Chain Diversity",
				"definition": "Use multiple independent supply chains for critical components.",
				"example": "\n\t- Use different suppliers for braking and steering modules to reduce risk from a single compromised vendor.\n\t- Select hardware chips from distinct regions or manufacturing batches to avoid systemic tampering.\n\t- Analyse supplier firmware for shared libraries that may pose common vulnerabilities.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA024",
				"name": "Functional Relocation of Sensors",
				"definition": "Relocate sensors or reallocate responsibility for specific sensing tasks to look for indicators of adverse events.",
				"example": "\n\t- Relocate (using virtualisation) or reconfigure in-vehicle IDS sensors to different ECUs to cover blind spots.\n\t- Dynamically switch sensor responsibility between redundant LiDAR units when spoofing is suspected.\n\t- Reassign environmental monitoring roles to different sensor nodes during a fault.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA025",
				"name": "Functional Relocation of Cyber Resources",
				"definition": "Change the location of cyber resources that provide functionality or information, either by moving the assets or by transferring functional responsibility.",
				"example": "\n\t- Switch the processing of driving logic to a backup control module if anomalies are detected.\n\t- Relocate logging storage to a secure backup node to prevent tampering.\n\t- Shift vehicle-to-cloud communication processing from one network gateway to another.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA026",
				"name": "Asset Mobility",
				"definition": "Securely move physical resources.",
				"example": "\n\t- Move an autonomous robot between zones in a depot to maintain operational integrity while under inspection.\n\t- Transport diagnostic storage media physically to an isolated security lab for forensics.\n\t- Relocate charging station control units during maintenance while preserving remote monitoring.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA027",
				"name": "Fragmentation",
				"definition": "Partition information and distribute it across multiple components.",
				"example": "\n\t- Fragment telemetry logs across different ECUs so no single module holds the full record.\n\t- Separate sensor fusion models into distributed subsystems to reduce exposure during data sharing.\n\t- Apply data fragmentation to OTA updates to prevent full compromise from a single breach.",
				"mitigation_ids": [],
				"effect_ids": []
			}, 
			{
				"id": "NISTA028",
				"name": "Distributed Functionality",
				"definition": "Decompose a function or application into smaller functions, and distribute those functions across multiple components.",
				"example": "\n\t- Architect driving decision-making to run across multiple redundant control units.\n\t- Separate authentication, logging, and update validation into distinct modules within the vehicle network.\n\t- Implement braking logic with input split between ADAS and safety microcontrollers.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA029",
				"name": "Non-Persistent Information",
				"definition": "Refresh information periodically, or generate information on demand and delete it when no longer needed.",
				"example": "\n\t- Offload driving logs to offline storage after trips complete to limit exposure in the vehicle.\n\t- Automatically delete temporary route data or navigation history once the destination is reached.\n\t- Use one-time session keys or authentication tokens for remote diagnostics.",
				"mitigation_ids": ["M5025"],
				"effect_ids": []
			},
			{
				"id": "NISTA030",
				"name": "Non-Persistent Services",
				"definition": "Refresh services periodically, or generate services on demand and terminate services when no longer needed.",
				"example": "\n\t- Terminate remote diagnostic sessions after a set period of inactivity.\n\t- Reboot or reimage infotainment microservices during routine maintenance.\n\t- Start secure OTA update handlers only when an update session is triggered, then immediately shut them down.",
				"mitigation_ids": ["M5015", "M5026"],
				"effect_ids": []
			},
			{
				"id": "NISTA031",
				"name": "Non-Persistent Connectivity",
				"definition": "Establish connections on demand, and terminate connections when no longer needed.",
				"example": "\n\t- Enable vehicle-to-cloud connections only during scheduled upload windows, then disconnect.\n\t- Use software-defined networking to dynamically open and close paths between ECUs based on task scheduling.\n\t- Automatically close maintenance Wi-Fi hotspot once firmware diagnostics are complete.",
				"mitigation_ids": ["M5026"],
				"effect_ids": []
			},			
			{
				"id": "NISTA032",
				"name": "Trust-Based Privilege Management",
				"definition": "Define, assign, and maintain privileges based on established trust criteria consistent with the principles of least privilege.",
				"example": "\n\t- Implement least privilege for access to critical vehicle ECUs.\n\t- Allow remote diagnostics only from approved geographical zones.\n\t- Restrict firmware update automation to specific maintenance windows.\n\t- Require dual approval before disabling vehicle security or safety features.",
				"mitigation_ids": ["M5034"],
				"effect_ids": []
			},
			{
				"id": "NISTA033",
				"name": "Attribute-Based Usage Restriction",
				"definition": "Define, assign, maintain, and apply usage restrictions on cyber resources based on the criticality of missions or business functions and other attributes.",
				"example": "\n\t- Apply role-based access control (RBAC) for AV fleet managers vs. vehicle operators.\n\t- Limit use of maintenance interfaces during driving mode.\n\t- Enable attribute-based access control (ABAC) to restrict sensor calibration to trusted users.\n\t- Use policy-based tags to disable cloud uploads for specific data categories.",
				"mitigation_ids": ["M5005", "M5008", "M5015", "M5017"],
				"effect_ids": []
			},
			{
				"id": "NISTA034",
				"name": "Dynamic Privileges",
				"definition": "Elevate or decrease privileges assigned to a user, process, or service based on transient or contextual factors.",
				"example": "\n\t- Revoke access to over-the-air (OTA) update tools after an inactivity timeout.\n\t- Dynamically reduce diagnostic access when unusual behaviour is detected in a session.\n\t- Adjust privileges during emergencies, granting temporary access to recovery tools.\n\t- Disable admin rights if login occurs from an unrecognised device or location.\n\t- Assign temporary credentials to mobile maintenance staff based on their location and shift.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA035",
				"name": "Purposing",
				"definition": "Ensure that cyber resources are used consistently with mission or business function purposes and approved uses, thereby avoiding unnecessary sharing and complexity.",
				"example": "\n\t- Use allow-lists to block installation of non-critical apps in infotainment systems.\n\t- Restrict communication from telematics units only to approved backend domains.\n\t- Prevent use of elevated permissions unless justified by safety diagnostics.\n\t- Ensure development-mode access is disabled in production vehicles.",
				"mitigation_ids": ["M5004", "M5015"],
				"effect_ids": []
			}, 
			{
				"id": "NISTA036",
				"name": "Offloading",
				"definition": "Offload supportive but nonessential functions to other systems or to an external provider that is better able to perform the functions securely.",
				"example": "\n\t- Route fleet telemetry analytics to a secure cloud provider rather than processing on-vehicle.\n\t- Offload non-critical entertainment software updates to a third-party OTA provider with strict access control.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA037",
				"name": "Restriction",
				"definition": "Remove or disable unneeded functionality or connectivity, or add mechanisms to reduce the chance of vulnerability or failure.",
				"example": "\n\t- Disable unused CAN IDs or debug interfaces on production AVs.\n\t- Remove legacy protocols like FTP from internal service gateways.\n\t- Limit external USB or Ethernet access ports in consumer vehicles.",
				"mitigation_ids": ["M5015", "M5017", "M5021", "M5022"],
				"effect_ids": []
			},
			{
				"id": "NISTA038",
				"name": "Replacement",
				"definition": "Replace low-assurance or poorly understood implementations with trustworthy implementations.",
				"example": "\n\t- Replace unverified third-party firmware libraries with open-source, security-reviewed alternatives.\n\t- Remove vendor-supplied logging services that use hardcoded credentials.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA039",
				"name": "Specialization",
				"definition": "Uniquely augment, configure, or modify the design of critical cyber resources for missions or business functions to improve trustworthiness.",
				"example": "\n\t- Build a custom hardware security module (HSM) specifically for secure boot and OTA validation in AV ECUs.\n\t- Apply hardened OS builds to different domains (infotainment vs control) to minimise shared vulnerabilities.",
				"mitigation_ids": ["M5018", "M5039"	],
				"effect_ids": []
			},
			{
				"id": "NISTA040",
				"name": "Evolvability",
				"definition": "Provide mechanisms and structure resources to enable the system to be maintained, modified, extended, or used in new ways without increasing security or mission risk.",
				"example": "\n\t- Use container-based microservices in the AV backend for logging and threat detection updates.\n\t- Design ECUs with replaceable firmware modules that can be securely patched without vehicle recall.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA041",
				"name": "Protected Backup and Restore",
				"definition": "Back up information and software (including configuration data and virtualised resources) in a way that protects its confidentiality, integrity, and authenticity. Enable safe and secure restoration in case of disruption or corruption.",
				"example": "\n\t- Maintain and protect system-level backup information for vehicle ECUs, such as OS and configuration snapshots.\n\t- Backup camera calibration data or route history logs securely for forensic analysis.\n\t- Increase intrusion monitoring during restore operations to detect manipulation attempts.",
				"mitigation_ids": ["M5037"],
				"effect_ids": []
			},
			{
				"id": "NISTA042",
				"name": "Surplus Capacity",
				"definition": "Maintain extra capacity for information storage, processing, or communications.",
				"example": "\n\t- [No known AV-specific examples currently documented.]\n\t- Could be relevant for V2X infrastructure or edge server systems in future AV deployments.",
				"mitigation_ids": [],
				"effect_ids": []
			},
			{
				"id": "NISTA043",
				"name": "Replication",
				"definition": "Duplicate hardware, information, backups, or functionality in multiple locations, and keep them synchronised.",
				"example": "\n\t- Maintain a redundant secondary controller for braking or steering to ensure fail-operational behaviour.\n\t- Duplicate real-time sensor data to a backup module for safety-critical logging.\n\t- Store alternate copies of route-planning logic on secondary ECUs in case of compromise.\n\t- Provide alternative security mechanisms such as parallel intrusion detection engines.",
				"mitigation_ids": ["M5037"],
				"effect_ids": []
			},
			{
				"id": "NISTA044",
				"name": "Predefined Segmentation",
				"definition": "Define enclaves, segments, micro-segments, or other restricted types of resource sets based on criticality and trustworthiness so that they can be protected separately and, if necessary, isolated.",
				"example": "\n\t- Use physical separation (air gap) to isolate security tools and capabilities, such as separating intrusion detection from infotainment.\n\t- Isolate security-critical ECUs (e.g., braking, steering) from non-critical domains using gateway filtering.\n\t- Use virtualisation to maintain separate OS instances in head units for apps vs secure firmware.\n\t- Partition OTA update mechanisms from runtime vehicle control logic.\n\t- Employ micro-segmentation within IVNs (in-vehicle networks) using role-based CAN gateways.",
				"mitigation_ids": ["M5006", "M5023", "M5031", "M5032", "M5037"],
				"effect_ids": []
			},
			{
				"id": "NISTA045",
				"name": "Dynamic Segmentation and Isolation",
				"definition": "Change the configuration of enclaves or protected segments, or isolate resources while minimising operational disruption.",
				"example": "\n\t- Implement dynamic isolation of camera or LiDAR inputs when anomalies are detected.\n\t- Apply SDN to shift traffic flow between primary and secondary gateways under attack conditions.\n\t- Create VPN-based tunnels for authenticated diagnostic sessions to isolate them from control functions.\n\t- Use dynamic rulesets to segment suspicious ECUs (e.g., with abnormal CAN frequency) from core functionality.",
				"mitigation_ids": ["M5029", "M5032"],
				"effect_ids": []
			},
			{
				"id": "NISTA046",
				"name": "Integrity Checks",
				"definition": "Apply and validate checks of the integrity or quality of information, components, or services to guard against surreptitious modification.",
				"example": "\n\t- Use blockchain technology to validate data integrity within vehicle-to-cloud (V2C) communications.\n\t- Employ integrity checking on external servers hosting OTA firmware to detect tampering.\n\t- Implement cryptographic hashes to protect vehicle ECU firmware and CAN configuration files.\n\t- Validate the trustworthiness of remote services used for navigation or media before execution.",
				"mitigation_ids": ["M5007", "M5009", "M5010", "M5013", "M5017", "M5018", "M5037", "M5039"],
				"effect_ids": []
			},
			{
				"id": "NISTA047",
				"name": "Provenance Tracking",
				"definition": "Identify and track the provenance of data, software, or hardware elements.",
				"example": "\n\t- Implement code signing to verify software origin in the OTA update pipeline.\n\t- Employ supplier-based traceability in hardware components used in safety-critical ECUs.\n\t- Use provenance records for sensor data fusion to identify spoofed or synthetic data sources.",
				"mitigation_ids": ["M5009", "M5010", "M5015", "M5017", "M5018", "M5030", "M5039"],
				"effect_ids": []
			},
			{
				"id": "NISTA048",
				"name": "Behavior Validation",
				"definition": "Validate the behavior of a system, service, device, or individual user against defined or emergent criteria.",
				"example": "\n\t- Verify boot process integrity before enabling secure operations in an AV ECU.\n\t- Implement function verification to validate actuator response during diagnostics.\n\t- Use anomaly detection to flag abnormal throttle or brake patterns during runtime.\n\t- Apply fault injection during simulation to assess system reaction to unexpected inputs.",
				"mitigation_ids": ["M5002", "M5003", "M5005", "M5016", "M5028", "M5031"],
				"effect_ids": []
			},
			{
				"id": "NISTA049",
				"name": "Temporal Unpredictability",
				"definition": "Change behavior or state at times that are determined randomly or by complex functions.",
				"example": "\n\t- Require reauthentication at random intervals (rare in AVs due to safety constraints).\n\t- Perform routine system updates at varied times (though AVs usually prefer deterministic timing for safety).",
				"mitigation_ids": ["M5001", "M5025"],
				"effect_ids": []
			},
			{
				"id": "NISTA050",
				"name": "Contextual Unpredictability",
				"definition": "Change behavior or state in ways that are determined randomly or by complex functions.",
				"example": "\n\t- Use randomised data masking techniques in simulated environments (real AV systems usually avoid unpredictability).\n\t- Rotate ECU or system-level credentials randomly in testing phases (not common in deployed systems due to real-time constraints).",
				"mitigation_ids": ["M5001", "M5011"],
				"effect_ids": []
			}
		],
		"high_level_effects": [
			{
				"id": "NISTHE001",
				"name": "REDIRECT",
				"description": "Misdirecting the adversary away from critical vehicle systems, such as steering or braking controls, to less critical systems like infotainment.",
				"impact_on_risk": "Reduce the likelihood of occurrence, and (to a lesser extent) reduce the likelihood of impact.",
				"expected_result": "The adversary’s efforts are stopped or misdirected.",
				"low_level_effects_ids": ["NISTLE001","NISTLE002","NISTLE003"]
			},
			{
				"id": "NISTHE002",
				"name": "PRECLUDE ",
				"description": "Ensuring that the threat event does not have an impact by making it difficult or impossible for the adversary’s efforts to succeed.",
				"impact_on_risk": "Reduce the likelihood of occurrence, and/or reduce the likelihood of impact.",
				"expected_result": "The adversary’s efforts or resources cannot be applied or are wasted.",
				"low_level_effects_ids": ["NISTLE004", "NISTLE005", "NISTLE006"]
			},
			{
				"id": "NISTHE003",
				"name": "IMPEDE",
				"description": "Making it harder for adversary to cause significant harm to vehicle systems, reducing the adversary's effectiveness or increasing their resource expenditure.",
				"impact_on_risk": "Reduce the likelihood of impact and reduce the level of impact.",
				"expected_result": "Adversary activities are limited, fail to achieve full effect, are delayed, or require more resources than planned.",
				"low_level_effects_ids": ["NISTLE007", "NISTLE008", "NISTLE009", "NISTLE010"]
			},
			{
				"id": "NISTHE004",
				"name": "LIMIT",
				"description": "Restricting the scope of damage, both in terms of the time and resources affected, to ensure the impact of an attack is minimized and can be quickly mitigated.",
				"impact_on_risk": "Reduce the level of impact, and reduce the likelihood of impact of subsequent events in the same threat scenario.",
				"expected_result": "The adversary’s effectiveness is reduced.",
				"low_level_effects_ids": ["NISTLE011", "NISTLE012"]
			},
			{
				"id": "NISTHE005",
				"name": "EXPOSE",
				"description": "Identifying and sharing information about threats that are specifically related to vehicle systems, making it harder for attackers to operate undetected.",
				"impact_on_risk": "Reduce the likelihood of impact.",
				"expected_result": "The adversary loses the advantage of stealth as defenders are better prepared by developing and sharing threat intelligence.",
				"low_level_effects_ids": ["NISTLE013", "NISTLE014", "NISTLE015"]
			}
		],
		"low_level_effects": [
			{
				"id": "NISTLE001",
				"name": "DETER",
				"description": "Making the vehicle appear well-defended, discourage attackers from attempting an attack.",
				"impact_on_risk": "Reduce the likelihood of occurrence.",
				"expected_result": "The adversary abandons or delays the attack. There are no specific references to vehicle manufacturers using disinformation to make the vehicle appear more secure than it actually is, but some approaches suggest making attackers fear potential detection or retaliation.",
				"examples": "Example: Use disinformation to create the impression that the vehicle model or manufacturer has advanced detection and defensive capabilities, potentially deterring attackers by increasing their perceived risk of exposure or failure \n Example: Protect critical information, such as system design, architecture, and firmware/software versions, by treating it as high-value assets. Concealing these details from outsiders and third parties makes the hardware, firmware, or software appear as a black box, making it harder for attackers to target the system effectively. Recommendations for these practices can be found in resources."
			},
			{
				"id": "NISTLE002",
				"name": "DIVERT",
				"description": "Directing attacks toward less critical systems or decoys to distract the adversary from key vehicle functions.",
				"impact_on_risk": "Reduce the likelihood of occurrence.",
				"expected_result": "The adversary shifts focus to less critical components, leaving critical systems untouched.",
				"examples": "Example: Implement a predefined in-vehicle decoy system to lure attackers away from critical vehicle components. For example, a wireless honeypot can be connected to mimic essential systems, which lure attackers to engage with the fake system rather than the real, critical vehicle functions. This strategy uses decoys to divert and isolate the attacker within an isolate and contain (sandbox) environment."
			},
			{
				"id": "NISTLE003",
				"name": "DECEIVE",
				"description": "Using misleading information to confuse the adversary, leading them to make mistakes or waste resources.",
				"impact_on_risk": "Reduce the likelihood of occurrence, and/or reduce the likelihood of impact",
				"expected_result": "The adversary wastes time and effort trying to interpret misleading information. \n The adversary makes strategic errors based on incomplete or confusing data.",
				"examples": "Example:Introducing randomized CAN bus traffic patterns or noise messages to obscure the correct formats, making it difficult for attackers to identify critical messages. This approach interrupt typical attack methods (reverse engineering, fuzzing, spoofing) that rely on predictable message formats and sequences. \n Example: Applying obfuscation techniques in secure position verification schemes to obscure the true location of vehicles. For example, stealth nodes and obfuscated message delays can complicate an attacker’s ability to accurately track or locate a vehicle in a vehicular network."
			},
			{
				"id": "NISTLE004",
				"name": "EXPUNGE",
				"description": "Removing compromised resources to make the vehicle return to a safe state to prevent future attacks.",
				"impact_on_risk": "Reduce the likelihood of impact of future attacks",
				"expected_result": "- A malfunctioning or compromised component, such as an ECU, is restored to normal operation, ensuring it performs as expected within safe parameters. Although AV systems currently lack the capability to refresh software/firmware at random intervals, they do offer methods for secure rollback, allowing the system to revert to a known safe state. \n - The adversary's control is disabled, which temporarily or permanently reduces the adversary's capabilities. \n - Adversary-controlled resources, like infected software or corrupted hardware, are unusable and isolated, preventing further damage.",
				"examples": "Example: Reconfiguration and remove unused or unsusable resource, such as a compromised OBD-II dongle or USB. \n Example: Roll back the vehicle's ECUs to a safe state, or verify firmware signatures to remove malware and restore the system to trusted configurations. This is akin to the rollback method described in CI89, where unsafe updates can be replaced with stable versions."
			},
			{
				"id": "NISTLE005",
				"name": "PREEMPT",
				"description": "Removing/disabling conditions needed for the attack",
				"impact_on_risk": "Reduce the likelihood of occurrence.",
				"expected_result": "- The adversary’s payload or methods cannot be applied because the attack surface is removed. \n - The adversary don't have enough resource or condition to start the attack.",
				"examples": "Example: Dynamically changing RSU configurations and communication range and making the network infrastructure unpredictable. This scheme making it harder for attackers to exploit and minimizing their vulnerability to sustained attacks \n Example: Implement IP shuffling to create non-persistent connectivity and dynamically reallocates resources across network. By frequently changing IP addresses in SDN for vehicle, the system prevents attackers from establishing a fixed path to a target, thereby reducing the likelihood of successful attacks targeting specific network component. \n Example: Regularly or randomly scan for and patch software vulnerabilities in ECUs to mitigate potential threats, in line with industry standards such as CI67, CI66, and CI90. This ensure that any vulnerabilities and controlled resouces are promptly addressed and secured."
			},
			{
				"id": "NISTLE006",
				"name": "NEGATE",
				"description": "Ensures that even if an attack occurs, it does not achieve its intended impact.",
				"impact_on_risk": "Reduce the likelihood of impact.",
				"expected_result": "- The adversary can launch an attack but it is ineffective because the assumptions or conditions needed for success are no longer valid. \n - The intended impact of the attack is mitigated or entirely neutralized.",
				"examples": "Example: Regularly or randomly scan for and patch software vulnerabilities in ECUs to mitigate potential threats, in line with industry standards. This ensure that any vulnerabilities and controlled resouces are promptly addressed and secured. \n Example: Use diversity software architecture such as: Instruction Set Randomization (ISR), Address Space Randomization(ASR),  Data Space Randomization (DSR) to prevent memory corruption attacks like code injection."
			},
			{
				"id": "NISTLE007",
				"name": "CONTAIN",
				"description": "Limiting the effects of an attack to a smaller subset of systems",
				"impact_on_risk": "Reduce the level of impact.",
				"expected_result": "The adversary affects fewer vehicle systems than intended, reducing their overall impact. ",
				"examples": "Example: Implement network segmentation within the vehicle’s internal network to isolate compromised ECUs. For instance, isolate the infotainment system to a non-critical CAN bus to prevent potential attacks from affecting critical vehicle functions. Alternatively, adopt modern vehicle architectures, such as domain-centralized or vehicle cloud computing architectures, which inherently separate functions by domain and integrate enhanced security components in each domain controller."
			},
			{
				"id": "NISTLE008",
				"name": "DEGRADE",
				"description": "Ensuring not all targeted systems are equally vulnerable or affected, such as architecture diversity",
				"impact_on_risk": "Reduce the likelihood of impact, and/or reduce the level of impact.",
				"expected_result": "Not all targeted vehicle systems are affected, or they are affected to a lesser degree than intended. ",
				"examples": "Example:  Use diverse software versions, operating systems (e.g., QNX, AGL, Android), multiple protocol standards (e.g., CAN, LIN, FlexRay, Ethernet), or varied configurations across ECUs. This diversity ensures that if a malware attack or vulnerability exploit occurs, it can only successfully compromise certain targeted systems, while others remain unaffected or are impacted to a lesser extent."
			},
			{
				"id": "NISTLE009",
				"name": "DELAY",
				"description": "Implementing measures that increase the time required for an attack to succeed, and it may even prevent the attack from achieving its intended goals.",
				"impact_on_risk": "Reduce the likelihood of impact, and/or reduce the level of impact.",
				"expected_result": "The adversary achieves their goals but not within the intended timeline.",
				"examples": "Example: Implement a layered defense-in-depth approach within the vehicle network, employing a range of protection measures. These include firewalls and access controls at the gateway, secure communication between user devices and telematics, secure firmware updates, and fail-safe mechanisms for critical functions. Additionally, authentication and encryption layers for essential vehicle systems, such as advanced UDS  Security Access Algorithms. These methods add further delays, requiring attackers to expend more time to compromise these systems."
			},
			{
				"id": "NISTLE010",
				"name": "EXERT",
				"description": "Increases the cost or effort required for an adversary to achieve their objectives.",
				"impact_on_risk": "Reduce the likelihood of impact.",
				"expected_result": "- The adversary abandons or reduces their planned activities due to the increased effort or resources required. \n - The adversary achieves their goals, but only by committing more resources, reducing their overall efficiency.",
				"examples": "Example: Implement a layered defense-in-depth approach within the vehicle network, employing a range of protection measures. These include firewalls and access controls at the gateway, secure communication between user devices and telematics, secure firmware updates, and fail-safe mechanisms for critical functions. Additionally, authentication and encryption layers for essential vehicle systems, such as advanced UDS  Security Access Algorithms . These methods add further delays, requiring attackers to expend more time to compromise these systems. \n Example: Introducing randomized CAN bus traffic patterns or noise messages to obscure the correct formats, making it difficult for attackers to identify critical messages. This approach interrupt typical attack methods (reverse engineering, fuzzing, spoofing) that rely on predictable message formats and sequences. \n Example: Apply encrypted authentication protocols on vehicle communication systems, such as CAN, LIN, and FlexRay, to make it more challenging for attackers to understand the protocol interactions. This increases the complexity and cost of attacks, as attackers must first decipher the encrypted communications to exploit them"
			},
			{
				"id": "NISTLE011",
				"name": "SHORTEN",
				"description": "Limiting the duration of an attack's impact, this ensures that vehicle systems can quickly recover or switch to backup systems, reducing overall downtime.",
				"impact_on_risk": "Reduce the level of impact.",
				"expected_result": "The time period during which the adversary’s activities impact vehicle systems is limited.",
				"examples": "Example: Implement safety mechanisms, such as redundant systems with two independent components. If one component is compromised, the other component continues functioning, thereby nullifying the attack’s impact. This dual-redundancy setup ensures that even if one system fails, the vehicle’s critical operations remain unaffected [CI95, CI54]."
			},
			{
				"id": "NISTLE012",
				"name": "REDUCE",
				"description": "Decreasing the level of damage by restoring or reconfiguring affected systems.",
				"impact_on_risk": "Reduce the level of impact.",
				"expected_result": "The damage to vehicle systems or operations from adversary activities is reduced due to partial restoration or reconfiguration of affected systems.",
				"examples": "Example: Restore vehicle systems from backups or use redundancy to limit the impact of a compromised ECU. For instance, restore firmware from a clean state after detecting unauthorized modifications, thereby ensuring the system returns to a safe operational condition. \n Example: Validate firmware, software, and information update behaviors to detect suspicious activity. This can include checking boot integrity and using cryptographic hashes to verify data integrity, preventing compromised software from going undetected."
			},
			{
				"id": "NISTLE013",
				"name": "DETECT",
				"description": "Identifying a threat event or its effects by discovering that the event is occurring, has occurred.",
				"impact_on_risk": "Reduce the likelihood of impact, and reduce the level of impact (depending on responses).",
				"expected_result": "The adversary’s activities are identified and become vulnerable to defensive measures.",
				"examples": "Example: The defender uses real-time monitoring tools or Intrusion Detection Systems (IDS) to detect anomalies in vehicle communication patterns, allowing for timely identification and response to potential threats."
			},
			{
				"id": "NISTLE014",
				"name": "SCRUTINIZE",
				"description": "Analysing of vehicle-specific attacks, such as examining compromised ECUs or abnormal network traffic, to understand how the attack occurred and how similar threats can be mitigated in the future",
				"impact_on_risk": "Reduce the likelihood of impact.",
				"expected_result": "- The adversary loses the advantages of uncertainty and confusion. \n - The defender gains insights into the adversary’s tactics by analyzing malicious code or behavior patterns.",
				"examples": "Example: Deploy honeypots within the vehicle’s network to attract and capture adversary attempts to exploit vehicle systems. The collected data can then be analyzed to understand attack behaviors and refine defenses. \n Example: Perform forensic analysis on vehicle systems such as infotainment, OBD-II ports, key fobs, and event data recorders. This helps identify attacker goals, methods, and potential system vulnerabilities. \n Example: Use Information Systems to track vehicle activity via UDS protocols and private manufacturer cloud platforms, such as Grafana or TeslaMate. This data serves as SOC/SIEM inputs for monitoring vehicle behavior and analyzing attack scenarios."
			},
			{
				"id": "NISTLE015",
				"name": "REVEAL",
				"description": "Share information about risk factors and the relative effectiveness of remediation approaches with partners, stakeholder community, or the general public to collectively strengthen defenses against similar attacks, ensuring that lessons learned from one vehicle's vulnerabilities are used to protect others.",
				"impact_on_risk": "Reduce the likelihood of impact, particularly in the future.",
				"expected_result": "- The adversary’s tactics become widely known, reducing their ability to replicate attacks across different vehicles or manufacturers. \n - Automotive industry stakeholders are better prepared to defend against similar attacks in the future.",
				"examples": "Example: Collaborate with industry-wide automotive cybersecurity information-sharing platforms to maintain up-to-date information on threat actors, attack events, and newly discovered ECU vulnerabilities, enabling the industry to better prepare for similar threats"
			}
		]
	},
    "references": [
        {
            "ID": "RE0001",
            "name": "A study on cyber-security of autonomous and unmanned vehicles",
			"cite": "E. Yağdereli, C. Gemci, and A. Z. Aktaş, “A study on cyber-security of autonomous and unmanned vehicles,” J. Def. Model. Simul., vol. 12, no. 4, pp. 369–381, 2015, doi: 10.1177/1548512915575803.",
            "link": "https://doi.org/10.1177/1548512915575803",
            "description": "The study by Yağdereli et al. (2015) explores the cyber-security challenges associated with autonomous and unmanned vehicles, encompassing a broad range of platforms such as autonomous cars, civilian aircraft, trains, unmanned surface vessels (USVs), and space-traversing vehicles. It categorises cyber-attacks into passive and active types, highlighting eavesdropping and traffic analysis as key passive threats, while identifying active threats like masquerading, replay attacks, message modification, and denial-of-service attacks. The study also outlines specific vulnerabilities, focusing on CAN bus protocol weaknesses in automotive systems and GPS spoofing, jamming, and signal manipulation in UAV systems. To address these risks, the authors propose mitigation strategies that include secure communication protocols for encryption and authentication, a defense-in-depth architecture, redundancy and diversity measures, secure-by-design principles, and the adoption of real-time distributed system architectures. "
        },
        {
            "ID": "RE0002",
			"name": "Cybersecurity for unmanned systems",
            "cite": "J. Yen, J. Smigal, D. Singh, J. Ricks, D. Brower, and P. Barlow, “Cybersecurity for unmanned systems,” Unmanned Syst. Technol. XIX, vol. 10195, p. 101950R, 2017, doi: 10.1117/12.2265912.",
            "link": "https://doi.org/10.1117/12.2265912",
            "description": "The study by Yen et al. (2017) addresses cryptographic challenges faced by Unmanned Systems, particularly in protecting classified information in remote and high-risk environments. It highlights the importance of addressing Size, Weight, and Power (SWaP) constraints, which are critical for smaller platforms, and ensuring secure data exchange between classified and unclassified domains through Cross Domain Solutions (CDS). The authors propose cryptographic protection methods for both Data in Transit (DIT) and Data at Rest (DAR), advocating for the use of cryptographic devices to secure traffic such as data and voice transmissions and recommending secure erasure of cryptographic keys to mitigate risks in the event of system capture. For CDS, the study suggests ensuring secure transmission of data between encrypted (classified) and unencrypted (unclassified) domains, including radios and sensors, designing modular systems with secure interfaces to facilitate upgrades and integration, and employing cryptographic systems that restrict cross-boundary communication to predefined messages controlled by strict rules."
        },
        {
            "ID": "RE0003",
            "name": "Securing unmanned autonomous systems from cyber threats",
			"cite": "B. B. Madan, M. Banik, and D. Bein, “Securing unmanned autonomous systems from cyber threats,” J. Def. Model. Simul., vol. 16, no. 2, pp. 119–136, 2019, doi: 10.1177/1548512916628335.",
            "link": "https://doi.org/10.1177/1548512916628335",
            "description": "The study by Madan et al. (2019) examines the cyber threats facing unmanned and autonomous systems, highlighting their differences and commonalities. Unmanned systems rely on remote human operators for control, whereas autonomous systems depend on sensors and autonomous functions for decision-making, though both share a reliance on sensors and controllers. The study identifies initial access threats to UAV systems, such as jamming, information theft, denial-of-service attacks, GPS and wireless jamming and spoofing, and malicious software injection. Common threats include confidentiality risks like insider leaks, wireless link sniffing, weak encryption, and capturing WPA2 handshakes, which can be mitigated using access control policies (Bell–LaPadula Model), standard encryption protocols (WPA2, WPA3, AES), secure communication practices, public key cryptography, and intrusion detection systems (IDS). Integrity threats, such as man-in-the-middle (MITM) attacks and sending fake data while masquerading as legitimate sources, can be addressed through access control policies (Biba Model), cryptographic techniques like digital signatures and hashing with message integrity codes (MIC), IPSEC authentication headers for sender verification, and real-time monitoring. Availability threats, including DoS/DDoS attacks, malware injection via buffer overflow vulnerabilities, and jamming attacks that disrupt communication frequencies, can be mitigated using spread spectrum techniques, anti-DoS/DDoS solutions like IPS and traffic filters, and tools like StackGuard or NX-bit protection to prevent executable code from exploiting buffer overflow. The authors also propose other mitigation strategies, including policy-based approaches, proactive threat identification through penetration testing, and honeypots."
        },
		{
            "ID": "RE0004",
            "name": "Vulnerability Assessment of Vehicle to Infrastructure Communication: A Case Study of Unmanned Ground Vehicle",
			"cite": "A. Abdullahi, T. Dargahi, and M. Babaie, “Vulnerability Assessment of Vehicle to Infrastructure Communication: A Case Study of Unmanned Ground Vehicle,” 2020 IEEE Globecom Work. GC Wkshps 2020 - Proc., 2020, doi: 10.1109/GCWkshps50303.2020.9367408.",
            "link": "https://doi.org/10.1109/GCWkshps50303.2020.9367408",
            "description": "The study by Abdullahi et al. (2020)investigates vulnerabilities in Vehicle-to-Infrastructure communication, using an Unmanned Ground Vehicle as a case study. It aims to demonstrate how insecure wireless communication, even with WPA2-protected Wi-Fi, and poor access controls can allow attackers to remotely compromise UGVs. The experiment was set up with a target system comprising a Husky UGV equipped with stereo cameras, LiDAR, GPS, IMUs, and an onboard Robot Operating System (ROS 1.0) computer, along with a Wi-Fi base station and OpenSSH. The attacker system utilised tools such as Kali Linux, Aircrack-ng for Wi-Fi attacks, Bettercap for wireless network reconnaissance, NMAP for network scanning, and Metasploit for vulnerability exploitation. \n The attack followed a step-by-step process. During the reconnaissance phase, the attacker performed a Wi-Fi handshake replay attack on the WPA2-protected base station and used Bettercap to map the network topology, identifying the UGV’s onboard computer, camera, and LiDAR. In the vulnerability assessment phase, the onboard computer's IP address was targeted, and open ports and services were scanned, revealing that port 22 for SSH was open. The exploitation phase involved launching an SSH brute force attack using Metasploit’s CVE-1999-0502 module and exploiting weak or default credentials to establish an SSH session with administrator privileges. This granted access to all ROS core packages running on the UGV. In the post-exploitation phase, the attacker achieved complete control over the UGV, overwriting legitimate operator commands, modifying velocity control commands, and manipulating the UGV’s speed and direction."
        },
		{
            "ID": "RE0005",
            "name": "Towards data-driven autonomous cyber defence for military unmanned vehicles-threats & attacks",
			"cite": "A. D. Kaasen, G. Grov, F. Mancini, and M. Baksaas, “Towards data-driven autonomous cyber defence for military unmanned vehicles-threats & attacks,” Proc. - IEEE Mil. Commun. Conf. MILCOM, vol. 2022-Novem, pp. 861–866, 2022, doi: 10.1109/MILCOM55135.2022.10017692.",
            "link": "https://doi.org/10.1109/MILCOM55135.2022.10017692",
            "description": "The study by Kaasen et al. (2022) explores methods to disrupt a military unmanned ground vehicle and develops a machine-learning-based detection capability. The attacks were demonstrated using the Tor Vehicle, a diesel-electric hybrid tracked vehicle equipped with LiDAR, cameras, GPS, and accelerometers for autonomous navigation. Tor uses ROS for low-level control and ROS2 for autonomous driving software, sensor drivers, and communication middleware. The experiments included testing the attacks in both simulated and real-vehicle scenarios. \nThe researchers carried out a range of attacks on the Tor Vehicle: (1) Denial of Service (DoS) attacks involved network flooding with fake UDP or ROS messages to overload system resources. (2) Topic hijacking attacks altered the generator mode, enabled or disabled brakes, activated emergency mode, modified the cooling system, and inserted fake drive commands. (3) Configuration and launch file tampering attacks involved altering sensor clock skew to cause incorrect decisions and modifying configuration files to create hidden channels for information exfiltration. The researchers collected and labeled attack messages to build an Intrusion Detection System (IDS) using machine learning models such as decision tree classifiers, k-nearest neighbors, and random forest, achieving an accuracy of 99%."
        },
		{
            "ID": "RE0006",
            "name": "Ensuring Cybersecurity of the Cyber Physical System of Combined Fleets of Unmanned Aerial, Ground and Sea Vehicles",
			"cite": "H. Zemlianko and V. Kharchenko, Ensuring Cybersecurity of the Cyber Physical System of Combined Fleets of Unmanned Aerial, Ground and Sea Vehicles, vol. 996 LNNS. Springer Nature Switzerland, 2024. doi: 10.1007/978-3-031-60549-9_29",
            "link": "https://link.springer.com/chapter/10.1007/978-3-031-60549-9_29",
            "description": "The study by H. Zemlianko and V. Kharchenko (2024) proposes a System-of-System architecture for unmanned vehicles, providing a holistic view of the system. The UV system includes UAVs, UUVs, USVs, UGVs, charging stations, control centres, cloud databases, and communication hubs. The communication infrastructure relies on satellite-based global communication and control centres. Threats to the UV system are categorised into physical, cyber, internal, and external sources. Common attacks include data manipulation, DoS, unauthorised access, and data ransom attacks. Vulnerabilities are grouped into control channels, software flaws, hardware weaknesses, and insecure data transmission protocols. \n The paper discusses several countermeasures. These include encryption protocols, secure firmware updates, multi-factor authentication, behaviour analytics, IDS, network segmentation, and redundancy mechanisms. It also introduces Intrusion Mode and Effects Criticality Analysis to qualitatively evaluate threats, vulnerabilities, attack types, consequences, UV types, likelihood, severity, and risk. Based on this analysis, the paper provides a structured matrix of criticality for risks and proposes corresponding countermeasures."
        },
		{
            "ID": "RE0007",
            "name": "Event-Triggered Adaptive Security Path Following Control for Unmanned Ground Vehicles Under Sensor Attacks",
			"cite": "H. T. Sun and C. Peng, “Event-Triggered Adaptive Security Path Following Control for Unmanned Ground Vehicles Under Sensor Attacks,” IEEE Trans. Veh. Technol., vol. 72, no. 7, pp. 8500–8509, 2023, doi: 10.1109/TVT.2023.3250709.",
            "link": "https://doi.org/10.1109/TVT.2023.3250709",
            "description": "The study of Sun et al. (2023) proposes an Event-Triggered Adaptive Security Control (ET-ASC) mechanism for unmanned ground vehicles (UGVs) to maintain path stability under sensor attacks. The approach is based on several assumptions, including that the UGV follows a fixed, predetermined route, and its position, rotation, and other dynamics are modelled using state-space representation. Additionally, attacks are modelled as state-dependent disturbances affecting the vehicle's performance. \n The ET-ASC mechanism operates by reducing communication overhead through event-triggered transmission, where sensor data is sent only when significant deviations occur. Upon receiving data, the mechanism detects sensor compromise and applies correction signals accordingly. The system continuously adjusts corrections to restore and maintain path stability. \n For validation, the proposed method was tested using MATLAB/Simulink and CarSim in a double-lane change scenario at 30 km/h. The evaluation considered three scenarios: no attack, an attack without correction, and an attack with ET-ASC. The results demonstrate that ET-ASC effectively mitigates sensor attacks, reducing lateral offset while minimising steering oscillations, lateral acceleration, and yaw rate."
        },
		{
            "ID": "RE0008",
            "name": "Towards the resilience quantification of (military) unmanned ground vehicles",
			"cite": "R. Krecht, A. Suta, Á. Tóth, and Á. Ballagi, “Towards the resilience quantification of (military) unmanned ground vehicles,” Clean. Eng. Technol., vol. 14, no. May, 2023, doi: 10.1016/j.clet.2023.100644.",
            "link": "https://link.springer.com/chapter/10.1016/j.clet.2023.100644",
            "description": "The study of Kretch et al. (2023) quantifies the resilience of military unmanned ground vehicles (UGVs). Resilience is defined as the ability of a UGV to maintain functionality or recover from faults and failures under various conditions. To achieve this, the study proposes a methodology using Process Graphs (P-Graphs) and introduces a resilience index (R). The proposed method follows a step-by-step approach, where UGVs are modelled as systems with multiple subsystems, including environmental perception (sensors and processing units), propulsion systems (engines and motors), and control units responsible for high- and low-level navigation and task execution. Based on this system model, the author examines how the system functions and identifies potential failure points when different parts malfunction. This information is then represented in a P-Graph, which illustrates the dependencies between different system components and the types of failures that may occur. \n To quantify resilience, the study defines a metric, Resilience Quantification (q), which categorises subsystem functionality into five capability levels: complete failure, minimal functionality (emergency functions only), reduced functionality (partial operation with limitations), near-full functionality (minor errors), and no failure. Furthermore, the resilience index (R) is introduced to quantify the likelihood of maintaining acceptable functionality, defined as q ≥ 0.2."
        },
		{
            "ID": "RE0009",
            "name": "Experimental security analysis of a modern automobile",
			"cite": "K. Koscher et al., “Experimental security analysis of a modern automobile,” Proc. - IEEE Symp. Secur. Priv., pp. 447–462, 2010, doi: 10.1109/SP.2010.34.",
            "link": "https://link.springer.com/chapter/10.1109/SP.2010.34",
            "description": "The study by K. Koscher et al. (2010) examines vehicle architectures and protocols, highlighting significant security challenges. It focuses on the lack of authentication and access control within the CAN protocol and identifies how various vehicle components fail to meet contemporary security standards. The authors conducted experiments to demonstrate these vulnerabilities through three testing approaches: bench testing, where the ECU was reverse-engineered in a controlled lab environment; stationary testing, which involved attacking a car mounted on a rack stand; and road testing, where attacks were tested on a closed road. The study implemented several attack methods to exploit these vulnerabilities. Packet injection techniques allowed crafted CAN packets to control critical vehicle systems, such as brakes, the engine, and instrument clusters. Fuzzing was employed to send random packets continuously, uncovering undocumented functionalities and vulnerabilities within ECUs. Additionally, firmware modification involved reverse-engineering ECU firmware to inject malicious code into the telematics unit and other vehicle modules. The researchers also executed multi-component exploits, such as manipulating speedometer readings and disabling all vehicle lights.\n The paper identifies several critical security weaknesses. The broadcast nature of CAN lacks authentication and source identifiers, enabling any node to impersonate others. Unprotected firmware updates, devoid of encryption or signing, allow attackers to load unauthorized code. Weak access controls, including poorly enforced challenge-response mechanisms on diagnostic protocols, further exacerbate security risks across ECUs. Moreover, network bridging issues were highlighted, with the telematics ECU acting as a cross-domain connection point, enabling attacks from the low-speed to the high-speed CAN network."
        },
		{
            "ID": "RE0010",
            "name": "Comprehensive experimental analyses of automotive attack surfaces",
			"cite": "S. Checkoway et al., “Comprehensive experimental analyses of automotive attack surfaces,” Proc. 20th USENIX Secur. Symp., pp. 77–92, 2011",
            "link": "https://dl.acm.org/doi/abs/10.5555/2028067.2028073",
            "description": "The study by S. Checkoway et al. (2011) classifies vehicle attack vectors into three main categories. Physical access is achieved through service tools like OBD-II ports or PassThru devices used by manufacturers for ECU diagnostics and reprogramming, as well as media interfaces such as CDs. Short-range wireless access includes technologies like Bluetooth, Tire Pressure Monitoring Systems (TPMS), and RFID car keys. Long-range wireless access encompasses cellular communication, FM radio, and satellite communication. \n The analysis delves into the vulnerabilities of these attack vectors. For media players, a buffer overflow in the WMA parser allows arbitrary code execution. This vulnerability can be exploited by crafting a malicious WMA file that injects CAN packets when played, enabling vehicle control. PassThru devices, which connect via OBD-II ports, expose an unauthenticated API over WiFi, permitting shell-based attack injections. Malware installed on these devices during routine maintenance compromises vehicle systems. Bluetooth systems are vulnerable due to unsafe strcpy() calls in the telematics unit firmware. Exploits include Trojan apps on paired devices or brute-forcing Bluetooth PINs, leading to code execution. Cellular telematics suffer from a buffer overflow vulnerability that enables remote command execution and data exfiltration. In advanced attacks, remote code execution is achieved by sending specially crafted audio signals via a phone call to exploit telematics firmware. The potential impacts of these vulnerabilities are significant, including GPS data exfiltration, remote vehicle control, and cabin audio monitoring."
        },
		{
            "ID": "RE0011",
            "name": "Free-fall: hacking tesla from wireless to can bus",
			"cite": "S. Nie, L. Liu, and Y. Du, “Free-fall: hacking tesla from wireless to can bus,” Defcon, pp. 1–16, 2017, [Online].",
            "link": "https://www.blackhat.com/docs/us-17/thursday/us-17-Nie-Free-Fall-Hacking-Tesla-From-Wireless-To-CAN-Bus-wp.pdf",
            "description": "The study by Nie et al. (2017) presents a detailed and technical breakdown of a remote attack on Tesla Model S vehicles. The attack chain spans from wireless entry points to critical in-vehicle systems, culminating in the injection of malicious CAN bus messages. For the remote attack surface, the researchers identified Tesla's wireless connectivity features as a primary vulnerability. Tesla vehicles use Wi-Fi networks, including Tesla Guest (a hotspot for body shops and superchargers). By spoofing this hotspot and redirecting browser traffic, attackers exploited vulnerabilities in Tesla’s QtCarBrowser. After obtaining a remote shell on the browser, the researchers bypassed the AppArmor application firewall to gain access to critical processes and escalate privileges to root. From the Central Information Display (CID), they gained remote access to the Instrument Cluster (IC), Parrot Module, and Central Gateway. \n By exploiting the Gateway firmware, the researchers successfully injected CAN messages, manipulated critical vehicle functions, and introduced custom firmware into the ECU update and firmware update processes. The experiment also highlighted weaknesses in the UDS protocol, including the use of fixed seeds and XOR-based keys for security access, which enabled predictable ECU unlocking. Additionally, privileged operations, such as reading/writing memory and resetting ECUs, were achievable after bypassing the Security Access service. \n Following the report, Tesla addressed these vulnerabilities. Their efforts included updating the kernel, enforcing stricter AppArmor rules, introducing non-executable directories for binaries, and implementing signature verification for OTA updates and ECU firmware to prevent unauthorized modifications."
        },
		{
            "ID": "RE0012",
            "name": " Over-The-Air: How we remotely compromised the gateway, BCM, and Autopilot ECUs of TESLA cars",
			"cite": "S. Nie, L. Liu, Y. Du, and W. Zhang, “Over-The-Air: How we remotely compromised the gateway, BCM, and Autopilot ECUs of TESLA cars,” BlackHat USA 2018, vol. 1, pp. 1–19, 2018, [Online].",
            "link": "https://www.blackhat.com/us-18/briefings/schedule/over-the-air-how-we-remotely-compromised-the-gateway-bcm-and-autopilot-ecus-of-tesla-cars-10806",
            "description": "The study by Nie et al. (2018) demonstrates how researchers executed remote attacks on Tesla Model S/X vehicles by exploiting zero-day vulnerabilities in critical components such as the gateway ECU, Body Control Modules (BCMs), and Autopilot ECUs. Using the same initial attack vectors as their previous work, they exploited the CID’s wireless connection and leveraged a Webkit vulnerability for arbitrary code execution. They then used a kernel vulnerability (CVE-2017-6261) to escalate privileges and gain root access to the CID. \n While Tesla had previously addressed known vulnerabilities, the researchers found new zero-day exploits to achieve root access. With root access, they bypassed code-signing protections using TOCTOU and filesystem flaws to inject custom firmware into the gateway ECU, allowing manipulation of CAN messages and control over vehicle functions. They also exploited flaws in the ape-service to take control of the Autopilot ECU, used weaknesses in firmware signing and metadata to deploy malicious firmware during OTA updates and create a persistent backdoor, and injected patched firmware to customise the Easter Egg feature, demonstrating their control over body control ECUs."
        },
		{
            "ID": "RE0013",
            "name": "0-days & mitigations: Roadways to exploit and secure connected BMW cars",
			"cite": "Z. Cai, A. Wang, W. Zhang, M. Gruffke, and H. Schweppe, “0-days & mitigations: Roadways to exploit and secure connected BMW cars,” Black Hat USA, vol. 2019, p. 39, 2019.",
            "link": "https://i.blackhat.com/USA-19/Thursday/us-19-Cai-0-Days-And-Mitigations-Roadways-To-Exploit-And-Secure-Connected-BMW-Cars-wp.pdf",
            "description": "The study by Cai et al. (2019) reveals multiple vulnerabilities in the NBT Head Unit, Telematic Communication Box (TCB), and Central Gateway of BMW vehicles. The researchers demonstrated both physical and remote attack methods. For physical access, they exploited vulnerabilities via USB and OBD-II interfaces to gain root privileges on the Head Unit and Central Gateway. For remote attacks, they used a fake GSM base station to intercept TCP messages, gaining browser access and escalating to root privileges on the Head Unit. Similarly, they intercepted SMS messages and exploited a stack overflow to execute arbitrary code on the TCB. \n With root access to the Head Unit and TCB, the researchers were able to inject CAN messages onto the K-CAN bus, as both components are connected to the same bus. Additionally, they exploited diagnostic routing flaws in the Central Gateway to send unauthorized UDS messages across different CAN domains, allowing control over ECUs on other CAN buses. Both physical and remote methods ultimately enabled control over critical vehicle functions through CAN message injection and Central Gateway compromise. \n BMW promptly addressed these vulnerabilities with software updates and enhancements to the Remote Service flow."
        },
		{
            "ID": "RE0014",
            "name": "Remote Exploitation of an Unaltered Passenger Vehicle",
			"cite": "C. Miller and C. Valasek, “Remote Exploitation of an Unaltered Passenger Vehicle,” Defcon 23, vol. 2015, pp. 1–91, 2015, [Online].",
            "link": "https://www.scirp.org/reference/referencespapers?referenceid=3895347",
            "description": "The study by Miller and Valasek (2015) outlines a detailed and systematic approach to remotely hacking and controlling a 2014 Jeep Cherokee. Their research focuses on vulnerabilities in the Uconnect infotainment system, which connects to both critical (CAN-C) and comfort (CAN-IHS) networks via the Renesas V850 chip. The authors discovered a flaw in the D-Bus service, allowing them to gain root access to the infotainment head unit. They then reprogrammed the system's firmware to send harmful CAN messages. Using this compromised system, the researchers demonstrated remote control of key functions like speed, steering, and brakes, showcasing realistic attack scenarios. \n More critically, the study explores how vulnerable vehicles could be identified over cellular networks through Uconnect’s telematics capabilities. The Uconnect system, which relies on Sprint’s cellular network for features like real-time traffic updates, in-car Wi-Fi, and remote diagnostics, exposed vehicles to scanning. By identifying Sprint’s IP address ranges, the researchers could locate vehicles with active Uconnect systems. Once found, they exploited the D-Bus service to remotely run commands on multiple vehicles. This included compromising the infotainment unit, reprogramming the V850 chip, and sending malicious CAN messages. With millions of vehicles using similar systems, such an attack could scale globally. The authors even proposed a theoretical `vehicle worm` to automate scanning, exploitation, and spreading, significantly increasing the threat's impact."
        },
		{
            "ID": "RE0015",
            "name": "Detecting attacks against robotic vehicles: A control invariant approach",
			"cite": "H. Choi et al., “Detecting attacks against robotic vehicles: A control invariant approach,” Proc. ACM Conf. Comput. Commun. Secur., pp. 801–816, 2018, doi: 10.1145/3243734.3243752. ",
            "link": "https://doi.org/10.1145/3243734.3243752",
            "description": "The study of Choi et al. (2018) [1] presents a novel framework for detecting physical attacks on robotic vehicles, including drones and ground rovers. The proposed approach, known as the Control Invariant (CI) framework, verifies whether a vehicle is behaving normally by comparing its actual movements to expected behaviour based on fundamental physics and programmed control logic. \n The method consists of several key steps. First, the system performs Control Invariant Extraction by gathering information on vehicle dynamics, control algorithms, and environmental disturbances such as wind, gravity, and friction to define the vehicle’s expected behaviour. Next, the control invariant checking logic is embedded into the vehicle’s binary control software without requiring any hardware modifications. The system continuously monitors differences between the observed and predicted states, maintaining a tracking window to filter out minor, temporary variations that are not indicative of attacks. If accumulated errors exceed a predefined threshold, an alarm is triggered to indicate a potential attack. \n To evaluate its effectiveness, the CI framework was tested on 11 robotic vehicles, including quadrotors, hexarotors, and ground rovers. The results demonstrate that the framework successfully detected all tested attacks while maintaining zero false positives during normal operations, proving its reliability as a security mechanism for robotic vehicles."
        },
		{
            "ID": "RE0016",
            "name": "Security threats to automotive CAN networks. Practical examples and selected short-term countermeasures",
			"cite": "T. Hoppe, S. Kiltz, and J. Dittmann, “Security threats to automotive CAN networks. Practical examples and selected short-term countermeasures,” Reliab. Eng. Syst. Saf., vol. 96, no. 1, pp. 11–25, 2011, doi: 10.1016/j.ress.2010.06.026.",
            "link": "https://doi.org/10.1016/j.ress.2010.06.026",
            "description": "The study of Hoppe et al. (2011) investigates security threats to automotive Controller Area Network (CAN) systems by exploring four practical attack scenarios targeting window lifts, warning lights, airbags, and gateway ECUs. The first scenario involves compromising the window lift system by injecting malicious code into an ECU connected to the comfort CAN subnetwork. The attacker monitors vehicle speed and replays CAN messages to open the window when the speed exceeds 200 km/h. This results in a Denial-of-Service (DoS) attack on the window system, preventing the driver from closing the window while the malicious code continuously sends CAN messages, thereby compromising driver safety and increasing potential distractions. \n The second attack scenario targets warning lights by using a tampered ECU or an external device, such as a development board, to manipulate CAN messages. The attacker intercepts ``warning light ON`` messages and injects ``warning light OFF`` messages, disrupting the anti-theft system. As a result, the attack disables the warning indicators, allowing theft without triggering alarms. \n The third attack manipulates the airbag system using a tampered device or an external controller to simulate a functional airbag ECU. The attacker records diagnostic responses and replays them during system checks, concealing the absence of an actual airbag ECU. This attack effectively hides warning indicators and bypasses diagnostic sessions, making the airbag system appear functional when it is not. \n The final scenario exploits a vulnerability in the gateway ECU’s message filtering mechanism during diagnostics. The attack initiates a diagnostic session and sends messages using reserved CAN IDs to force the gateway to forward them to critical ECUs. This enables unauthorised access to internal vehicle communications and allows potential manipulation of safety-critical systems. \n To mitigate these security threats, the study proposes short-term countermeasures, including an Intrusion Detection System (IDS) to detect abnormal message frequencies and verify message senders. Additionally, the study suggests a proactive IT forensic approach by identifying eight forensic data types that should be collected and logged during diagnostic sessions to detect suspicious activities and potential security breaches."
        },
		{
            "ID": "RE0017",
            "name": "Remote Attacks on Automated Vehicles Sensors: Experiments on Camera and LiDAR",
			"cite": "J. Petit, B. Stottelaar, M. Feiri, and F. Kargl, “Remote Attacks on Automated Vehicles Sensors: Experiments on Camera and LiDAR,” Blackhat.com, pp. 1–13, 2015",
            "link": "https://www.blackhat.com/docs/eu-15/materials/eu-15-Petit-Self-Driving-And-Connected-Cars-Fooling-Sensors-And-Tracking-Drivers-wp1.pdf",
            "description": "The study of Petit et al. (2015) explores the vulnerability of automated vehicle (AV) sensors to remote attacks, specifically focusing on camera and LiDAR systems. The research examines different attack techniques and their impact on the perception systems of AVs. \n For camera attacks, the study investigates two primary methods: blinding the camera and confusing its auto controls. The blinding attack involves using laser diodes and LEDs to emit intense light directly into the camera’s sensor, disrupting object detection. The effectiveness of this attack depends on factors such as the wavelength of light, distance, and environmental lighting conditions, with darker environments making the attack easier. Experimental results indicate that a 650 nm laser was the most effective in impairing the camera's function. In contrast, the second attack manipulates the camera’s automatic exposure and gain settings by rapidly flashing LED pulses. This continuous exposure adjustment creates a time lag in the camera's auto-adjustment process, leading to missed objects. The experiment shows that the camera took 5.3 seconds to recover, during which it failed to detect objects. \n For LiDAR attacks, the study analyses two attack strategies: relay attacks and spoofing. The relay attack intercepts and retransmits LiDAR pulses from a different location, creating false reflections at unintended positions. The attack is executed using two transceivers: a 905 nm photodetector to capture incoming LiDAR pulses and a laser diode to retransmit the captured signal with a delay. This deception tricks the system into misjudging object distances, potentially leading to navigation errors or collisions. The spoofing attack, on the other hand, involves synchronizing with the LiDAR’s scan cycle and injecting false echoes, causing the system to detect non-existent obstacles. Multiple reflections can be introduced to simulate multiple fake objects, leading the LiDAR to classify them as real. \n To mitigate these threats, the study proposes several countermeasures. For camera attacks, redundancy through multiple cameras, the implementation of infrared filters to block unwanted light, and the use of materials that adjust transparency based on light intensity are suggested. For LiDAR attacks, the countermeasures include introducing random probing intervals to prevent synchronization by attackers, using multi-wavelength LiDAR systems to detect anomalies, and applying data fusion techniques to compare multiple sensor inputs for consistency."
        },
		{
            "ID": "RE0018",
            "name": "Autonomous vehicle ultrasonic sensor vulnerability and impact assessment",
			"cite": "B. S. Lim, S. L. Keoh, and V. L. L. Thing, “Autonomous vehicle ultrasonic sensor vulnerability and impact assessment,” IEEE World Forum Internet Things, WF-IoT 2018 - Proc., vol. 2018-Janua, pp. 231–236, 2018, doi: 10.1109/WF-IoT.2018.8355132.",
            "link": "https://doi.org/10.1109/WF-IoT.2018.8355132",
            "description": "The study of Lim et al. (2018) [10] presents a threat model where adversaries, despite lacking internal access to the vehicle, can manipulate externally exposed ultrasonic sensors. The research examines four attack scenarios in a controlled lab environment using off-the-shelf ultrasonic sensors (HC-SR04) and an Arduino to assess vulnerabilities in autonomous vehicle perception systems. \n The first attack exploits ultrasonic sensor blind spots by using thin objects such as straws, chopsticks, hairpins, or cards to evade detection. This demonstrates how small obstacles may go undetected, potentially leading to collisions. The second scenario involves physically obstructing the sensor, either at the transmitter, receiver, or both, to evaluate the impact of blockage on detection accuracy. The results confirm that any physical obstruction severely degrades the sensor’s performance. \nThe third attack employs acoustic materials, such as acoustic foam, to absorb ultrasonic waves, effectively making obstacles invisible to the sensor. This highlights the risk of adversaries placing specific materials in the environment to manipulate sensor readings. Lastly, the fourth scenario explores interference attacks by positioning two ultrasonic sensors facing each other. This setup disrupts distance measurements, causing erroneous readings and unreliable obstacle detection. \n Through these experiments, the study underscores the vulnerabilities of ultrasonic sensors in autonomous vehicles and the potential consequences of external tampering on vehicle safety and navigation."
        },
		{
            "ID": "RE0019",
            "name": "Adversarial sensor attack on LiDAR-based perception in autonomous driving",
			"cite": "Y. Cao et al., “Adversarial sensor attack on LiDAR-based perception in autonomous driving,” Proc. ACM Conf. Comput. Commun. Secur., pp. 2267–2281, 2019, doi: 10.1145/3319535.3339815",
            "link": "https://doi.org/10.1145/3319535.3339815",
            "description": "The study of Cao et al. (2019) [11] explores the feasibility of adversarial sensor attacks on LiDAR-based perception in autonomous driving, specifically investigating whether spoofed LiDAR points can manipulate machine learning-based object detection pipelines and influence autonomous vehicle (AV) decision-making. The research finds that blind spoofing methods, which operate within a narrow horizontal range (~8 degrees), are ineffective at mimicking real obstacles. \n The proposed threat model assumes that an attacker leverages LiDAR spoofing techniques to inject adversarial data into the AV perception system. The adversary is granted white-box access to the perception model, allowing them to craft targeted perturbations. Attack scenarios include both static roadside attackers and those positioned in adjacent vehicles. The primary attack objective is to introduce ``front-near obstacles`` within approximately five meters of the AV, leading to incorrect driving decisions such as sudden braking or freezing at intersections. \n To achieve this, the study introduces an attack methodology termed Adv-LiDAR, which comprises four key stages. First, input perturbation analysis is performed to model the capabilities of LiDAR spoofing, including position and distance control. Next, the attack is formulated as an optimization problem to maximize the likelihood of successfully spoofing an obstacle. A hybrid approach involving global sampling and optimization is then employed to escape local minima and improve attack success rates. Finally, the driving decision impact evaluation stage simulates attacks to assess how AVs respond to spoofed obstacles. \n The research also presents two case studies demonstrating the real-world impact of these attacks. The first, an emergency brake attack, involves spoofed obstacles forcing the AV to halt abruptly, increasing the risk of rear-end collisions. The second, an AV freezing attack, exploits phantom obstacles at a traffic light to keep the AV stationary, leading to traffic congestion. These findings underscore the potential risks of LiDAR spoofing in AV systems and highlight the need for robust countermeasures."
        },
		{
            "ID": "RE0020",
            "name": "Towards robust LiDAR-based perception in autonomous driving: General black-box adversarial sensor attack and countermeasures",
			"cite": "J. Sun, Y. Cao, Q. A. Chen, and Z. Morley Mao, “Towards robust LiDAR-based perception in autonomous driving: General black-box adversarial sensor attack and countermeasures,” Proc. 29th USENIX Secur. Symp., pp. 877–894, 2020, doi: 10.48550/arXiv.2006.16974",
            "link": "https://doi.org/10.48550/arXiv.2006.16974",
            "description": "The study of Sun et al. (2020) [12] investigates the vulnerabilities of current LiDAR-based perception models in autonomous driving, particularly their failure to account for occlusion patterns, which makes them susceptible to adversarial spoofing attacks. Two types of occlusion issues are identified: inter-occlusion, where objects hidden behind others receive fewer LiDAR points, and intra-occlusion, where distant objects naturally contain sparse point clouds due to self-occlusion. \n To exploit these weaknesses, the study introduces a black-box LiDAR spoofing attack, which follows a three-step process. In the first step, attack traces are generated by extracting data from occluded and distant vehicles in the KITTI dataset. A 3D mesh of a vehicle is then rendered using a ray-casting simulation to replicate the LiDAR scanning process. The second step involves transforming these attack traces and injecting them into the perception pipeline of the victim autonomous vehicle (AV). This attack can take two forms: digital spoofing, where attack traces are digitally merged into point clouds and tested in simulations, and physical spoofing, where laser-based devices inject attack traces into actual LiDAR sensors. The third step evaluates the attack’s effectiveness against three state-of-the-art LiDAR perception models: Apollo 5.0 (bird’s-eye view-based), PointPillars (voxel-based), and PointRCNN (point-wise). \n To mitigate these threats, the study proposes two countermeasures. The first approach, CARLO (oCclusion-Aware hieRarchy anomaLy detectiOn), employs a hierarchical detection pipeline. In the first stage, it identifies legitimate objects by ensuring they exhibit minimal LiDAR beam penetration due to their solid structure, whereas spoofed objects tend to allow more penetration due to their sparsity. In the second stage, the system detects spoofed vehicles by recognising their unnaturally high free-space ratios caused by a lack of occlusion. The second mitigation technique, SVF (Sequential View Fusion), enhances LiDAR perception by integrating neglected physical features. It projects 3D LiDAR point clouds into a front-view representation and combines them with traditional 3D representations to ensure both perspectives are effectively utilised. Additionally, SVF improves LiDAR feature extraction by classifying each point with confidence scores and detecting spoofed objects that fail to match expected occlusion properties."
        },
		{
            "ID": "RE0021",
            "name": "Can You Trust Autonomous Vehicles: Contactless Attacks against Sensors of Self-driving Vehicle",
			"cite": "Y. Chen, W. Xu, and L. Jianhao, “Can You Trust Autonomous Vehicles: Contactless Attacks against Sensors of Self-driving Vehicle,” Defcon 24, pp. 189–190, 2024, doi: 10.1145/1235.",
            "link": "https://infocon.org/cons/DEF%20CON/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Liu-Yan-Xu-Can-You-Trust-Autonomous-Vehicles-WP.pdf",
            "description": "The study of Chen et al. (2024) [13] highlights the security risks associated with sensor-based driving decisions in autonomous vehicles, demonstrating how attackers can exploit vulnerabilities in ultrasonic sensors, millimeter-wave radars, and forward-looking cameras to deceive or disable vehicle systems. The research presents contactless attack methods, including jamming and spoofing techniques, tested on a Tesla Model S in both lab and outdoor environments. \n The study details multiple ultrasonic sensor attacks. A jamming attack is executed using an Arduino device to continuously emit high-frequency sound waves (40–50 kHz), which overloads the vehicle’s sensors, causing them to misread distances or fail to detect obstacles entirely, increasing the risk of crashes during parking or low-speed driving. A spoofing attack, on the other hand, sends out specially crafted sound waves that mimic real echoes, tricking the sensors into detecting false obstacles or misjudging distances. Additionally, an acoustic quieting approach is explored, where attackers use sound-absorbing materials (passive approach) or noise cancellation techniques (active approach) to disrupt sensor signals. \n The research also investigates millimeter-wave radar attacks. A jamming attack is conducted by transmitting high-power electromagnetic waves (76–77 GHz) to interfere with the vehicle’s radar system, rendering it unable to detect objects and potentially disabling critical safety features like Autopilot. A spoofing attack involves injecting synthetic radar signals with modified frequency modulation patterns to generate false detections or distort object distances, leading to incorrect responses from safety systems such as cruise control and collision prevention. Furthermore, a replay attack captures and retransmits radar signals with a delay, creating phantom objects that mislead the vehicle into taking unnecessary actions or ignoring real obstacles. \n Lastly, the study explores camera-based attacks, particularly blinding attacks. This method uses three different light sources - high-power LED lights, laser pointers, and infrared LEDs - aimed either directly at the camera lens or at nearby objects to create strong glare. As a result, the attack can cause temporary or permanent blindness in the camera, preventing it from recognising lane markings, traffic signs, and obstacles. This disruption can influence the Advanced Driver Assistance System (ADAS), leading to unintended vehicle deviations, emergency braking, and potentially causing accidents. \n These findings underscore the severity of contactless attacks against autonomous vehicle sensors, highlighting the urgent need for more resilient sensing mechanisms and advanced countermeasures to mitigate these threats."
        },
		{
            "ID": "RE0022",
            "name": "A Practical Wireless Attack on the Connected Car and Security Protocol for In-Vehicle CAN",
			"cite": "S. Woo, H. J. Jo, and D. H. Lee, “A Practical Wireless Attack on the Connected Car and Security Protocol for In-Vehicle CAN,” IEEE Trans. Intell. Transp. Syst., vol. 16, no. 2, pp. 993–1006, 2015, doi: 10.1109/TITS.2014.2351612.",
            "link": "https://doi.org/10.1109/TITS.2014.2351612",
            "description": "The study of Woo et al. (2015) investigates the vulnerabilities of the Controller Area Network (CAN) in connected cars and demonstrates a long-range wireless attack using a real vehicle and a malicious smartphone application. The attack exploits the OBD2 diagnostic interface, which is commonly used for vehicle monitoring and maintenance. \n The step-by-step attack begins with the installation of an OBD2 scan tool on the target vehicle, which is paired with the driver’s smartphone via Bluetooth. The smartphone runs a malicious self-diagnostic application that transmits in-vehicle CAN data frames to an attacker's remote server using mobile communication networks (3G/4G). The attacker first captures CAN data frames using diagnostic tools and subsequently injects malicious data remotely through the infected smartphone. The experiment successfully demonstrates several remote attack scenarios, including dashboard distortion, engine shutdown, and unintended acceleration, highlighting the security risks associated with connected vehicle systems. \nTo mitigate these threats, the authors propose a lightweight security protocol tailored to the constraints of CAN networks. The protocol integrates encryption and authentication mechanisms, ensuring real-time message protection through a message authentication code (MAC) and AES-128 encryption. Additionally, efficient key management is implemented to facilitate secure session key distribution and periodic updates, maintaining both forward and backward secrecy. The proposed security framework was tested on a Secure-ECU and evaluated using CANoe software, demonstrating improved efficiency compared to existing security solutions."
        },
		{
			"ID": "RE0023",
			"name": "Mercedes-Benz MBUX Security Research Report",
			"cite": "Tencent Keen Security Lab, “Mercedes-Benz MBUX Security Research Report,” 2021.",
			"link": "https://keenlab.tencent.com/en/whitepapers/Mercedes_Benz_Security_Research_Report_Final.pdf",
			"description": "Tencent Lab’s research on Mercedes-Benz vehicle security uncovered multiple attack vectors targeting the T-Box, telematics system, and remote vehicle services. \n Researchers first forced the vehicle’s T-Box to downgrade from LTE to GSM using a rogue cellular base station built with USRP and OpenBTS. By jamming LTE frequencies and restricting communication to GSM, attackers positioned themselves as a man-in-the-middle (MitM), intercepting SMS messages used for remote vehicle commands. \n The team then extracted firmware from the T-Box and analyzed its software stack, encryption methods, and authentication mechanisms. They found that the vehicle communicated with backend servers using the MQTT protocol, and authentication tokens were stored locally, potentially allowing spoofed communications if extracted. Additionally, certain debugging and diagnostic functionalities remained enabled, and authentication mechanisms were not fully resistant to replay attacks. \n While analyzing the CAN bus, researchers determined that the T-Box had limited direct access, making remote takeover via telematics alone infeasible. However, attackers with physical access could modify firmware to execute unauthorized CAN commands. Furthermore, diagnostic messages and UDS-based commands presented potential avenues for further attack escalation. Lastly, some hardcoded credentials and API keys were discovered, posing a security risk if extracted."
		},
		{
			"ID": "RE0024",
			"name": "Exploiting Wi-fi Stack On Tesla Model S",
			"cite": "Exploiting Wi-Fi Stack on Tesla Model S | Keen Security Lab Blog. (n.d.). Retrieved March 19, 2025,[Online].",
			"link": "https://keenlab.tencent.com/en/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/",
			"description": "Keen Security Lab conducted an investigation into the Parrot module in the Tesla Model S, focusing on its Wi-Fi and Bluetooth functionalities. Their research uncovered vulnerabilities in both the Marvell 88W8688 Wi-Fi chip's firmware and its associated Linux driver, which could be exploited to remotely compromise the vehicle's infotainment system.\n Through reverse engineering, the team discovered a critical vulnerability in the firmware's handling of Add Traffic Stream (ADDTS) response frames. This vulnerability stemmed from improper length calculations that could lead to memory corruption and buffer overflow. By crafting malicious ADDTS response frames, the researchers could achieve arbitrary code execution within the Wi-Fi chip, enabling them to manipulate its behavior and interact with the host system. They further exploited a vulnerability in the Linux driver to escalate privileges and execute code on the CID's Linux system. \n The attack sequence involves several steps: First, the attacker sends deauthentication frames to disconnect the Tesla from its Wi-Fi network. When the vehicle attempts to reconnect, the attacker captures its MAC address. Then, they deliver a crafted ADDTS response frame to exploit the firmware vulnerability, gaining code execution on the Wi-Fi chip. Finally, they leverage the compromised Wi-Fi chip to exploit the driver vulnerability and gain control over the CID's Linux system. This attack chain potentially allows an adversary to remotely access and control the vehicle's infotainment system, with possible implications for other connected in-vehicle components. In response, Tesla has deployed a fix to these vulnerabilities"
		},
		{
			"ID": "RE0025",
			"name": "Road Decals as Trojans: Disrupting Autonomous Vehicle Navigation with Adversarial Patterns",
			"cite": "W. J. Chen, C. Y. Hsu, W. Bin Lee, C. M. Yu, and C. Y. Huang, “Road Decals as Trojans: Disrupting Autonomous Vehicle Navigation with Adversarial Patterns,” Proc. - 2024 54th Annu. IEEE/IFIP Int. Conf. Dependable Syst. Networks - Suppl. Vol. DSN-S 2024, pp. 133–140, 2024, doi: 10.1109/DSN-S60304.2024.00039.",
			"link": "https://doi.org/10.1109/DSN-S60304.2024.00039",
			"description": "The authors explores how physical adversarial patches in the form of road decals can be used to mislead object detection systems in autonomous vehicles. Existing adversarial patch attacks often fail in dynamic environments, where AVs continuously process sensor inputs. To overcome this, the authors propose an improved Expectation Over Transformation (EOT) technique that ensures adversarial patches remain effective under varying conditions, such as different distances, angles, and lighting. Unlike prior colorful adversarial patches, their method uses monochrome adversarial patches with controlled shapes, making them stealthier and easier to deploy in real-world road environments. \n The proposed attack leverages Generative Adversarial Networks (GANs) to create robust adversarial patches. The training process includes: GAN-based Adversarial Patch Generation to produces adversarial patches designed to mislead the object detector; EOT for Robustness to transform to ensure effectiveness in different real-world conditions, such as resizing, rotation, and shadowing; Then the adversarial patches are designed to mislead AVs across multiple frames. \n The attack then was tested in both simulated and real-world environments."
		},
		{
			"ID": "RE0026",
			"name": "Attacks on Machine Learning: Adversarial Examples in Connected and Autonomous Vehicles",
			"cite": "P. Sharma, D. Austin, and H. Liu, “Attacks on Machine Learning: Adversarial Examples in Connected and Autonomous Vehicles,” 2019 IEEE Int. Symp. Technol. Homel. Secur. HST 2019, pp. 1–7, 2019, doi: 10.1109/HST47167.2019.9032989.",
			"link": "https://doi.org/10.1109/HST47167.2019.9032989",
			"description": "This paper examines adversarial attacks on machine learning (ML) models in Connected and Autonomous Vehicles (CAVs), focusing on misbehavior detection and intrusion detection systems (IDS). The researchers use the VeReMi dataset—which simulates various types of vehicular misbehavior—to train their ML models. \nThe study begins by building an Intrusion Detection System using the VeReMi dataset. The researchers train four machine learning models: K-Nearest Neighbors (KNN), Random Forest (RF), Logistic Regression (LR), and Long Short-Term Memory (LSTM) to distinguish between normal and malicious behavior. Using an adversarial dataset, they generate initial attack samples and modify this data through ML and DL models to create deceptive examples that appear normal but contain attacks. They then test the IDS by feeding it these adversarial examples. The findings reveal that while traditional IDS models (KNN, RF) can detect standard attacks, they fail to identify adversarial examples. Moreover, even the more sophisticated deep learning-based IDS models (LSTM, LR) prove vulnerable to these attacks."
		},
		{
			"ID": "RE0027",
			"name": "Attacks on Machine Learning: Adversarial Examples in Connected and Autonomous Vehicles",
			"cite": "F. Aloraini and A. Javed, “Adversarial Attacks in Intrusion Detection Systems: Triggering False Alarms in Connected and Autonomous Vehicles,” Proc. 2024 IEEE Int. Conf. Cyber Secur. Resilience, CSR 2024, pp. 714–719, 2024, doi: 10.1109/CSR61664.2024.10679419.",
			"link": "https://doi.org/10.1109/CSR61664.2024.10679419",
			"description": "This paper investigates how adversarial attacks can manipulate ML-based Intrusion Detection Systems (IDSs) in Connected and Autonomous Vehicles (CAVs). This research introduces adversarial techniques that modify benign frames to appear as attacks, causing false positives (FPs). \n First, researchers train five IDS models to classify CAN frames as normal or malicious using the Car Hacking Dataset, including Deep Neural Network (DNN), Decision Tree (DT), Random Forest (RF), Extra Trees (ET), XGBoost. Then they modify normal CAN frames so that IDS misclassifies them as attacks, leading to false alarms. Specially,, they modifies only data fields (D0–D7) while keeping CAN IDs and DLC values unchanged to maintain valid CAN frame structures. The adversarial attack is performed using four attack techniques: Fast Gradient Sign Method (FGSM) – Quickly perturbs input data using gradients; Basic Iterative Method (BIM) – Repeatedly applies FGSM for stronger attacks; Projected Gradient Descent (PGD) – Adds controlled perturbations while staying within predefined limits; and Decision Tree (DT) Attack – Exploits structural weaknesses in tree-based models to force misclassification. The result show that the IDS models perform well under normal conditions, with 100% accuracy and minimal false positives. However, under adversarial attacks, IDS accuracy drops significantly, and FPs increase dramatically, with attack success rates reach up to 89%."
		},
		{
			"ID": "RE0028",
			"name": "Adversarial Attacks on Intrusion Detection Systems in In-Vehicle Networks of Connected and Autonomous Vehicles",
			"cite": "F. Aloraini, A. Javed, and O. Rana, “Adversarial Attacks on Intrusion Detection Systems in In-Vehicle Networks of Connected and Autonomous Vehicles,” Sensors, vol. 24, no. 12, pp. 1–29, 2024, doi: 10.3390/s24123848.",
			"link": "https://doi.org/10.3390/s24123848",
			"description": "This paper investigates adversarial attacks on Intrusion Detection Systems (IDSs) in In-Vehicle Networks (IVNs) of Connected and Autonomous Vehicles. \n The authors designed two IDS systems: a baseline system using Deep Neural Network (DNN) with four hidden layers, and a Multi-Tier Hybrid IDS (MTH-IDS) combining Decision Tree (DT), Random Forest (RF), and k-means clustering for anomaly detection. Both systems were trained using the Car Hacking Dataset (HCRL dataset), analyzing CAN ID, Data Length Code (DLC), and payload bytes (D0-D7). \n The researchers tested five adversarial attack techniques: Fast Gradient Sign Method (FGSM), Basic Iterative Method (BIM), Projected Gradient Descent (PGD), Carlini & Wagner (C&W) Attack, and Decision Tree (DT) Attack. These attacks modified only data payload fields (D0–D7), leaving CAN IDs and DLC values unchanged to maintain valid CAN frame structure. Their goal was to alter normal CAN frames to trigger false alarms in the IDS. \n Results showed significant degradation in baseline IDS performance, with F1 Score dropping from 95% to 38%. While the MTH-IDS demonstrated better resilience, its F1 Score still fell from 97% to 79% under attack. Additionally, up to 52.34% of normal frames were incorrectly flagged as attacks."
		},
		{
			"ID": "RE0029",
			"name": "Jamming attacks and Anti-Jamming Strategies on Car Remote Keyless Entry System",
			"cite": "C. Temaneh-Nyah and E. J. N. Shivute, “Jamming attacks and Anti-Jamming Strategies on Car Remote Keyless Entry System,” 2023 Int. Conf. Emerg. Trends Networks Comput. Commun. ETNCC 2023 - Proc., pp. 202–208, 2023, doi: 10.1109/ETNCC59188.2023.10284964.",
			"link": "https://doi.org/10.1109/ETNCC59188.2023.10284964",
			"description": "The paper examines jamming attacks on car Remote Keyless Entry (RKE) systems, analysing how signal-to-noise ratio impacts locking mechanisms. The study highlights how small, portable radio frequency jamming devices disrupt car RKE operations, which rely on 315 MHz (North America) and 433.92 MHz (Europe) frequencies.\n Attackers exploit jamming by continuously transmitting interference at the same frequency as the car key fob, preventing the vehicle from locking. They set up two signals were transmitted to a car: one from a gate motor remote (jammer) and another from a car key fob, and test it on different vehicle models to determine their vulnerability to jamming. The study used mathematical models to estimate the received power at the car RKE receiver based on transmission distance and power. \n The result shows that the likelihood of jamming depends on the relative distance between the car key fob and the jammer. Also, higher transmission power from the jammer can overpower the key fob signal, reducing SNR below acceptable levels."
		},
		{
			"ID": "RE0030",
			"name": "Jamming attacks and Anti-Jamming Strategies on Car Remote Keyless Entry System",
			"cite": "Francillon, Aurélien & Danev, Boris & Capkun, Srdjan. (2010). Relay Attacks on Passive Keyless Entry and Start Systems in Modern Cars.. IACR Cryptology ePrint Archive. 2010. 332. ",
			"link": "https://eprint.iacr.org/2010/332.pdf",
			"description": "This paper demonstrates relay attacks on Passive Keyless Entry and Start (PKES) systems used in modern cars. \n The authors construct two relay attack setups, one using a wired physical-layer relay and another using a wireless radio frequency relay, to successfully open and start vehicles while the key remains physically far from the car. \n For the relay-over-cable attack, they set up two loop antennas connected by a coaxial cable: one placed near the car's door handle to capture the Low-Frequency (LF) challenge signal sent by the car, and another placed near the owner's key fob to transmit the relayed signal, making the key believe it is close to the car. The key then transmits its UHF response, and the car receives the correct response and unlocks. \n For the relay-over-air attack, they set up two devices that communicate over a 2.5 GHz RF channel to relay the LF signals—one relay device near the car's door handle and the other near the key fob. This method is more flexible since it can work over long distances (tested up to 50 meters)."
		},
		{
			"ID": "RE0031",
			"name": "Jamming attacks and Anti-Jamming Strategies on Car Remote Keyless Entry System",
			"cite": "F. D. Garcia, D. Oswald, T. Kasper, O. Gmbh, and P. Pavlidès, “Lock It and Still Lose It — On the ( In ) Security of Automotive Remote Keyless Entry Systems,” 25th USENIX Secur. Symp., 2016.",
			"link": "https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_garcia.pdf",
			"description": "This paper exposes severe security vulnerabilities in Remote Keyless Entry (RKE) systems used by major car manufacturers. The authors demonstrate how an attacker can gain unauthorized access to vehicles by exploiting weaknesses in their cryptographic implementations. They analyze two widely used RKE schemes: VW Group's RKE system and the Hitag2 rolling code system. \n For VW Group's RKE system, they reverse-engineered the firmware of the RKE Electronic Control Units (ECUs) and found that most VW Group vehicles share a small set of global master cryptographic keys. With this vulnerability, an attacker can eavesdrop on a single rolling code transmission from a victim's key fob. Then, using the master key, they can decrypt the rolling code and generate new valid codes to unlock the car at will. \n FFor Hitag2-based RKE systems, which are used in Alfa Romeo, Chevrolet, Peugeot, Opel, Renault, Ford, and other vehicles, the authors reverse-engineered the Hitag2 rolling code system and developed a correlation attack. This attack allows an attacker to recover the cryptographic key after eavesdropping on just 4 to 8 rolling codes. To gather these rolling codes, the attacker continuously jams the final checksum byte of the rolling code transmission, preventing the car from receiving the complete signal. Since the vehicle does not respond, the victim presses the button multiple times, unaware of the attack. Each button press generates a new rolling code, which the attacker captures. Once 4–8 rolling codes are collected, the attacker can generate valid rolling codes to unlock the car. \n These vulnerabilities affect millions of cars worldwide, leaving no forensic traces and making remote vehicle theft feasible."
		},
		{
			"ID": "RE0032",
			"name": "On the Security of Remote Key Less Entry for Vehicles",
			"cite": "J. Patel, M. L. Das, and S. Nandi, “On the Security of Remote Key Less Entry for Vehicles,” Int. Symp. Adv. Networks Telecommun. Syst. ANTS, vol. 2018-December, pp. 1–6, 2018, doi: 10.1109/ANTS.2018.8710105.",
			"link": "https://doi.org/10.1109/ANTS.2018.8710105",
			"description": "This paper examines security weaknesses in existing Remote Keyless Entry (RKE) systems. The authors highlight vulnerabilities in rolling code authentication and challenge-response mechanisms, specifically referencing security flaws in Glocker et al.'s protocol. Existing RKE systems have several vulnerabilities: fixed code authentication is transmitted each time, rolling code systems suffer from cryptographic key recovery attacks, and challenge-response mechanisms are vulnerable to OBD port scan attacks—allowing attackers to extract the entire memory state of the key fob and clone it. In Glocker et al.'s protocol, attackers can recover secret keys through pattern analysis, then generate fake authentication responses to bypass security and steal vehicles. The protocol is also susceptible to OBD port scan attacks, enabling attackers to clone key fobs in seconds. \nAdditionally, the authors propose a Secure RKE System that uses a challenge-response authentication scheme with an Unclonable Security Module and Secret Unknown Cipher. This system dynamically generates encryption keys for each session, prevents key fob cloning, and protects the OBD port from unauthorized scanning by ensuring no static authentication data is stored."
		},
		{
			"ID": "RE0033",
			"name": "Gone in 360 seconds: Hijacking with hitag2",
			"cite": "[1] R. Verdult, F. D. Garcia, and J. Balasch, “Gone in 360 seconds: Hijacking with hitag2,” Proc. 21st USENIX Secur. Symp., pp. 237–252, 2012.",
			"link": "https://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final95.pdf",
			"description": "This paper examines security vulnerabilities in the Hitag2 transponder, a widely used cryptographic authentication system in vehicles. Through analysis of Hitag2's stream cipher, the authors uncovered several critical weaknesses that enable attackers to extract secret keys and bypass authentication. These vulnerabilities include a weak 48-bit key vulnerable to brute-force attacks, the absence of a proper random number generator that leaves the system susceptible to replay attacks, and predictable key derivation that allows exploitation of session dependencies. \n The researchers successfully implemented three distinct attacks against Hitag2. \n\t The Malleability Attack involves replaying authentication attempts to the key fob and extracting keystream bits to recover memory contents, including passwords and keys, completing in less than one second. \n\tThe Time/Memory Tradeoff Attack utilizes a precomputed lookup table (1.2 TB) of potential keys. By eavesdropping on authentication attempts and collecting 256 bytes of keystream, attackers can match this data against the table to recover the secret key in approximately one minute. \n\t Finally, the Cryptanalytic Attack exploits vulnerabilities in Hitag2's stream cipher that leak key bits during multiple authentication attempts. By collecting 136 authentication traces, attackers can recover the key in under six minutes."
		},
		{
			"ID": "RE0034",
			"name": "CAN Injection: keyless car theft",
			"cite": "CAN Injection: keyless car theft | Dr. Ken Tindell. (n.d.). Retrieved March 23, 2025. [Online]",
			"link": "https://kentindell.github.io/2023/04/03/can-injection/",
			"description": "This article explores a sophisticated theft method that exploits vulnerabilities in modern vehicles' Controller Area Network (CAN) bus system. Thieves begin by accessing the vehicle's headlight assembly to reach CAN bus wiring. They then connect a ``CAN Injecto``, a rogue device to these exposed wires to inject malicious messages into the vehicle's internal network. The device mimics a legitimate smart key's digital communication, tricking the vehicle into unlocking and starting without the actual key fob. \n The CAN Injector works by transmitting counterfeit messages that the vehicle interprets as coming from an authorized key. This exploit takes advantage of the CAN protocol's lack of authentication mechanisms for message verification. As a result, the vehicle accepts these fraudulent commands, giving the attacker unauthorized control."
		},
		{
			"ID": "RE0035",
			"name": "Plug-n-pwned: comprehensive vulnerability analysis of obd-ii dongles as a new over-the-air attack surface in automotive iot",
			"cite": "H. Wen, Q. A. Chen, Z. Lin, Plug-n-pwned: comprehensive vulnerability analysis of obd-ii dongles as a new over-the-air attack surface in automotive iot, in: Proceedings of the 29th USENIX Conference on Security Symposium, SEC’20, USENIX Association, USA, 2020",
			"link": "https://dl.acm.org/doi/10.5555/3489212.3489266",
			"description": "This article explores a sophisticated theft method that exploits vulnerabilities in modern vehicles' Controller Area Network (CAN) bus system. Thieves begin by accessing the vehicle's headlight assembly to reach CAN bus wiring. They then connect a ``CAN Injecto``, a rogue device to these exposed wires to inject malicious messages into the vehicle's internal network. The device mimics a legitimate smart key's digital communication, tricking the vehicle into unlocking and starting without the actual key fob. \n The CAN Injector works by transmitting counterfeit messages that the vehicle interprets as coming from an authorized key. This exploit takes advantage of the CAN protocol's lack of authentication mechanisms for message verification. As a result, the vehicle accepts these fraudulent commands, giving the attacker unauthorized control."
		},
		{
			"ID": "RE0036",
			"name": "Robotics cyber security: vulnerabilities, attacks, countermeasures, and recommendations",
			"cite": "J. P. A. Yaacoub, H. N. Noura, O. Salman, and A. Chehab, “Robotics cyber security: vulnerabilities, attacks, countermeasures, and recommendations,” Int. J. Inf. Secur., vol. 21, no. 1, pp. 115–158, 2022, doi: 10.1007/s10207-021-00545-8.",
			"link": "https://doi.org/10.1007/s10207-021-00545-8",
			"description": "The paper provides a comprehensive overview of cybersecurity in robotics, identifying key vulnerabilities, attack vectors, and real-world threats affecting robotic systems. It categorises attacks by layers, include hardware (Trojans, physical tampering), firmware (Malware, ransomware, buffer overflows),and communication (MiTM, DoS, replay, spoofing, jamming), assesses their risks, and presents countermeasures and design recommendations.\n The paper reviews the wide deployment of robots in sectors, including Industrial (automation, construction), Medical (telemedicine, robotic surgeries), Agriculture (crop monitoring), Disaster and Rescue, Police and Military (combat drones, bomb disposal) and Pandemic Response (e.g., COVID-19 delivery and enforcement drones). \n They also points out some key security issuses, include insecure communication protocols, lack of authentication and encryption, vulnerable firmware and operating systems, absence of intrusion detection and penetration testing and lack of security-by-design practices. They also shows that robots are vulnerable at multiple levels, such as network vulnerabilities (replay, sniffing, jamming), platform vulnerabilities (outdated firmware/software), application vulnerabilities (malicious apps, weak passwords), and threat actors range from insiders and cybercriminals to terrorists and state-sponsored hackers."
		},
		{
			"ID": "RE0037",
			"name": "Web Hackers vs. The Auto Industry",
			"cite": "Web Hackers vs. The Auto Industry: Critical Vulnerabilities in Ferrari, BMW, Rolls Royce, Porsche, and More. (n.d.). Retrieved March 24, 2025, [Online]",
			"link": "https://samcurry.net/web-hackers-vs-the-auto-industry",
			"description": "This article provides a detailed and revealing critical vulnerabilities across numerous major automotive brands(BMW, Rolls Royce, Ferrari, Hyundai, Honda, Nissan, Kia, Mercedes-Benz) and telematics service providers (Spireon and Reviver). Their work focused primarily on API flaws, Single Sign-On (SSO) misconfigurations, insecure backend infrastructures, and weak access control mechanisms. \n For example, vulnerabilities in BMW and Rolls Royce's SSO systems allowed attackers to impersonate any employee, gaining access to internal dealer portals and retrieving sensitive documents. Mercedes-Benz’s SSO was similarly flawed, giving access to hundreds of internal tools, from Jenkins servers to cloud deployment dashboards, some of which were vulnerable to remote code execution. Ferrari’s systems lacked basic access controls, allowing attackers to take over user accounts, manipulate administrator permissions, and manage content on Ferrari’s websites. \n Specially, the researchers found they could send commands (like unlocking or disabling starters), track vehicle locations, update firmware, and access PII.  Similarly, Reviver’s digital license plate system was found to be fully accessible by attackers, enabling tracking and administrative control over customer vehicles, including marking them as “stolen.” \n Other vulnerabilities included Hyundai, Honda, and Nissan APIs that allowed full remote control of vehicle functions and account takeover using only email addresses or VINs. In Toyota’s case, production APIs exposed user data due to lack of authentication. Also, SiriusXM was affected, with AWS keys leaked that exposed internal databases and configuration files."
		},
		{
			"ID": "RE0038",
			"name": "How I got access to 25+ Tesla’s around the world",
			"cite": "How I got access to 25+ Tesla’s around the world. By accident. And curiosity. | by David Colombo | Medium. (n.d.). Retrieved March 24, 2025, from [Online]",
			"link": "https://medium.com/@david_colombo/how-i-got-access-to-25-teslas-around-the-world-by-accident-and-curiosity-8b9ef040a028",
			"description": "This article show how the reseacher gained remote access to over 25 Tesla vehicles around the world through a third-party system misconfiguration. The vulnerability lie in insecure deployments of a third-party open-source tool called TeslaMate, which users self-host to log and visualise vehicle data. The author found instances of TeslaMate exposed online, often without proper authentication. Once accessed, these dashboards revealed Tesla API tokens—authentication credentials for Tesla’s backend services. These tokens could be used with Tesla’s official API to issue remote commands to vehicles as if they came from the legitimate owner. \n He was able to locate these insecure dashboards through basic internet scans and subdomain enumeration. In many cases, the tokens were stored unencrypted and accessible through default or misconfigured Grafana dashboards bundled with TeslaMate installations. He could found over 25 similar cases across 13 countries. \n This access allowed him to perform remote commands such as disabling Sentry Mode, unlocking doors, opening windows, and initiating Keyless Driving.  However, the author clarified he did not have control over critical driving systems such as braking or steering."
		},
		{
			"ID": "RE0039",
			"name": "Advancing Vulnerability Discovery Amid Automotive Innovation: An API Attack From Halfway Across the World",
			"cite": "Advancing Vulnerability Discovery Amid Automotive Innovation: An API Attack From Halfway Across the World - VicOne. (n.d.). Retrieved March 24, 2025, from [Online]",
			"link": "https://vicone.com/blog/advancing-vulnerability-discovery-amid-automotive-innovation-an-api-attack-from-halfway-across-the-world",
			"description": "This article demonstrated an API-based remote attack scenario against a connected vehicle as part of the Pwn2Own Automotive 2024 even. It highlights how the increasing integration of connectivity into modern vehicles, such as SIM-enabled telematics and remote APIs expands the potential attack surface for adversaries. \n In the demonstrated scenario, researchers obtained valid credentials via simulating a phishing or ransomware-based compromise for a vehicle located across the globe. Using these credentials, they remotely interacted with the vehicle’s backend API, sending commands such as retrieving door status or starting the car. These actions demonstrated that geographical distance is no barrier when weak authentication and insufficient monitoring exist."
		},
		{
			"ID": "RE0040",
			"name": "Insecure Toyota CRM exposed Mexican customer information.",
			"cite": "Insecure Toyota CRM exposed Mexican customer information. (n.d.). Retrieved March 24, 2025, from [Online]",
			"link": "https://eaton-works.com/2023/03/06/toyota-c360-hack/",
			"description": "This article discovered serious flaws in Toyota’s Customer 360 (C360) CRM system, used to manage customer data in Mexico. By modifying the JavaScript code of the development version of the CRM’s Angular-based frontend, the researcher bypassed login requirements and redirected the application to use Toyota’s production API, which was exposed within the dev app due to a loading library configuration. Critically, the production API required no authentication, allowing any user with the correct endpoint and request format to retrieve real customer information. \n Exploited data included customers' full names, phone numbers, email addresses, physical addresses, tax IDs, and vehicle service and ownership histories. Although the production site itself was access-restricted, the dev app’s source code included the production API paths, making it possible to query sensitive production data without proper credentials."
		},
		{
			"ID": "RE0041",
			"name": "Adventures in Automotive Networks and Control Units",
			"cite": "C. Valasek and C. Miller, “Adventures in Automotive Networks and Control Units,” Tech. White Pap., p. 99, 2013, [Online].",
			"link": "http://www.ioactive.com/pdfs/IOActive_Adventures_in_Automotive_Networks_and_Control_Units.pdf",
			"description": "This paper explores post-exploitation attack vectors in modern vehicles, including a 2010 Ford Escape and a 2010 Toyota Prius by leveraging CAN message injection. After gaining code execution on an ECU, the authors demonstrate how adversaries can inject CAN messages, both normal and diagnostic to manipulate vehicle functions like braking, steering, acceleration, speedometer, and seat belts. They reverse-engineer diagnostic services based on ISO 14229 (UDS) and ISO-TP and show how these services can be exploited to control ECUs directly via the OBD-II port using tools like EcomCat and Techstream. The study includes firmware reprogramming, SecurityAccess bypass, and manipulation of services such as DiagnosticSessionControl, RoutineControl, and WriteMemoryByAddress."
		},
		{
			"ID": "RE0042",
			"name": "Supply Chain Compromise",
			"cite": "ATT&CK Supply Chain Compromise, Retrieved March 27, 2025. [Online].",
			"link": "https://attack.mitre.org/techniques/T1195/",
			"description": "This link describes the Supply Chain Compromise technique in the Enterprise domain of the ATT&CK database."
		},
		{
			"ID": "RE0043",
			"name": "There Will Be Glitches Extracting and Analyzing Automotive Firmware Efficiently",
			"cite": "N. Timmers, “There Will Be Glitches Extracting and Analyzing Automotive Firmware Efficiently,” BlackHat, pp. 1–7, 2018.",
			"link": "https://raelize.com/upload/research/2018/2018_escareu_There-Will-Be-Glitches-Whitepaper.pdf",
			"description": "This paper demonstrates how hardware fault injection attacks can be used to extract and analyse automotive firmware. The authors use an instrument cluster ECU as their target and focus on extracting firmware and learning how the ECU behaves internally. They demonstrate Voltage Fault Injection to successfully extract firmware from the target. Once firmware was obtained, they built a custom emulator to efficiently reverse-engineer the firmware outside of the vehicle hardware. Through dynamic analysis like taint tracking, execution tracing, and CAN fuzzing, they identify security mechanisms and even extract ECU secrets like keys."
		},
		{
			"ID": "RE0044",
			"name": "The Car Hacker ’ s Handbook",
			"cite": "C. Smith, N. Starch, and P. Isbn, The Car Hacker ’ s Handbook, no. April. 2016.",
			"link": "https://www.amazon.com/Car-Hackers-Handbook-Penetration-Tester/dp/1593277032",
			"description": "The book provides a comprehensive guide to automotive penetration testing. The authors introduce core vehicle components and protocols like CAN, LIN, and OBD-II, along with tools and techniques for reverse engineering CAN traffic. It details how to sniff CAN messages using tools like can-utils, interpret message IDs, and identify control functions by monitoring changes during vehicle interaction (e.g., pressing pedals, toggling switches). \n The book also explores attack surfaces including diagnostic functions, telematics units, infotainment systems, and firmware updates. It covers wireless and physical access methods, ECU reprogramming, and building low-cost test benches."
		},
		{
			"ID": "RE0045",
			"name": "On the road with third-party apps: Security analysis of an in-vehicle app platform",
			"cite": "B. Eriksson, J. Groth, and A. Sabelfeld, “On the road with third-party apps: Security analysis of an in-vehicle app platform,” VEHITS 2019 - Proc. 5th Int. Conf. Veh. Technol. Intell. Transp. Syst., no. Vehits, pp. 64–75, 2019, doi: 10.5220/0007678200640075.",
			"link": "https://doi.org/10.5220/0007678200640075",
			"description": "This paper explores the security of enabling third-party applications in modern vehicles. It focuses on Android Automotive, an emerging platform integrated directly into vehicles rather than running on connected smartphones. The authors perform a systematic security analysis of the Android Automotive OS, using a real-world case study of Volvo's Android-based infotainment system. \n The paper outlines three main attack categories: \n\t (1) Disturbance attacks: These include SoundBlast and Media Hijack. SoundBlast uses AudioManager to play loud or repeated audio that may distract the driver. Media Hijack interrupts other apps' media playback by manipulating the media session. \n\t (2) Denial-of-Service attacks: These include Fork Bomb and Service Disruption. Fork Bomb creates excessive processes to crash system components, while Service Disruption crashes media apps like Spotify by abusing their APIs. \n\t (3) Exfiltration attacks (Privacy): These include Audio Recording + Upload and No-INTERNET-Exfiltration. Audio Recording + Upload records audio and exfiltrates it using an implicit intent to another app that has Internet permission. No-INTERNET-Exfiltration bypasses permission control by leveraging system apps to leak sensitive data like audio recordings or location. \n The authors analyze how Android Automotive exposes functionality through undocumented or poorly protected APIs. They demonstrate that sensitive operations often lack permission checks, APIs like AudioManager are overly permissive, and app interactions via Intents can be abused for lateral functionality. They also introduce AutoTame, a tool that analyzes apps for misuse of platform APIs and unsafe behaviors. The tool employs FlowDroid and Amandroid for taint analysis, identifying information flows from sensitive sources (like microphones) to potential exfiltration sinks."
		},
		{
			"ID": "RE0046",
			"name": "CAN Message Injection",
			"cite": "C. Miller and C. Valasek, “CAN Message Injection,” pp. 1–29, 2016, [Online].",
			"link": "http://illmatics.com/can%20message%20injection.pdf",
			"description": "This paper presents a detailed investigation into CAN message injection attacks using real-world vehicles. The researchers demonstrate how to inject crafted CAN messages from a compromised ECU to control target ECUs. Rather than fully reverse-engineering messages, they record normal CAN traffic (such as while pressing brakes) and replay those messages to replicate the action. They emphasize that the timing and frequency of messages are critical to overriding legitimate ones. The researchers show that malicious reprogramming of certain ECUs (such as the Parking Assist Module) enables persistent control. They also explore how gateway ECUs and bus segmentation affect an attacker's ability to move laterally or inject messages across networks. Their demonstrations include unlocking doors, applying brakes, changing gear positions, and disabling ABS through message injection. The attacks also encompass injecting messages from the telematics unit or compromised head unit to critical ECUs, as well as achieving persistent compromise through firmware reflashing."
		},
		{
			"ID": "RE0047",
			"name": "Worm Epidemics in Vehicular Networks",
			"cite": "O. Trullols-Cruces, M. Fiore, and J. M. Barcelo-Ordinas, “Worm Epidemics in Vehicular Networks,” IEEE Trans. Mob. Comput., vol. 14, no. 10, pp. 2173–2187, 2015, doi: 10.1109/TMC.2014.2375822.",
			"link": "http://doi.org/10.1109/TMC.2014.2375822",
			"description": "This paper introduces the risk of mobile worm epidemics in vehicular networks. Unlike traditional computer worms that scan IP addresses, vehicular worms leverage vehicle mobility to discover nearby targets. The authors examine two propagation modes: broadcast carriers, which infect all nearby vehicles simultaneously, and unicast carriers, which infect one target at a time. Using real traffic data—including vehicle speed, inter-arrival time, communication range, and penetration rate—the authors develop a numerical model to estimate worm propagation speed. Their results show that even with a minimal penetration rate of 1%, a relatively fast worm (1-second propagation latency) can infect most connected vehicles in a region like Zurich within minutes. The location of initial infection proves crucial to spread speed, with outbreaks starting in high-traffic areas achieving faster and wider propagation."
		},
		{
			"ID": "RE0048",
			"name": "A Stealth, Selective, Link-Layer Denial-of-Service Attack Against Automotive Networks",
			"cite": "Lingguang Lei et al., “A Stealth, Selective, Link-Layer Denial-of-Service Attack Against Automotive Networks,” Int. Conf. Detect. Intrusions Malware, Vulnerability Assessment., vol. 1, pp. 185–206, 2017, doi: 10.1007/978-3-319-60876-1.",
			"link": "http://doi.org/10.1007/978-3-319-60876-1",
			"description": "This paper introduces a stealthy denial-of-service (DoS) attack on automotive CAN networks that operates below the frame level, making it invisible to frame-based IDS/IPS. The attack exploits two CAN protocol weaknesses: bit error detection (where a bit error occurs if a node sends a bit but reads back a different value) and fault confinement (where every CAN node tracks its own Transmit Error Count—TEC). Each bit error increases the TEC by 8, and if TEC exceeds 255, the node enters Bus-Off state and stops transmitting and receiving. \n To implement the attack, which requires no complete frame transmission, the researchers used an Arduino Uno with MCP2551 transceiver connected to the OBD-II port. The microcontroller connects to RXD (Receive Data) to read the current bus state and TXD (Transmit Data) to inject dominant bits. The attack proceeds in two steps: First, they capture normal traffic using a CAN sniffer to identify the target ECU's CAN ID. Second, when the target ECU begins transmitting, they monitor bits in real time and inject a dominant bit (0) whenever they detect a recessive bit (1), causing a bit error for the sender. \n The researchers tested their method on a 2012 Alfa Romeo Giulietta's CAN-B and CAN-C buses. After 32 bit errors (raising TEC to 256), they successfully forced the parking sensor ECU into bus-off state with 32 malformed transmissions. The DoS attack achieved 99.9974% accuracy over 24 hours, resulting in complete denial of sensor functionality. Notably, current frame-based IDS/IPS systems prove ineffective at detecting this type of attack."
		},
		{
			"ID": "RE0049",
			"name": "Spoofing attack using bus-off attacks against a specific ECU of the CAN bus",
			"cite": "K. Iehira, H. Inoue, and K. Ishida, “Spoofing attack using bus-off attacks against a specific ECU of the CAN bus,” CCNC 2018 - 2018 15th IEEE Annu. Consum. Commun. Netw. Conf., vol. 2018-January, pp. 1–4, 2018, doi: 10.1109/CCNC.2018.8319180.",
			"link": "http://doi.org/10.1109/CCNC.2018.8319180",
			"description": "This paper presents a novel spoofing attack technique that exploits the error-handling mechanism of the CAN protocol to force a specific ECU into a bus-off state. Unlike conventional spoofing attacks, which often result in conflicts between legitimate and injected messages, the proposed approach first disables the legitimate ECU and then injects spoofed messages, allowing for full impersonation without interference or detection. This attack exploits two vulnerabilities in the CAN bus: the lack of authentication or encryption (allowing any ECU to inject frames) and the reliance on simple error counters like the Transmit Error Counter (TEC). When a node accumulates more than 255 transmission errors, it enters a bus-off state and can no longer participate in communication. \n While spoofing CAN messages is typically detectable through message timing or content checks, this attack circumvents detection by first silencing the legitimate ECU through bus-off, then spoofing without conflict. The authors demonstrate three methods to trigger the bus-off state: (1) bit error injection, (2) stuff error injection, and (3) dominant bit-holding. In the first method, the attacker synchronizes with the target ECU by monitoring the CAN bus and sending a conflicting dominant bit when the target transmits a recessive bit, causing a bit error that increments the TEC by 8. After 32 repetitions, the ECU enters bus-off state. The second method sends error frames immediately after target ECU messages, which the target recognizes as bit errors. The third and most effective method holds a dominant bit (0) long enough to rapidly increase the TEC, forcing bus-off in a single attempt. \n Once the target ECU is disabled, the attacker injects spoofed messages using the same CAN ID, rate, and format as the original. With the legitimate ECU silenced, there are no conflicts or anomalies for the receiver ECU to detect. \n The authors validated this attack using an FPGA-based prototype in both laboratory conditions and on a 2013 hybrid vehicle. In their demonstration, they successfully spoofed the engine RPM signal, making the tachometer display 6000 RPM while the vehicle was stationary and idling. The vehicle's systems accepted these spoofed messages without detecting any anomalies."
		},
		{
			"ID": "RE0050",
			"name": "WeepingCAN: A Stealthy CAN Bus-off Attack",
			"cite": "G. Bloom, “WeepingCAN: A Stealthy CAN Bus-off Attack,” no. February, 2021, doi: 10.14722/autosec.2021.23002.",
			"link": "http://doi.org/10.14722/autosec.2021.23002",
			"description": "This paper introduces a denial-of-service attack on the CAN that stealthily forces a victim ECU into a bus-off state. In the traditional bus-off attack, an attacker sends a crafted CAN frame that mirrors the target ECU's message but flips a specific bit—typically a dominant bit (0) to cause a bit error. This error is repeated over multiple retransmissions until both ECUs increase their transmit error counter (TEC) enough to enter error passive, and eventually, the victim alone continues into bus-off. \n However, this paper improves upon this approach by introducing several key changes to increase stealth. \n\t First, it disables retransmission of attack messages. Normally, when a CAN message fails to send, the device repeatedly attempts retransmission, which appears suspicious. Disabling retransmission prevents this easily detectable pattern. \n\t Second, it implements recessive injection: instead of injecting a dominant bit where the victim is sending a recessive, the authors do the opposite—sending a recessive bit (1) while the victim sends a dominant (0). This triggers a bit error and an active error flag, increasing both the attacker's and victim's TECs by 8, while appearing less suspicious. \n\t Third, it maintains attacker health through skip injection: injecting additional messages to help its own TEC recover, ensuring it doesn't reach bus-off before the victim. \n\t Finally, it randomizes the bit position where the error occurs to prevent pattern-based detection. Rather than injecting errors at the same spot in the message, which could reveal a pattern to defenders, it randomly selects a bit position within the message (such as in the data field). \n The authors tested their method in both a lab environment and on a real 2016 Kia Optima. The attack succeeded in over 75% of attempts. System logs confirmed that the victim ECU ceased transmission entirely (indicating bus-off), while the attack remained undetected."
		},
		{
			"ID": "RE0051",
			"name": "Beyond Detection : Securing Robotic Vehicles",
			"cite": "P. Dash and K. Pattabiraman, “Beyond Detection : Securing Robotic Vehicles,” pp. 209–210, 2023, doi: 10.1109/DSN-S58398.2023.00058.",
			"link": "http://doi.org/10.1109/DSN-S58398.2023.00058",
			"description": "This paper proposes a new framework called PID-Piper that can recover robotic vehicles (RVs) from physical attacks. PID-Piper combines a Feed-forward controller (FFC) with a PID controller to predict actuator signals. Unlike the PID controller, the FFC doesn't measure and compensate for errors in the RV's physical states. Instead, it proactively prevents sensor perturbations from influencing actuator signals and predicts robust signals even under attack. The FFC is built using Reinforcement Learning with reward and penalty functions, trained to minimize the impact of attack-induced sensor perturbations. PID-Piper detects attacks by monitoring the deviation between both controllers. Once an attack is detected, the FFC takes over from the PID to recover the RV. The authors evaluated PID-Piper on three simulated and three real RV systems, finding that it prevents crashes and ensures mission success in 83% of cases. However, deploying PID-Piper in new RVs faces two challenges: building the target RV-specific FFC and analysing the target RV's cyber processes. \n The authors also propose a simulation-guided approach for recovering RVs from physical attacks that can transfer to new RVs. This approach involves pre-training a Deep Reinforcement Learning model in simulation to learn safety policies that represent State → Action mapping. The pre-trained Policy model operates seamlessly alongside the RV's primary controller. This model only needs to be pre-trained in various environments, scenarios, and tasks to learn safe policies, allowing it to be transferred to new RV systems."
		},
		{
			"ID": "RE0052",
			"name": "PID-Piper: Recovering Robotic Vehicles from Physical Attacks",
			"cite": "P. Dash, G. Li, Z. Chen, M. Karimibiuki, and K. Pattabiraman, “PID-Piper: Recovering Robotic Vehicles from Physical Attacks,” Proc. - 51st Annu. IEEE/IFIP Int. Conf. Dependable Syst. Networks, DSN 2021, pp. 26–38, 2021, doi: 10.1109/DSN48987.2021.00020.",
			"link": "http://doi.org/10.1109/DSN48987.2021.00020",
			"description": "This paper proposes PID-Piper, a resilience framework for robotic vehicles (RVs) that autonomously detects and recovers from sensor-based physical attacks. The system uses a Feed-Forward Controller (FFC) trained with an LSTM model to mimic the PID controller's actuator outputs under normal conditions. At runtime, it monitors the deviation between FFC and PID outputs. If the deviation exceeds a threshold, PID-Piper assumes an attack has occurred. The recovery module then switches control from the PID to the FFC. The FFC was trained using engineered features to reduce parameter collinearity, which helps avoid overcompensation typical in PID logic. The system handles both overt (e.g., GPS spoofing) and stealthy attacks by comparing expected actuator behaviour against predictions. Experimental results across 6 RVs (3 real and 3 simulated) show 83% mission recovery success and 0% crash rates, outperforming earlier methods that default to emergency halts."
		},
		{
			"ID": "RE0053",
			"name": "Intrusion Response System for In-Vehicle Networks: Uncertainty-Aware Deep Reinforcement Learning-based Approach",
			"cite": "H. J. Yoon et al., “Intrusion Response System for In-Vehicle Networks: Uncertainty-Aware Deep Reinforcement Learning-based Approach,” Proc. - IEEE Mil. Commun. Conf. MILCOM, pp. 827–832, 2024, doi: 10.1109/MILCOM61039.2024.10773966.",
			"link": "http://doi.org/10.1109/MILCOM61039.2024.10773966",
			"description": "This paper presents an Intrusion Response System (IRS) that helps vehicles respond to cyberattacks like spoofing, Denial of Service (DoS), and fuzzing by selecting smart, context-aware defence actions. The system is designed for in-vehicle networks that use the CAN bus, which lacks built-in security features. Once an Intrusion Detection System (IDS) detects an attack, the IRS uses Deep Reinforcement Learning (DRL) to choose the best response strategy from a set of predefined defence actions—such as message rate limiting, software update, input validation, and access control list (ACL) enforcement. \n The response selection is formulated as a Markov Decision Process (MDP), where the system observes the attack type and decides on an action to reduce the success of the attack and keep the vehicle operational. To improve learning under uncertainty, the DRL model includes entropy regularisation, which encourages the system to explore different strategies instead of always choosing the same one. This helps the system avoid getting stuck in suboptimal responses. \n Also, the defence actions are not applied randomly. The system defines a smaller set of actions (called a sub-action space) tailored to each type of detected attack. For example, if a DoS attack is detected, the system may only consider actions like rate limiting or filtering, rather than all available defences. This design reduces decision complexity and speeds up the response. \n Through experiments on simulated attacks, the authors show that the IRS can reduce attack success by up to 60% and improve mission completion by up to 70%, compared to static or random response systems. This makes it a strong example of an adaptive response and recovery system that not only reacts to attacks but also learns to choose better defences over time while keeping vehicle safety and functionality in mind."
		},
		{
			"ID": "RE0054",
			"name": " LiDAR Data Integrity Verification for Autonomous Vehicle ",
			"cite": "R. Changalvala, H. Malik, and S. Member, “LiDAR Data Integrity Verification for Autonomous Vehicle,” vol. 7, 2019.",
			"link": "https://ieeexplore.ieee.org/document/8846700",
			"description": "This paper proposes a cross-sensor validation framework to verify LiDAR data integrity using camera and GPS data. The system first aligns LiDAR point clouds with camera imagery and GPS traces using calibration data. Anomalies are detected by measuring inconsistency between expected and actual LiDAR readings. For instance, a LiDAR spoofing attack or fault may cause point clouds that deviate significantly from camera-based or GPS-based expectations. By checking consistency across modalities, the system can detect sensor faults or attacks in real-time. It supports adaptive response by isolating compromised LiDAR readings and switching to alternative sensor sources."
		},
		{
			"ID": "RE0055",
			"name": "Real-Time Sensor Anomaly Detection and Recovery in Connected Automated Vehicle Sensors",
			"cite": "Y. Wang, N. Masoud, and A. Khojandi, “Real-Time Sensor Anomaly Detection and Recovery in Connected Automated Vehicle Sensors,” IEEE Trans. Intell. Transp. Syst., vol. 22, no. 3, pp. 1411–1421, 2021, doi: 10.1109/TITS.2020.2970295.",
			"link": "http://doi.org/10.1109/TITS.2020.2970295",
			"description": "This paper introduces a complete framework for detecting and recovering from sensor anomalies in connected automated vehicles. The main idea is to use predicted vehicle behaviour to validate whether incoming sensor values are correct. If a value appears faulty, it is replaced in real time by an estimated value to keep the vehicle safe.\n The system first uses a kinematic model to predict vehicle states like position and speed. It collects data from multiple onboard sensors, including GPS, IMU, and wheel speed sensors. These predicted values are compared against real sensor readings. If the difference (called residual) exceeds a set threshold, it indicates a potential anomaly.\n After detection, the system does not discard the data. Instead, it uses a data recovery module to substitute the faulty reading with the predicted one from the model. This allows the vehicle to continue safe operation without interruption. The method also supports data sharing with nearby vehicles or infrastructure, improving its accuracy in connected vehicle environments.\n The approach was validated using real vehicle data and simulations. It showed strong performance in identifying sudden sensor jumps and slow drifts. The recovery mechanism significantly reduced the effect of anomalies on vehicle control and improved reliability. This makes it suitable for practical use in modern connected AVs."
		},
		{
			"ID": "RE0056",
			"name": "Real-Time Sensor Anomaly Detection and Identification in Automated Vehicles",
			"cite": "F. Van Wyk, Y. Wang, A. Khojandi, and N. Masoud, “Real-time sensor anomaly detection and identification in automated vehicles,” IEEE Trans. Intell. Transp. Syst., vol. 21, no. 3, pp. 1264–1276, 2020, doi: 10.1109/TITS.2019.2906038.",
			"link": "http://doi.org/10.1109/TITS.2019.2906038",
			"description": " Each sensor is modelled using a set of linear equations that describe how the data should behave under normal conditions. A set of observers is created — one for each sensor — to estimate the expected value based on the current system state. These observers continuously compare predicted values with the real sensor output.\n The system calculates residuals, which are the differences between what each observer expects and what the sensor actually reports. To detect anomalies, the paper applies a CUSUM filter that accumulates small deviations. If the accumulated error crosses a threshold, it flags the reading as abnormal.\n Once an anomaly is detected, the system identifies the faulty sensor by analysing which observer consistently shows large residuals. This helps isolate the specific sensor responsible for the abnormal data. The system is designed to run efficiently and respond quickly, making it suitable for embedded AV platforms.\n The method was tested using real sensor data and robotic vehicle simulations. It successfully detected both rapid faults and gradual drift attacks. It also accurately identified which sensor caused the problem. This level of detection and identification supports a strong base for further resilience actions in AVs."
		},
		{
			"ID": "RE0057",
			"name": "RoboADS: Anomaly detection against sensor and actuator misbehaviors in mobile robots",
			"cite": "P. Guo, H. Kim, N. Virani, J. Xu, M. Zhu, and P. Liu, “RoboADS: Anomaly detection against sensor and actuator misbehaviors in mobile robots,” Proc. - 48th Annu. IEEE/IFIP Int. Conf. Dependable Syst. Networks, DSN 2018, pp. 574–585, 2018, doi: 10.1109/DSN.2018.00065.",
			"link": "http://doi.org/10.1109/DSN.2018.00065",
			"description": "This paper presents a real-time method for detecting and identifying sensor anomalies in automated vehicles. The proposed approach is lightweight and focuses on both detecting abnormal behaviour and pinpointing the specific faulty sensor. This is essential for automated systems that need quick, reliable decisions based on sensor data.\n The authors begin by modelling the expected behaviour of sensors using linear dynamical systems. These models define how each sensor should behave under normal conditions. A dedicated observer is constructed for each sensor, which estimates what the sensor output should be, given the system state and previous measurements. This observer runs in parallel with the real system.\n For each sensor, the system calculates a residual, which is the difference between the observer’s estimate and the actual sensor reading. Anomaly detection is performed using a CUSUM (Cumulative Sum) filter, which accumulates the residuals over time. When the cumulative residual crosses a predefined threshold, it signals that the sensor is behaving abnormally.\n Once an anomaly is detected, the system identifies the faulty sensor by comparing the residuals across all sensors. The sensor with the largest and most consistent deviation is considered the cause. This identification step is key to supporting further decision-making, such as switching to a backup sensor or triggering an alert.\n The approach is implemented with real-time constraints in mind, making it suitable for embedded systems in AVs. The authors evaluated the method using real and simulated datasets. The system accurately detected anomalies like sensor drift and spoofing and correctly identified the faulty sensor in each case. This combination of speed, accuracy, and interpretability makes the method effective for AV applications."
		},
		{
			"ID": "RE0058",
			"name": "Vehicle sensor and actuator fault detection algorithm for automated vehicles",
			"cite": "Y. Jeong et al., “Vehicle sensor and actuator fault detection algorithm for automated vehicles,” IEEE Intell. Veh. Symp. Proc., vol. 2015-Augus, no. Iv, pp. 927–932, 2015, doi: 10.1109/IVS.2015.7225803.",
			"link": "http://doi.org/10.1109/IVS.2015.7225803",
			"description": "This paper proposes a method to detect faults in both sensors and actuators of automated vehicles in real time. The goal is to increase vehicle safety by identifying malfunctions before they affect the vehicle’s behaviour. The algorithm focuses on providing quick and accurate fault detection without requiring excessive computational resources.\n The system uses a simplified vehicle dynamics model that includes position, velocity, and acceleration. This model predicts how the vehicle should move based on control inputs. The authors apply a Kalman Filter, which estimates the true vehicle state by combining the model prediction with sensor readings. The estimated states are then compared with actual sensor values.\n For each sensor, the system computes a residual, which is the difference between the expected value (from the Kalman filter) and the actual sensor measurement. If the residual exceeds a certain threshold, it is treated as a possible fault. Similarly, the system checks actuator performance by comparing the expected vehicle response (based on control commands) with the observed behaviour.\n To reduce false alarms, the method applies an additional consistency check that considers the duration and pattern of residual deviations. This helps distinguish between brief noise and actual faults. The system can also identify which sensor or actuator is faulty by isolating the source with the highest sustained residuals.\n The authors tested the algorithm using simulations and experimental vehicle data. The system successfully detected faults in sensors like GPS and IMU, and actuators such as throttle and brake. It also responded quickly and maintained low computational load. This makes the method suitable for real-time application in safety-critical AV systems."
		},
		{
			"ID": "RE0059",
			"name": "Vehicle sensor and actuator fault detection algorithm for automated vehicles",
			"cite": "Y. Jeong et al., “Vehicle sensor and actuator fault detection algorithm for automated vehicles,” IEEE Intell. Veh. Symp. Proc., vol. 2015-Augus, no. Iv, pp. 927–932, 2015, doi: 10.1109/IVS.2015.7225803.",
			"link": "http://doi.org/10.1109/IVS.2015.7225803",
			"description": "This paper explores the challenges of defending connected vehicles from malware and proposes a system-level defence framework. The authors start by identifying key difficulties in adapting traditional malware defences to automotive environments, such as real-time constraints, high safety requirements, and limited computing power in ECUs.\n To address these, they introduce a multi-layer defence system specifically designed for connected vehicles. At the base layer, the system includes code integrity checks and access control to prevent unauthorised software changes. On top of that, they add behaviour monitoring to detect abnormal runtime actions, such as code injection or unexpected control flow.\n A key component is the Vehicle Security Module (VSM), which acts as a central coordinator for collecting and analysing logs from ECUs. The VSM uses predefined security policies to detect potential malware activity. It also supports remote management, allowing software updates and forensic data retrieval in case of an incident.\n The framework also considers vehicle-to-cloud communication. It includes support for remote diagnosis and coordinated responses across multiple vehicles, helping fleet operators contain outbreaks. The authors discuss deployment feasibility and highlight that this layered approach balances security and performance for automotive use.\n This paper is one of the earliest efforts to create a holistic malware defence architecture tailored to connected vehicles. It highlights the limitations of simply porting IT-based antivirus solutions and focuses on adaptable, lightweight defences integrated into vehicle platforms."
		},
		{
			"ID": "RE0060",
			"name": "Vehicle Security: A Survey of Security Issues and Vulnerabilities, Malware Attacks and Defenses",
			"cite": "A. A. Elkhail, R. U. D. Refat, R. Habre, A. Hafeez, A. Bacha, and H. Malik, “Vehicle Security: A Survey of Security Issues and Vulnerabilities, Malware Attacks and Defenses,” IEEE Access, vol. 9, pp. 162401–162437, 2021, doi: 10.1109/ACCESS.2021.3130495.",
			"link": "http://doi.org/10.1109/ACCESS.2021.3130495",
			"description": "This paper presents a broad survey of security vulnerabilities in modern vehicles, with a dedicated focus on malware-based attacks. It categorises attacks into physical, wireless, and software-based, and explains how malware can spread through telematics units, infotainment systems, and over-the-air updates.\n The authors detail how malware can gain persistence, escalate privileges, and spread across ECUs using internal networks like CAN or automotive Ethernet. Common malware behaviours include installing rootkits, modifying firmware, and spoofing control signals to trigger unsafe actions.\n In the defence section, the paper reviews signature-based antivirus, heuristic detection, and host-based intrusion detection systems (HIDS). It emphasises the need for lightweight AV engines that can run on ECUs without slowing down vehicle functions. It also mentions the value of anomaly-based detection that learns normal behaviour and flags deviations.\n The authors advocate for combining multiple defences: strong isolation between infotainment and safety domains, secure boot, regular integrity checks, and remote attestation. The paper also covers industry trends and standards, showing how OEMs are beginning to adopt structured security frameworks.\n This survey serves as a foundational overview for understanding how malware attacks AV systems and what defence layers — including antivirus and behavioural monitoring — are available and needed for vehicle protection."
		},
		{
			"ID": "RE0061",
			"name": "Automotive Security Best Practice",
			"cite": "I. Security, “Automotive Security Best Practices,” White Pap. Intel Secur. MacAfee, 2015.",
			"link": "https://www.infopoint-security.de/medien/wp-automotive-security.pdf",
			"description": "This industry report outlines a set of best practices for securing automotive systems, including specific recommendations for malware protection. It highlights that software in modern vehicles is a growing attack surface, and strong defensive measures are needed throughout the software lifecycle.\n The paper recommends using code signing to ensure only authenticated software is installed. It advises OEMs to implement runtime monitoring to detect unusual behaviour from apps or ECUs, including scanning for malware-like patterns. Separation of domains, such as isolating infotainment from drivetrain components, is also encouraged.\n For malware defence, the report recommends lightweight antivirus and antimalware scanning, especially on updatable components like the infotainment system. It also suggests regular system integrity checks and the use of remote attestation tools to verify that ECUs have not been tampered with.\n The document emphasises that no single control is enough. A layered defence model is needed, with detection, containment, and response. This includes logging, remote updates, and forensic analysis tools.\n Although not highly technical, the paper provides a practical checklist that aligns with security goals like malware prevention, making it useful for practitioners."
		},
		{
			"ID": "RE0062",
			"name": "UN Regulation No. 155 on Cybersecurity: Uniform provisions concerning the approval of vehicles with regards to cyber security and cyber security management system",
			"cite": "UNECE, “Uniform provisions concerning the approval of vehicles with regards to cyber security and cyber security management system,” Add. 154 – UN Regul. No. 155, vol. 1958, no. March, pp. 1–194, 2020, [Online]. ",
			"link": "https://unece.org/sites/default/files/2021-03/R155e.pdf",
			"description": "UN R155 is an international regulation that requires automotive manufacturers to implement cybersecurity management systems. While it does not specify detailed technical implementations, it mandates that manufacturers be able to identify, assess, and mitigate cybersecurity risks — including malware threats.\n The regulation highlights the need to manage software updates securely, protect vehicle systems from unauthorised access, and detect abnormal system behaviour. Malware attacks are listed among the threats that OEMs must prepare for. This includes both pre-installed malicious code and post-deployment infection vectors.\n Manufacturers are expected to monitor vehicles in operation and respond to incidents. This includes implementing detection mechanisms for malicious software and unauthorised software changes. It also encourages periodic security testing, remote diagnostics, and incident response planning.\n Though the document is policy-focused, it supports the deployment of technical controls such as secure boot, code signing, intrusion detection systems, and potentially antivirus technologies in parts of the vehicle where applicable.\n UN R155 effectively sets a regulatory foundation that requires OEMs to consider malware threats and supports the use of antimalware and monitoring technologies as part of a certified cybersecurity management framework."
		},
		{
			"ID": "RE0063",
			"name": "Automotive Cybersecurity Best Practices 7: Security Development LifeCycle",
			"cite": "B. P. Guide, “Automotive Cybersecurity Best Practices 7: Security Development LifeCycle,” Auto-ISAC. ",
			"link": "https://automotiveisac.com/bpg5",
			"description": "This document outlines best practices for integrating cybersecurity throughout the vehicle development lifecycle. It presents a structured Security Development Lifecycle (SDL) framework that guides automotive developers from the design phase through to post-production support.\n In the design phase, the SDL emphasises identifying security requirements and conducting threat modelling early. During implementation, developers are advised to use secure coding techniques, static analysis tools, and avoid known unsafe programming patterns. The testing phase includes penetration testing, fuzz testing, and vulnerability scanning to identify weaknesses before deployment. Finally, the post-production phase recommends continuous monitoring, logging, patch management, and incident response planning.\n The guidance promotes collaboration between OEMs and suppliers to manage risk across the supply chain. It also calls for training developers in secure coding and encouraging a security-by-design mindset throughout the organisation. Though it is a voluntary industry best practice, the SDL supports a proactive approach to application-layer security in automotive software."
		},
		{
			"ID": "RE0064",
			"name": "BSI Standards Publication Road vehicles — Functional safety (26262-6)",
			"cite": "British Standards Institution, “BSI Standards Publication Road vehicles — Functional safety (26262-6),” 2018.",
			"link": "https://bsol.bsigroup.com/",
			"description": "This standard defines a development process for ensuring functional safety in electrical and electronic automotive systems. It includes detailed practices for software design, verification, validation, and testing to prevent hazards caused by system faults or failures.\n While the primary focus is safety rather than security, ISO 26262 promotes engineering discipline that closely aligns with secure software development. It requires traceable safety goals, structured documentation, and rigorous verification at each stage of the software lifecycle. Developers are expected to apply robust design techniques, formal reviews, and testing procedures to avoid logic errors, unexpected behaviour, or system instability.\n These structured practices not only improve safety but also reduce the likelihood of introducing vulnerabilities during development. When applied carefully, the methodology can help developers produce software that is both safe and resilient against certain types of malicious manipulation or misuse."
		},
		{
			"ID": "RE0065",
			"name": "J3061 Cybersecurity Guidebook for Cyber-Physical Vehicle Systems",
			"cite": "S. A. E. International, “J3061 Cybersecurity Guidebook for Cyber-Physical Vehicle Systems RATIONALE,” SAE Int., vol. 4970, no. 724, pp. 1–5, 2018.",
			"link": "https://www.sae.org/standards/content/j3061_201601/",
			"description": "This guidebook is the first formalised automotive-specific cybersecurity process framework proposed by SAE. It introduces a comprehensive cybersecurity lifecycle tailored for cyber-physical vehicle systems, aligning closely with ISO 26262 safety practices while focusing on security objectives.\n The guide defines a structured process similar to a Security Development Lifecycle (SDL), which includes concept development, risk assessment, product development, incident response, and post-production monitoring. It advocates integrating cybersecurity from the earliest stages of vehicle design, including the identification of assets, threats, and vulnerabilities. Developers are guided to create threat models, apply risk analysis methods like TARA (Threat Analysis and Risk Assessment), and define security goals and mechanisms.\n During product development, it emphasises secure design principles, security testing, and validation. The guide also includes organisation-level recommendations, such as setting up a cybersecurity culture, providing training, and ensuring clear roles and responsibilities. It highlights the importance of post-deployment support through logging, monitoring, and updates to address newly discovered vulnerabilities.\n Although J3061 is a guideline and not a mandatory regulation, it has served as a foundation for future standards like ISO/SAE 21434. It strongly supports the idea that developers and OEMs must follow a security-by-design methodology throughout the entire product lifecycle to reduce risks of software exploitation, poor interface design, or insecure system behaviour."
		},
		{
			"ID": "RE0066",
			"name": "A novel authentication and key agreement scheme for wireless mesh networks",
			"cite": "Z. Xin, L. Yuqin, H. Y. Tet, and H. Bin, “A novel authentication and key agreement scheme for wireless mesh networks,” NCM 2009 - 5th Int. Jt. Conf. INC, IMS, IDC, vol. PP, no. 8, pp. 471–474, 2009, doi: 10.1109/NCM.2009.93.",
			"link": "http://doi.org/10.1109/NCM.2009.93",
			"description": "This paper presents a lightweight and efficient authentication and key agreement scheme tailored for in-vehicle networks. The main objective is to secure communication among ECUs and protect against spoofing, injection, and eavesdropping attacks, particularly over the CAN bus and through the OBD-II interface.\n The core of the proposed method is the use of SRAM-based Physical Unclonable Functions (PUFs), which provide each ECU with a unique and hardware-tied identity. During vehicle startup, each ECU performs mutual authentication with a central Gateway ECU (GECU). The authentication uses a challenge-response protocol, where the ECU generates a response based on its PUF and sends it back to the GECU for validation. If successful, the GECU and ECU establish a shared session key without storing any long-term secrets in memory.\n Once authenticated, the GECU distributes session keys for secure CAN communication. Data frames on the CAN bus are authenticated using lightweight cryptographic tags derived from these keys. This ensures the integrity and authenticity of each message without encrypting the full payload, keeping the computational overhead low. The method also includes key update procedures triggered by power cycles or runtime events.\n For external access to the in-vehicle network via the OBD-II port, two additional protocols are provided. One is for physical access, where an external diagnostic tool presents an implicit certificate and is authenticated using ECC-based signatures. The second is for remote access via a smartphone, where mutual authentication is performed between the smartphone and GECU, again using certificates and cryptographic handshakes.\n The authors validate their scheme through formal verification using the Scyther tool and implement a working prototype in Go. Simulation results show that the protocol is faster and more lightweight than existing methods like TLS or SEVEC, making it suitable for real-time automotive use. The scheme effectively prevents spoofing, key leakage, and unauthorised access in both internal and external vehicle network communication."
		},
		{
			"ID": "RE0067",
			"name": "On authentication in a connected vehicle: Secure integration of mobile devices with vehicular networks",
			"cite": "K. Han, S. Divya Potluri, and K. G. Shin, “On authentication in a connected vehicle: Secure integration of mobile devices with vehicular networks,” 2013 ACM/IEEE Int. Conf. Cyber-Physical Syst. ICCPS 2013, pp. 160–169, 2013, doi: 10.1109/ICCPS.2013.6604010.",
			"link": "http://doi.org/10.1109/ICCPS.2013.6604010",
			"description": "This paper proposes a secure and practical authentication framework that allows mobile devices, such as smartphones, to interact with in-vehicle networks safely. The key challenge addressed is how to integrate user devices without exposing the CAN bus or other critical components to unauthorised access or control.\nThe authors adopt a three-phase authentication protocol built on a gateway-based architecture. This includes three main entities: the User Device (UD), the Gateway (GW), and the in-vehicle network (e.g., CAN). The protocol starts with the authentication of the gateway using a mid-term key stored in both the GW and UD. Then, a mutual authentication is performed using short-term session keys and cryptographic challenges, ensuring both parties are legitimate.\n The final phase involves request validation, where the UD can send commands or requests to ECUs via the gateway, but only after proving legitimacy. Each entity maintains keys of different lifetimes — long-term for the in-vehicle system, mid-term for the gateway, and short-term for sessions with mobile devices. This layered approach provides flexibility and limits the impact of key compromise.\nDigital certificates, random nonces, and cryptographic hashes are used to verify identity and prevent replay or impersonation. The authors also consider real-world threats, such as a compromised UD or a malicious gateway, and design the protocol to restrict damage by isolating credentials and enforcing strict access control. Specifically, the protocol does not expose direct CAN communication to the user device.\n Overall, the framework achieves secure device pairing, request filtering, and session separation while maintaining a lightweight implementation suitable for embedded automotive environments."
		},
		{		
			"ID": "RE0068",
			"name": "Simple Authentication Method for Vehicle Monitoring IoT Device With Verifiable Data Integrity",
			"cite": "M. Yazid, F. Fahmi, E. Sutanto, R. Setiawan, Aripriharta, and M. Aziz, “Simple Authentication Method for Vehicle Monitoring IoT Device With Verifiable Data Integrity,” IEEE Internet Things J., vol. 10, no. 8, pp. 7027–7037, 2023, doi: 10.1109/JIOT.2022.3228926.",
			"link": "http://doi.org/10.1109/JIOT.2022.3228926",
			"description": "This paper proposes a lightweight and simple authentication scheme designed for resource-constrained IoT devices used in vehicle monitoring systems. The goal is to ensure device identity and data integrity without the need for secure channels or complex key management. The method is particularly suitable for environments where devices may be intermittently connected and vulnerable to packet loss or desynchronisation.\n The proposed method uses parallel hash chains to derive one-time encryption keys for each transmitted message. Each IoT device and the server maintain identical hash chains in parallel. When the device sends data, it uses the current value from the hash chain to encrypt the message with AES in CTR mode and attaches a hash of the plaintext. This ensures that even if an attacker intercepts the message, the encryption key cannot be reused or reverse-engineered.\n To uniquely identify messages and prevent replay attacks, the system generates a One-Time ID (OTID) from the hash chain and a message counter. This OTID acts as a temporary pseudonym, hiding the real identity of the device while still enabling verifiable linking on the server side. The server performs decryption and compares the hash to verify both authenticity and integrity of the message.\n For authentication feedback, the server sends a confirmation message encrypted with the same key and includes an updated counter. If the device receives this confirmation, it moves to the next hash value. If not, it retransmits the message without regenerating a new key. This mechanism prevents desynchronisation and supports environments with unstable connectivity.\n Unlike other methods, this scheme does not require random number generators, secure key exchange protocols, or hardware accelerators. It also supports database-level verifiability by allowing the stored data to be cross-checked with the corresponding hash values. Overall, the method enables secure and efficient authentication of vehicle monitoring devices, making it highly appropriate for embedded automotive IoT systems."
		},
		{		
			"ID": "RE0069",
			"name": "Security authentication system for in-vehicle network",
			"cite": "H. Ueda, R. Kurachi, H. Takada, T. Mizutani, M. Inoue, and S. Horihata, “Security authentication system for in-vehicle network,” SEI Tech. Rev., no. 81, pp. 5–9, 2015.",
			"link": "https://global-sei.com/technology/tr/bn81/pdf/81-01.pdf",
			"description": "This paper presents a centralised security monitoring system for the Controller Area Network (CAN) in vehicles. CAN is widely used but lacks built-in security mechanisms, making it vulnerable to spoofing and unauthorised control. The proposed system introduces authentication and message integrity verification through a dedicated monitoring node with a customised CAN controller implemented on an FPGA.\n The system operates in two phases: (1) mutual authentication and key exchange, and (2) real-time message monitoring and spoofed message blocking. In the first phase, the monitoring node and transmission ECUs perform a challenge–response authentication using a digest generated by a hash function (SHA-256). This uses a pre-shared program code and a random seed. Once authenticated, the same digest forms the basis for generating MAC (Message Authentication Code) keys.\n In the second phase, each ECU appends a 1-byte MAC to its CAN message. The monitoring node verifies the MAC in real time. If a spoofed message is detected (e.g., an incorrect MAC), the monitoring node uses its CAN controller to send an error frame and overwrite the message before it is accepted by the bus. This ensures that spoofed messages are blocked without requiring every receiving ECU to perform verification.\n The system also protects against replay attacks by embedding a monotonic counter into the message payload. The monitoring node uses HMAC-SHA256 to verify messages based on the CAN ID, payload, counter, and the shared key. The authors evaluate the prototype using an Altera FPGA board and show that the system adds minimal latency—about 2.12 µs per message—and can detect and block spoofed messages within the critical ACK + EOF window on CAN.\n This approach allows strong authentication and spoofing detection without changing the overall CAN protocol or requiring all ECUs to be modified. Only the monitoring node needs new hardware, while ECUs need minimal software changes for MAC computation and key exchange."
		},
		{		
			"ID": "RE0070",
			"name": "ISO/SAE 21434:2021 - Road vehicles ",
			"cite": "B. S. Publication, “BS ISO/SAE 21434:2021 - Road vehicles — Cybersecurity engineering,” BSI Stand. Publ., 2019.",
			"link": "https://bsol.bsigroup.com/",
			"description": "This international standard provides a structured framework for managing cybersecurity throughout the entire lifecycle of road vehicles, including concept, development, production, operation, maintenance, and decommissioning. It applies to electrical and electronic systems in vehicles, especially those with communication interfaces such as CAN, Ethernet, Bluetooth, or V2X.\n The standard introduces a risk-based approach to cybersecurity, focusing on identifying potential threats and assessing their impact. Key activities include threat analysis and risk assessment (TARA), definition of cybersecurity goals, and allocation of cybersecurity requirements. These are aligned with the vehicle’s functions and its environment of use.\n The lifecycle model in ISO/SAE 21434 is divided into several stages: \n\t-  Governance: Setting up policies, responsibilities, and continuous improvement. \n\t - Project-dependent cybersecurity management: Applying cybersecurity plans to specific vehicle projects. \n\t - Concept phase: Performing TARA and defining cybersecurity goals and claims. \n\t - Product development: Integrating cybersecurity into system, hardware, and software development processes. \n\t - Production, operation, and maintenance: Ensuring secure production and post-deployment support. \n\t - End-of-life: Secure decommissioning of vehicle systems and data.\n The standard also defines cybersecurity assurance levels (CALs) to guide the strength of required controls based on threat severity and likelihood. Documentation, validation, and traceability are heavily emphasised to ensure transparency and repeatability.\n ISO/SAE 21434 is considered essential for OEMs, suppliers, and software developers working in the automotive domain. It ensures that cybersecurity is treated as an engineering discipline and integrated into the full lifecycle of the vehicle, helping manufacturers meet both technical and regulatory expectations."
		},
		{		
			"ID": "RE0071",
			"name": "Road vehicles — Unified diagnostic services (UDS)",
			"cite": "B. Standard, “Road vehicles — Unified diagnostic services (UDS)” BSI Stand. Publ., 2013.",
			"link": "https://bsol.bsigroup.com/",
			"description": "ISO 14229 defines the Unified Diagnostic Services (UDS) protocol used for communication between external diagnostic tools and vehicle ECUs. One of its key features is the implementation of Security Access to protect certain privileged services from unauthorised use, such as programming, ECU unlocking, or modifying safety-critical configurations.\n The Security Access mechanism follows a challenge–response model known as the Seed/Key protocol. When a diagnostic tool requests access to a secured service, the ECU responds with a random challenge value called a seed. The tool must use a predefined algorithm (typically confidential and agreed between OEM and tool vendor) to compute the corresponding key based on the seed. If the ECU verifies the key as valid, it grants temporary access to the protected service level.\n UDS defines multiple security levels (e.g., Level 1 for diagnostic configuration, Level 2 for reprogramming), and each level can have a different seed–key algorithm. The standard also includes anti-brute-force protections, such as: \n\t - Delay timers between incorrect attempts. \n\t - Lockout after a maximum number of failures. \n\t - Requirements for using unpredictable seeds to prevent precomputed keys\n  The Security Access service ensures that only authorised devices with knowledge of the correct algorithm and access policy can issue commands like writing to memory, flashing firmware, or enabling certain modes. This protects the vehicle from both external attackers and unauthorised internal tools.\n Overall, ISO 14229 provides a standardised but flexible framework for controlling privileged access in vehicle networks, and is widely used across OEMs for securing in-field diagnostics and ECU updates."
		},
		{		
			"ID": "RE0072",
			"name": "UDS Security Access for constrained ECUs",
			"cite": "M. Thompson, “UDS Security Access for constrained ECUs,” SAE Tech. Pap., vol. 2022-01–01, pp. 1–9, 2022, [Online].",
			"link": "https://doi.org/10.4271/2022-01-0132",
			"description": "This paper analyses the security risks of implementing UDS SecurityAccess on low-resource ECUs and proposes a lifecycle-aware threat model. It identifies the critical assets involved in the use of SecurityAccess, including seeds, keys, unlock counters, and the seed-key algorithms themselves. The authors argue that simply enabling UDS SecurityAccess is not sufficient—proper controls must be maintained throughout the entire ECU lifecycle, from development to decommissioning.\n A key concern raised is that keys and algorithms may be leaked or reverse-engineered during ECU development, integration testing, or post-production servicing. The paper outlines a model where adversaries could exploit insecure storage, access policies, or untrusted developers to compromise the seed-key logic. To address this, it recommends hardened development environments, access control enforcement, and the compartmentalisation of key-handling routines.\n The authors also evaluate alternative lightweight challenge–response schemes suitable for constrained ECUs and argue that cryptographic measures must be complemented by strict privilege and policy enforcement. This includes restricting access to test tools, audit logging of security-level requests, and ensuring that temporary privileged access (e.g., unlocking diagnostic modes) is revoked or time-bound.\n By analysing how UDS SecurityAccess interacts with the broader vehicle ecosystem, the paper reinforces the importance of authorisation boundaries, particularly in constrained and resource-limited environments. It highlights both technical and procedural controls as necessary parts of effective authorisation enforcement."
		},
		{		
			"ID": "RE0073",
			"name": "Hardware/Software Co-Design of an Automotive Embedded Firewall",
			"cite": "M. D. Pesé, K. Schmidt, and H. Zweck, “Hardware/Software Co-Design of an Automotive Embedded Firewall,” SAE Tech. Pap., vol. 2017-March, no. March, 2017, doi: 10.4271/2017-01-1659.",
			"link": "https://doi.org/10.4271/2017-01-1659",
			"description": "This paper presents a hybrid hardware/software firewall designed to secure Ethernet traffic in automotive gateways. The firewall inspects messages at the transport and application layers, blocking or allowing traffic based on protocol content and sender identity. It is implemented using an FPGA that acts as a first-stage filter, coupled with software-based deep packet inspection in a Linux system.\n The firewall enforces policy-based controls over who can access which services. It includes mechanisms to filter messages by source IP, MAC address, or port number, and supports dynamic rule updates. A specific use case discussed in the paper involves blocking TCP SYN flood attacks and enforcing that only authorised tools can initiate UDS sessions or other diagnostic protocols over Ethernet.\n Importantly, the software layer validates application-level commands (e.g., UDS requests) to ensure that only authenticated and authorised clients can issue commands such as ECU reprogramming. The system also supports logging and alert generation for unauthorised access attempts. These policies are maintained through both static firewall rules and context-aware rule evaluations.\n By combining hardware speed with software flexibility, the firewall enforces fine-grained authorisation policies at runtime and helps prevent abuse of diagnostic access or firmware interfaces. It acts as a central policy enforcement point for secure communication across domains."
		},
		{		
			"ID": "RE0074",
			"name": "Secure firmware updates over the air in intelligent vehicles",
			"cite": "Nilsson, D. K., & Larson, U. E. (2008). Secure firmware updates over the air in intelligent vehicles. IEEE International Conference on Communications, 380–384.",
			"link": "https://doi.org/10.1109/ICCW.2008.78",
			"description": "This paper presents a lightweight and secure protocol for firmware updates over the air (SFOTA) specifically designed for intelligent vehicles. The goal is to ensure the integrity, authenticity, confidentiality, and freshness of firmware updates in resource-constrained ECUs using wireless communication.\n The proposed protocol works in several key steps. First, the firmware binary is divided into fragments. A hash chain is created by computing each hash from the fragment and the next hash, starting from the end. The first hash (H1) and associated firmware metadata are digitally signed to ensure authenticity. Each packet is then encrypted using a symmetric key pre-shared between the portal and the vehicle. Cipher Block Chaining (CBC) mode is used for encryption to ensure confidentiality, and headers are added to indicate firmware name, version, and packet number. \n In the vehicle, the reverse process is conducted. The first packet is decrypted and verified using the portal’s public key. The firmware version is checked to ensure freshness. Each subsequent packet is decrypted and validated against the hash chain. This ensures data integrity across all packets. The vehicle discards replayed or out-of-order packets by checking version and hash consistency. \n The authors demonstrate that their protocol is secure against eavesdropping, tampering, and replay attacks on the communication channel. It also operates efficiently within the limited processing and memory capabilities of ECUs. A security analysis confirms that only one signature verification is required, and most operations rely on lightweight symmetric decryption and hashing."		
		},
		{		
			"ID": "RE0075",
			"name": "A framework for self-verification of firmwareupdates over the air in vehicle ecus.",
			"cite": "Nilsson, D. K., Sun, L., & Nakajima, T. (2008). A framework for self-verification of firmwareupdates over the air in vehicle ecus. 2008 IEEE Globecom Workshops, GLOBECOM 2008, 1–5.",
			"link": "https://doi.org/10.1109/GLOCOMW.2008.ECP.56",
			"description": "This paper addresses a critical gap in secure FOTA protocols—ensuring that the firmware is not only securely downloaded but also correctly flashed to ECU memory. The authors propose a framework that enables self-verification of firmware after flashing, using virtualization and hashing mechanisms. \n The architecture divides the ECU into two virtualised environments via the SPUMONE virtual machine: a control system (based on L4 microkernel) and a functional system. The secure FOTA protocol is first used to download the firmware binary, a verification code, and a challenge value. These are stored in the control system (trusted), while the binary is stored in RAM (untrusted). \n The flashing process begins once the vehicle is safely idle. The control system reads the firmware from RAM and writes it to ROM (functional system). Then, it calculates a hash chain on the flashed memory using the previously received challenge as a seed. The result is compared to the verification code. If they match, flashing is confirmed; otherwise, the firmware is considered tampered and the update fails. \n This verification approach prevents “time-of-check to time-of-use” attacks, where the firmware is modified after download but before flashing. The attacker is assumed to have access to RAM but not the control system or ROM. \n The system is lightweight, using only hash functions without digital signatures post-download. The hash chain includes randomness to defend against second preimage attacks. The method introduces low computational overhead and effectively protects against in-memory binary modifications."
		},
		{		
			"ID": "RE0076",
			"name": "Considerations for Cyber Security Implementation in Autonomous Vehicle Systems",
			"cite": "K. S. Lee, “Considerations for Cyber Security Implementation in Autonomous Vehicle Systems,” Int. Conf. Control. Autom. Syst., vol. 2021-October, no. Iccas, pp. 1383–1386, 2021, doi: .",
			"link": "https://doi.org/10.23919/ICCAS52745.2021.9649850",
			"description": "This paper discusses how to implement cybersecurity functions in autonomous vehicles based on international standards and regulations, particularly UN Regulation No. 155 and ISO/SAE 21434. It focuses on three key mechanisms: secure boot, secure communication, and secure debug. \n The paper starts by outlining the regulatory background. UN Regulation No. 155 mandates a Cyber Security Management System (CSMS) for vehicles, covering the entire vehicle lifecycle. While it lists threats and required protections, it doesn't prescribe specific technologies, instead referencing ISO/SAE 21434 for structured engineering approaches to cybersecurity. ISO/SAE 21434 covers design, development, operations, and decommissioning stages, mirroring ISO 26262 for safety. \n For secure boot, the vehicle verifies the integrity of application software during startup. This is done using Cipher-based Message Authentication Code (CMAC). Two strategies are discussed: sequential boot (verify all software before starting) and parallel boot (check and execute in segments). Sequential is simpler but slower; parallel is faster but more complex. \n Secure communication is achieved using the AUTOSAR Secure Onboard Communication (SecOC) protocol. The sender includes a MAC and counter in each CAN frame, calculated using a shared secret key. The receiver checks both the MAC and counter to confirm message authenticity and prevent replay attacks. If verification fails, the data is dropped. \n Secure debug protects development/debug interfaces like JTAG. Two implementations are proposed: password-protected temporary access, or permanent destruction of the debug interface after development. While the latter is more secure, it may interfere with over-the-air software updates and diagnostics. \n The paper concludes that implementing secure boot, communication, and debug interfaces is essential to address threats outlined in Annex 5 of UN R155. It emphasises careful timing in secure boot, key management in secure communication, and physical protection in debug security."		
		},
		{		
			"ID": "RE0077",
			"name": "Simple Authentication Method for Vehicle Monitoring IoT Device With Verifiable Data Integrity",
			"cite": "M. Yazid, F. Fahmi, E. Sutanto, R. Setiawan, Aripriharta, and M. Aziz, “Simple Authentication Method for Vehicle Monitoring IoT Device With Verifiable Data Integrity,” IEEE Internet Things J., vol. 10, no. 8, pp. 7027–7037, 2023, doi: 10.1109/JIOT.2022.3228926.",
			"link": "https://doi.org/10.1109/JIOT.2022.3228926",
			"description": "This paper proposes a lightweight, symmetric-key-based authentication method for vehicle-mounted IoT devices used in remote vehicle monitoring. The goal is to ensure authentication and data integrity while keeping computational and communication overhead low. \n The proposed method consists of three main phases: device registration, authentication, and data transmission with integrity checking. \n Registration Phase: When the IoT device is first installed, it registers with the cloud server. A shared secret key is issued to both the device and the server. This key will later be used to generate Message Authentication Codes (MACs). \n  Authentication Phase: To start communication, the IoT device generates a random nonce and sends it to the server. The server returns an HMAC generated using the shared key and the nonce. The device verifies the MAC to confirm that it is communicating with the genuine server. This mutual authentication prevents spoofing and replay attacks. \n Data Transmission Phase: Each data message sent from the device includes a timestamp and a MAC calculated over the data and the timestamp using the shared key. The server verifies the MAC and checks the freshness of the timestamp to ensure data integrity and prevent modification. \n The system is designed to work efficiently in constrained IoT environments. It uses symmetric encryption (HMAC with SHA-256) for low overhead, and timestamps to protect against replay attacks. The protocol does not require complex key exchanges or heavy public-key operations, making it well-suited for resource-limited vehicle IoT devices. \n The authors validate their approach by implementing a prototype and analysing its computational cost, showing that it can achieve secure authentication and data integrity with minimal resource usage."
		},
		{		
			"ID": "RE0078",
			"name": "UN Regulation on uniform provisions concerning the approval of vehicles with regards to software update and software updates management system",
			"cite": "UNECE, “UN Regulation on uniform provisions concerning the approval of vehicles with regards to software update and software updates management system,” Int. Organ., vol. 2020, no. March, pp. 1–15, 2020, [Online].",
			"link": "https://undocs.org/en/ECE/TRANS/WP.29/GRVA/2020/4",
			"description": "This regulation outlines requirements for managing software updates in vehicles, ensuring they are safe, secure, and verifiable. It introduces the Software Update Management System (SUMS), which must be implemented by vehicle manufacturers to gain type approval. The regulation applies to both over-the-air (OTA) and physical updates, and mandates documentation, traceability, and cybersecurity assurance for all software changes. \n The SUMS framework is built on key pillars: software version control, update verification, update integrity, and vehicle approval compliance. It requires manufacturers to track software versions on each ECU, validate updates before deployment, and ensure that any update does not compromise safety or cybersecurity. \n Code signing is implicitly mandated to ensure that only authentic, untampered software is installed. Each software update must be verifiably signed and its integrity checked before execution. This supports boot integrity, where the system only boots trusted software, often in conjunction with secure boot techniques. \n During the update process, the manufacturer must: \n Identify and authorise the update for a specific vehicle or ECU. \n Securely deliver the update, protecting it against tampering or replay attacks. \n Verify the digital signature and metadata before installation. \n Confirm successful installation and maintain traceability records. \n The regulation supports lifecycle security and includes provisions for decommissioning, ensuring no leftover vulnerabilities remain. Overall, R156 ensures that code integrity and trust are preserved throughout the update and boot lifecycle."
		},
		{		
			"ID": "RE0079",
			"name": "In-vehicle CAN message authentication: An evaluation based on industrial criteria.",
			"cite": "Nowdehi,  N., Lautenbach, A., & Olovsson, T. (2017). In-vehicle CAN message authentication: An evaluation based on industrial criteria. IEEE Vehicular Technology Conference, 2017-September, 1–7.",
			"link": "https://doi.org/10.1109/VTCFall.2017.8288327",
			"description": "The paper evaluates ten different methods for authenticating in-vehicle CAN messages, focusing on their practical feasibility within automotive environments. The authors compare these authentication techniques against five key industrial criteria: cost-effectiveness, backward compatibility, support for vehicle repair and maintenance, detailed implementation requirements, and acceptable overhead. The evaluation reveals that none of the methods fully satisfy all five criteria, highlighting the inherent challenges in balancing security with the practical needs of automotive systems. Despite this, the study underscores the importance of message authentication in enhancing CAN network security, emphasizing that implementing these methods requires careful consideration of trade-offs between security, performance, and industry-specific constraints."
		},
		{		
			"ID": "RE0080",
			"name": " A secure protocol consisting of two different security-level  message authentications over CAN",
			"cite": "Tashiro, A., Muraoka, H., Araki, S., Kakizaki, K., & Uehara, S. (2017). A secure protocol consisting of two different security-level message authentications over CAN. 2017 3rd IEEE International Conference on Computer and Communications, ICCC 2017, 2018-January, 1520–1524.",
			"link": "https://doi.org/10.1109/CompComm.2017.8322794",
			"description": "The paper addresses security vulnerabilities in the CAN protocol, which lacks features like message authentication, making it prone to attacks such as spoofing, replay, and denial-of-service (DoS). The authors propose a secure protocol that enhances CAN communication by introducing two levels of message authentication.  The first level is designed for non-critical messages and uses a lightweight, truncated Message Authentication Code (MAC) to prevent tampering with minimal computational overhead. The second level, intended for critical messages, employs a full MAC for stronger security, though it introduces higher computational demands and potential delays, making it suitable for low-frequency use. The protocol was implemented on a CAN bus and evaluated for security and computational efficiency. The results showed that the protocol effectively secures CAN messages while balancing security needs with computational efficiency, offering a flexible mechanism adaptable to the criticality of the transmitted message."
		},
		{		
			"ID": "RE0081",
			"name": "Lightweight authentication for secure automotive networks.",
			"cite": "Mundhenk, P., Steinhorst, S., Lukasiewycz, M., Fahmy, S. A., & Chakraborty, S. (2015). Lightweight authentication for secure automotive networks. Proceedings -Design, Automation and Test in Europe, DATE, 2015-April, 285–288. ",
			"link": "https://doi.org/10.7873/date.2015.0174",
			"description": "The paper proposes a lightweight authentication method designed to enhance the security of automotive networks without compromising the real-time performance needed for vehicle operations. The framework consists of two phases: the first is ECU authentication, where each ECU authenticates with a central security module while the vehicle is not operating. The second phase is stream authorization, which uses symmetric keys during the vehicle's real-time operation. This approach balances security with low computational and communication overhead, making it suitable for the resource-constrained environments of automotive systems. The method is evaluated using RSA for ECU authentication and AES for stream authorization, with performance assessments based on RSA key lengths, software implementation, and hardware support for AES. The results demonstrate that the approach is highly efficient, meeting real-time requirements with very low latency."
		},
		{		
			"ID": "RE0082",
			"name": "Cyber-security for the Controller Area Network (CAN) communication protocol",
			"cite": "Lin, C. W., & Sangiovanni-Vincentelli, A. (2012). Cyber-security for the Controller Area Network (CAN) communication protocol. Proceedings of the 2012 ASE International Conference on Cyber Security, CyberSecurity 2012, SocialInformatics, 1–7.  ",
			"link": "https://doi.org/10.7873/date.2015.0174",
			"description": "The paper addresses the weaknesses in the CAN protocol's lack of built-in security mechanisms. Due to the absence of message authentication and encryption, CAN communications are vulnerable to cyberattacks such as masquerade and replay attacks. The authors propose a security mechanism that incorporates an ID table, pair-wise symmetric secret keys, and message counters for both the sender and receiver nodes, all stored within each ECU. The ID table utilizes a Message Authentication Code (MAC) but only for the intended recipients to reduce the number of MAC calculations required. The pair-wise secret keys are shared exclusively between two communicating nodes to ensure confidentiality. Additionally, a message-based counter is employed instead of a global time to prevent replay attacks. The proposed approach is evaluated and demonstrates minimal impact on bus load and message latencies, making it a cost-effective solution since it relies solely on software for implementation."
		},
		{		
			"ID": "RE0083",
			"name": "Efficient in-vehicle delayed data authentication based on compound message authentication codes",
			"cite": "Nilsson, D. K., Larson, U. E., & Jonsson, E. (2008). Efficient in-vehicle delayed data authentication based on compound message authentication codes. IEEE Vehicular Technology Conference, 1–5.",
			"link": "https://doi.org/10.1109/VETECF.2008.259",
			"description": "The paper presents a method for delayed data authentication in in-vehicle networks using Compound Message Authentication Codes (CMACs) to provide efficient security. Given the resource constraints of in-vehicle networks like the CAN bus, where real-time operation and low latency are critical, traditional cryptographic methods are often too costly. To address this, the authors propose a delayed authentication scheme where a sequence of messages is authenticated in batches rather than individually, reducing the overhead involved in frequent authentication. \n The core of the approach is the use of compound MACs (64 bits), where multiple messages (four) are authenticated together, and the authenticity of these messages is verified with a delay. While this introduces a slight lag in detecting malicious messages, the approach significantly reduces computational overhead and network load, making it suitable for real-time systems. The paper evaluates the performance of this method and demonstrates that it can provide robust security while maintaining the low latency required by automotive systems."
		},
		{		
			"ID": "RE0084",
			"name": "Security-Aware Mapping and Scheduling with Hardware Co-Processors for FlexRay-Based Distributed Embedded Systems",
			"cite": "Gu, Z., Han, G., Zeng, H., & Zhao, Q. (2016). Security-Aware Mapping and Scheduling with Hardware Co-Processors for FlexRay-Based Distributed Embedded Systems. IEEE Transactions on Parallel and Distributed Systems, 27(10), 3044–3057. ",
			"link": "https://doi.org/10.1109/TPDS.2016.2520949",
			"description": "The paper proposes an approach to enhance FlexRay-based distributed embedded systems, which are commonly used in automotive and industrial applications. These systems are vulnerable to attacks like message spoofing or masquerade due to their reliance on communication between Electronic Control Units (ECUs). The proposed approach involves mapping tasks to different nodes in a distributed system while optimizing both security and real-time scheduling constraints. Hardware co-processors are used to accelerate cryptographic operations, ensuring that security protocols—such as encryption and authentication—can be performed without compromising the timing requirements of real-time tasks. The approach includes two processes: \n (1) Signal-to-message packing, where signals are packed into messages for transmission; \n (2) Task scheduling and message assignment, where tasks and messages are scheduled across the FlexRay bus, considering the potential slowdown from cryptographic operations. To solve this optimization problem, the authors use a combination of Mixed Integer Linear Programming (MILP) and a divide-and-conquer heuristic algorithm. \n They also provide a Simulated Annealing algorithm as an alternative solution. The paper evaluates the proposed methods using industrial case studies, demonstrating that the approach can secure FlexRay-based systems with minimal hardware overhead and acceptable performance."
		},
		{		
			"ID": "RE0085",
			"name": "Cooperation or competition?: Coexistence of safety and security in next-generation ethernet-based automotive networks",
			"cite": "Lin, C. W., & Yu, H. (2016). Invited - Cooperation or competition?: Coexistence of safety and security in next-generation ethernet-based automotive networks. Proceedings - Design Automation Conference, 05-09-June.",
			"link": "https://doi.org/10.1145/2897937.2905006",
			"description": "The paper addresses the challenges of balancing safety and security in next-generation Ethernet-based automotive networks. The authors explore whether safety and security should operate in cooperation or competition in these systems. They present a detailed discussion of the design trade-offs required to meet both safety and security objectives, highlighting that while safety focuses on ensuring predictable and reliable behaviour, security focuses on protecting against malicious threats that may compromise system integrity. \n The paper proposes a cooperative approach, where safety and security are considered together in the system design, such as Secret Key management, Frame Replication and Elimination, VLAN segmentation. This approach ensures that both safety and security can coexist without compromising performance. Through case studies and analysis, the authors demonstrate that a cooperative design, where both safety and security requirements are addressed simultaneously, can meet the demands of modern Ethernet-based automotive systems while maintaining both security robustness and safety guarantees."
		},
		{		
			"ID": "RE0086",
			"name": "Karamba Security Launches Autonomous Security for Cars",
			"cite": " H. Hod and Detroit, “Karamba Security Launches Autonomous Security for Cars, Empowering Electronic Control Units (ECUs) to Protect Themselves Against Hackers, Including Tesla-type In-memory Attacks,” Karamba Secur., pp. 1–23, 2016.",
			"link": "https://karambasecurity.com/static/pdf/Karamba-Security-Autonomous-Security-Release.pdf",
			"description": "This document introduces Karamba Security’s Autonomous Security product, which protects ECUs by hardening them against code injection and memory-based attacks. The solution locks the ECU’s control flow to its factory-set binary image using deterministic whitelisting, preventing the execution of any code not originally present. It also includes in-memory protection to block attacks such as buffer overflows and return-oriented programming (ROP), commonly used to exploit externally connected ECUs like infotainment or telematics units. The system operates independently on each ECU, does not require connectivity or signature updates, and avoids false positives by only allowing known-good code paths. This makes it well-suited for real-time, safety-critical automotive environments, offering protection without affecting ECU performance."
		},
		{		
			"ID": "RE0087",
			"name": "A practical security architecture for in-vehicle CAN-FD",
			"cite": "S. Woo, H. J. Jo, I. S. Kim, and D. H. Lee, “A practical security architecture for in-vehicle CAN-FD,” IEEE Trans. Intell. Transp. Syst., vol. 17, no. 8, pp. 2248–2261, 2016.",
			"link": "https://doi.org/10.1109/TITS.2016.2519464",
			"description": "This paper presents a security architecture tailored for the CAN-FD protocol, addressing the inherent lack of authentication, integrity, and access control in in-vehicle communication systems. The authors propose a practical approach that extends existing automotive architectures by adding a Secure ECU and enhancing gateways to support lightweight filtering and authentication mechanisms without requiring fundamental changes to existing ECUs. \n The proposed system introduces two main security layers: message filtering and cryptographic authentication. A key component is the gateway’s ability to perform frame-based filtering based on message ID, sender identity, and expected transmission frequency. This allows the system to block abnormal or unauthorised messages—especially spoofed or out-of-schedule diagnostic and control frames—before they reach safety-critical ECUs.\n To ensure message authenticity and integrity, the paper integrates message authentication codes (MACs) appended to CAN-FD frames. These MACs are generated using shared symmetric keys between trusted ECUs and the gateway or Secure ECU. The Secure ECU verifies the MAC for each incoming message, discarding any unauthenticated or tampered frames. This process prevents attackers from injecting malicious messages into the network, especially during remote or wireless attack scenarios.\n The authors also introduce message sequence counters to detect replay attacks. By checking the freshness of incoming messages, the system prevents adversaries from resending previously captured valid frames. Furthermore, the security design supports group-based key distribution, where each functional domain (e.g., infotainment, powertrain) shares a common key, simplifying key management while maintaining protection boundaries.\n The security architecture is evaluated using a prototype with CAN-FD transceivers and Secure ECU implementations. The results demonstrate minimal latency overhead and compatibility with existing automotive ECU platforms."
		},
		{		
			"ID": "RE0088",
			"name": "Security Mechanisms Design for In-Vehicle Network Gateway",
			"cite": "F. Luo and Q. Hu, “Security Mechanisms Design for In-Vehicle Network Gateway,” SAE Tech. Pap., vol. 2018-April, pp. 1–8, 2018, doi: 10.4271/2018-01-0018.",
			"link": "https://doi.org/10.4271/2018-01-0018",
			"description": "This paper proposes a security architecture for in-vehicle gateways that manage communication across different vehicle network domains such as CAN, CAN-FD, and Ethernet. As modern vehicles integrate more ECUs across multiple domains, the authors highlight the growing need to filter and regulate traffic between safety-critical and non-critical zones. To address this, the paper introduces a Filter ECU, a trusted security component placed within the gateway that inspects, authenticates, and controls message flow.\n The architecture allows system administrators to define a security policy specifying which message IDs, directions, and types (e.g., diagnostic or control) are allowed between domains. These policies also support rate limiting to prevent flooding attacks. The Filter ECU enforces these rules at runtime, allowing only authorised and expected traffic to cross domain boundaries, while blocking anything abnormal or excessive. \n To secure message integrity and authenticity, the paper implements a lightweight Message Authentication Code (MAC) scheme for CAN-FD messages. Each message carries a MAC generated using a pre-shared secret key, which the Filter ECU uses to verify whether the message is genuine. Messages without valid MACs are dropped, preventing unauthorised or spoofed communication from reaching safety-critical ECUs. \n Additionally, the Filter ECU performs rate limiting by monitoring the frequency of incoming messages and dropping those that exceed predefined thresholds. This helps mitigate DoS-style attacks and ensures the real-time performance of critical systems. The proposed design maintains strict separation between high-privilege and low-privilege network zones, and it can be implemented either as standalone hardware or embedded software within the gateway ECU."
		},
		{		
			"ID": "RE0089",
			"name": "Design, Implementation, and evaluation of a vehicular hardware security module",
			"cite": "M. Wolf and T. Gendrullis, “Design, Implementation, and evaluation of a vehicular hardware security module,” Lect. Notes Comput. Sci. (including Subser. Lect. Notes Artif. Intell. Lect. Notes Bioinformatics), vol. 7259 LNCS, pp. 302–318, 2012, doi: 10.1007/978-3-642-31912-9_20.",
			"link": "https://doi.org/10.1007/978-3-642-31912-9_20.",
			"description": "This paper presents the design, implementation, and evaluation of a vehicular Hardware Security Module (HSM), specifically developed to address the stringent security and operational requirements of automotive systems. It begins with a requirements engineering process, identifying critical automotive use cases with security implications. From these, the authors derive high-level objectives and technical security requirements, including isolated processing, secure memory, tamper resistance, and communication integrity. \n The HSM is structured into three variants — light, medium, and full — depending on security needs and cost-performance trade-offs. All versions share a modular architecture comprising a secure processor, memory, cryptographic building blocks, and secure communication interfaces with the host ECU. The full module includes hardware-accelerated AES, ECC, and WHIRLPOOL for high-performance V2X protection; the medium module omits some accelerators to focus on in-vehicle communications; and the light module is tailored for minimal ECU security such as sensor/actuator integrity, using symmetric crypto and random number generation. \n Key hardware building blocks (SBBs) include: Asymmetric Crypto Engine (ECC-256, ECIES) for signatures and key exchange, Symmetric Crypto Engine (AES-128) for encryption/MAC generation, Hash Engine (WHIRLPOOL) and HMAC support, Random Number Generator (PRNG) seeded internally or externally, Monotonic Counters and UTC-Synchronised Clock for secure timestamping. \n Each key within the HSM can be finely configured with use flags, defining allowed operations (e.g., sign, verify) and transport flags, defining where the key or function can migrate (e.g., internal, migratable, OEM-trusted). The HSM also supports secure boot and authenticated boot through an internal measurement mechanism (using Whirlpool/AES-MAC) and configuration registers to detect and react to unauthorised software changes during ECU bootstrapping. \n The authors implement the HSM prototype on a Xilinx Virtex-5 FPGA, integrating with an Infineon TriCore processor via a custom SPI interface and using a Linux-based driver to manage cryptographic operations. Performance evaluation shows that hardware acceleration significantly improves ECC and hash performance (ECC operations 29× faster than software), while AES performance is limited by bus bottlenecks but still offers benefits in real-time security applications. \n The evaluation confirms that the proposed HSM satisfies all targeted automotive-specific security requirements, including isolation, performance, resistance to physical tampering, and support for standard cryptographic algorithms. A comparison with other modules like SHE, TPM, and smartcards highlights this HSM's balance of fine-grained key control, secure time references, and cost-efficiency, making it a practical and robust solution for in-vehicle network security."
		},
		{		
			"ID": "RE0090",
			"name": "Firmware Security Module",
			"cite": "C. Pott, P. Jungklass, D. J. Csejka, T. Eisenbarth, and M. Siebert, “Firmware Security Module,” J. Hardw. Syst. Secur., vol. 5, no. 2, pp. 103–113, 2021, doi: 10.1007/s41635-021-00114-4.",
			"link": "https://doi.org/10.1007/s41635-021-00114-4",
			"description": "This paper proposes the Firmware Security Module (FSM), a software-based alternative to traditional Hardware Security Modules (HSMs), offering equivalent security functionalities but with greater flexibility and scalability. The motivation arises from limitations in HSMs: hardware accelerators are fast but inflexible, and protected memory is limited and can become a bottleneck. FSM aims to leverage existing high-performance cores in multicore automotive processors to perform HSM tasks in a logically isolated software environment. \n The FSM framework is built around strong logical isolation of one processor core in a multicore system. This core is reserved to execute all security services independently of the main OS. It contains five main components: a secure OS, a bridge module for communication with other cores, and three service managers handling (1) secure boot and updates, (2) cryptographic operations and key management, and (3) auxiliary functions like event logging, secure deletion, and unique ID provision. The FSM starts before the rest of the system and enforces security configurations, such as memory protection and peripheral access restrictions, using built-in Memory Protection Units (MPUs) and One-Time Programmable (OTP) regions for permanent locking. \n In implementation, FSM runs on core 0 of the Infineon AURIX TC399XP microcontroller, which is advantageous because this core is first to boot and can enforce early protection mechanisms. The secure boot process is protected in OTP memory and checks both memory contents and hardware configurations before allowing the main system to start. Secure updates use cryptographic signatures and are verified before installation, with the public key stored in OTP-protected memory. FSM can enforce a permanent lock by redirecting execution to an endless loop stored in OTP memory if a tamper attempt is detected, and it logs this event for forensics. \n The cryptographic services implemented include AES-128, AES-256, SHA-256, and Curve25519 ECC. These are all implemented in software, with key materials stored in protected regions accessible only under specific privilege levels. RNG is based on a deterministic method, seeded with entropy during manufacturing, with mechanisms to generate new seeds at each boot to avoid repetition. \n The FSM uses a bridge module to poll shared memory segments from other cores at scheduled intervals, transferring valid requests to the FSM in a deterministic way. This avoids race conditions and supports real-time determinism. The FSM logs security events in a ring buffer, timestamped using a protected internal system timer, and protects memory via tightly configured MPUs. \n In experimental evaluation, cryptographic primitives were tested in FSM and compared to hardware-accelerated versions in the AURIX HSM. AES and SHA operations in FSM software were slower (1.6–4.5×) than hardware counterparts, but still within acceptable bounds for many applications. AES-128, for example, achieved encryption speeds close to hardware performance when using lookup tables, and the framework supports easy updates or replacement with post-quantum algorithms, offering crypto-agility."
		},
		{		
			"ID": "RE0091",
			"name": "Firmware Security Module",
			"cite": "F. Khalid and S. R. Hasan, Hardware security of autonomous vehicles. Elsevier Inc., 2024. doi: 10.1016/B978-0-323-99545-0.00012-9.",
			"link": "https://doi.org/10.1016/B978-0-323-99545-0.00012-9",
			"description": "This chapter provides a structured overview of Hardware Security Modules (HSMs) and their role in protecting modern automotive systems. It starts by explaining the increasing need for cryptographic mechanisms in connected and autonomous vehicles, highlighting HSMs as dedicated hardware blocks for secure key storage and cryptographic operations, isolated from regular ECU software. \n The chapter presents the AUTOSAR architecture, where HSMs work alongside the Crypto Service Manager (Csm) and Crypto Interface (CryIf) to perform tasks like encryption, MAC generation, and digital signatures. It also explains the Secure Hardware Extension (SHE), a lighter alternative to full HSMs used for secure boot and message authentication in low-cost ECUs. \n Several use cases are explored: Secure boot and firmware validation using digital signature checks; Authenticated in-vehicle communication with MACs on CAN messages (SecOC);    Security Access in diagnostic protocols (UDS) using HSM-backed challenge–response; dSecure key storage with isolated memory regions;   Secure OTA updates, validating code before installation; The authors present an implementation example using an Infineon AURIX HSM, integrated with AUTOSAR crypto modules. Performance tests show hardware crypto is significantly faster than software implementations, particularly for AES and SHA. \n The chapter concludes by discussing the trade-offs between hardware rigidity and software flexibility, and the importance of crypto-agility for future updates. HSMs are shown to be a core part of in-vehicle trust frameworks, supporting both legacy and future vehicle security needs."
		},
		{		
			"ID": "RE0092",
			"name": "Revisiting remote attack kill-chains on modern in-vehicle networks",
			"cite": "S. Kulandaivel, “Revisiting remote attack kill-chains on modern in-vehicle networks,” no. December, 2021.",
			"link": "https://kilthub.cmu.edu/articles/thesis/Revisiting_remote_attack_kill-chains_on_modern_in-vehicle_networks/19196642",
			"description": "This paper investigates modern vehicle attack surfaces by reconstructing complete remote attack kill chains, focusing on vulnerabilities introduced by interconnected in-vehicle systems and external interfaces. It revisits prior public automotive attacks and breaks them down into discrete kill-chain phases such as initial access, persistence, privilege escalation, and lateral movement. The analysis helps demonstrate how attackers move from an external interface like telematics or infotainment into safety-critical domains. \n The paper explores how remote attack vectors like Bluetooth, Wi-Fi, cellular, and USB are used as entry points. For each kill-chain phase, the authors provide examples of how weakly protected services (e.g., open diagnostic ports, improperly terminated sessions, or unpatched software) can be abused. It emphasises that extended remote sessions and improperly managed diagnostic access can lead to persistence and lateral control over internal networks such as CAN. \n To improve resilience, the authors recommend breaking kill chains early by: (1) Reducing the exposure of vulnerable services; (2)  Restricting or timing out remote sessions; (3) Ensuring strict privilege management and interface segmentation. \n The work serves as both a taxonomy and strategic guide for understanding how multi-step remote attacks evolve in modern in-vehicle networks, with practical insights for prevention and detection strategies in connected vehicles."
		},
		{		
			"ID": "RE0093",
			"name": "Anomaly Detection Approach Using Adaptive Cumulative Sum Algorithm for Controller Area Network",
			"cite": "H. Olufowobi et al., “Anomaly Detection Approach Using Adaptive Cumulative Sum Algorithm for Controller Area Network,” AutoSec 2019 - Proc. ACM Work. Automot. Cybersecurity, co-located with CODASPY 2019, pp. 25–30, 2019, doi: 10.1145/3309171.3309178.",
			"link": "https://doi.org/10.1145/3309171.3309178",
			"description": "This paper presents an anomaly-based intrusion detection approach for Controller Area Networks (CAN) using an Adaptive Cumulative Sum (CUSUM) algorithm, a change-point detection technique from statistical signal processing. The authors aim to detect abrupt changes in message patterns caused by injection attacks by modelling CAN message streams as time-series data. They propose a sliding-window-based adaptive CUSUM method that learns the normal statistical behaviour of message frequency and then flags deviations as potential attacks. \n The adaptive CUSUM algorithm is applied in a sequential detection setting where it continuously estimates both the normal and abnormal parameters (e.g., message frequency mean and variance) in real-time. The key innovation is adapting the CUSUM thresholds and statistics over time rather than relying on static, pre-trained parameters. The algorithm computes a log-likelihood ratio for each incoming message and updates cumulative sums. A change is detected when the CUSUM decision function exceeds a dynamic threshold. This makes the system more robust to changes in driving conditions and vehicle behaviour. \n To validate their method, the authors use a publicly available CAN dataset comprising both normal and attack scenarios (DoS, fuzzy, and spoofing attacks). They extract message instance frequencies in overlapping windows and evaluate detection based on parameters such as average run length (ARL), detection delay, and false alarm rate. Experimental results show that the adaptive CUSUM algorithm can detect attacks with low detection delay (as low as ~30ms) and low false positive rates. The system shows good generalisation across different message IDs and attack types, especially when tuning parameters such as the decision threshold hh, sensitivity parameter kk, and window size are carefully selected. \n Compared to other anomaly-based IDS approaches (e.g., deep learning or LSTM-based models), the proposed method is lightweight and computation-efficient, making it suitable for real-time deployment using an OBD-II connected dongle. Unlike machine learning methods that require labelled data and significant computational resources, this technique works well with small data and minimal prior knowledge. However, its reliance on message frequency patterns may make it less effective against very subtle or slow-rate attacks that do not significantly alter message statistics."
		},
		{		
			"ID": "RE0094",
			"name": "Viden: Attacker Identification on In-Vehicle Networks",
			"cite": "K. Cho and K. G. Shin, “Viden: Attacker Identification on In-Vehicle Networks,” Comput. Res. Repos., pp. 1–35, 2017, [Online]",
			"link": " http://arxiv.org/abs/1708.08414",
			"description": "This paper presents Viden, a novel attacker identification system for in-vehicle networks that leverages voltage-based fingerprinting to identify the specific ECU (Electronic Control Unit) responsible for malicious CAN messages. Unlike prior intrusion detection systems (IDS) that only detect the existence of an attack, Viden addresses the critical challenge of identifying the attacker ECU, which is essential for forensic analysis, isolation, and patching in automotive cybersecurity. \n Viden exploits the small, inherent discrepancies in voltage output patterns among different ECUs during message transmission. It uses a four-phase approach to construct and continuously update voltage profiles (ECU fingerprints) from CANH and CANL voltage measurements. In Phase 1 (ACK Threshold Learning), Viden determines whether a measured voltage comes from the actual message transmitter by learning thresholds that exclude voltages from the ACK slot, which are generated by non-transmitting ECUs. In Phase 2, Viden derives a voltage instance consisting of six features (F1–F6) that capture both the central tendency and dispersion of the ECU's dominant output voltages. These features are updated iteratively and adaptively. \n In Phase 3, Viden constructs a voltage profile for each ECU by processing the cumulative voltage deviations (CVD) over time, suppressing transient voltage fluctuations by combining CANH and CANL outputs. It models the cumulative trend as a linear regression problem and uses Recursive Least Squares (RLS) to update the ECU’s profile online. When an IDS detects an attack, Viden extracts the voltage profile from the malicious messages and compares it against known profiles to identify the attacker ECU. In Phase 4, when profile similarity is ambiguous (e.g., due to profile collision or adversarial impersonation), Viden uses multi-class classification based on the voltage instance features (F1–F6) to resolve ambiguities and validate the identification. \n Viden was implemented and evaluated on a CAN bus prototype and two real vehicles (a Honda Accord and a Chevrolet Trax), operating at 500Kbps. The system was shown to accurately fingerprint ECUs and identify attackers with a false identification rate of only 0.2%. It requires only a low voltage sampling rate (50 KSamples/sec), does not depend on specific message formats or fields, and can adapt to environmental or adversarial-induced changes. The paper also shows Viden’s robustness against naive, timing-aware, and timing-voltage-aware adversaries, including those who attempt targeted impersonation or exploit environmental variations."
		},
		{		
			"ID": "RE0095",
			"name": "Cybersecurity Best Practices for the Safety of Modern Vehicles Release 2022 Update",
			"cite": "National Highway Traffic Safety Administration (NHTSA), “Cybersecurity Best Practices for the Safety of Modern Vehicles Release 2022 Update,” 2022, [Online].",
			"link": "https://www.nhtsa.gov/technology-innovation/vehicle-cybersecurity",
			"description": "This document developed by the National Highway Traffic Safety Administration (NHTSA) in collaboration with other U.S. agencies and updated in 2022. It provides non-binding but comprehensive cybersecurity best practices for vehicle manufacturers and equipment suppliers. It incorporates lessons from previous NHTSA work, ISO/SAE 21434, Auto-ISAC best practices, and real-world attack reports. The document aims to improve cyber resilience and safety of modern vehicles throughout the product lifecycle. \n The guidance is organised into General Best Practices (G.ni) and Technical Best Practices (T.nj). Under general practices, the paper recommends establishing strong product cybersecurity governance, integrating cybersecurity into the vehicle development process, and conducting continuous risk assessment and post-production monitoring. A major focus is on identifying and removing unnecessary attack surfaces (e.g. debug ports, unused ECUs or interfaces) early in the design process (G.4.2.4), enforcing asset inventory for installed hardware/software (G.4.2.6), and mandating penetration testing and documentation (G.4.2.7) before deployment. \n On the technical side, the document covers several critical controls: \n T.8.1 – Disable developer/debug access in production systems to reduce the risk of physical or software-based entry. \n T.8.4 – Restrict use of diagnostic tools, ensuring they are authorised and authenticated. \n T.8.5 – Secure internal vehicle communications, such as implementing access control and message authentication on CAN or Ethernet. \n T.8.7.2 – Apply network segmentation and isolation, separating safety-critical systems from infotainment or external interfaces. \n T.8.8 – Prevent unauthorised software installation or modification, including during over-the-air (OTA) updates. \n T.8.9 – Require cryptographic validation and signing of OTA updates, with update rollback capabilities in case of compromise. \n The paper also acknowledges emerging risk vectors, such as wireless paths, user-installed apps, and aftermarket devices, recommending strong control over access points such as OBD-II ports, Bluetooth, or Wi-Fi interfaces. Importantly, it advises OEMs to plan for incident response, monitoring, and continuous cybersecurity auditing, supporting an adaptive security lifecycle."
		},
		{		
			"ID": "RE0096",
			"name": "ENISA good practices for the security of smart cars",
			"cite": "European Union Agency for Network and Information Security (ENISA), ENISA good practices for the security of smart cars, no. November. 2019.",
			"link": "https://www.enisa.europa.eu/sites/default/files/publications/Good%20practices%20for%20security%20of%20Smart%20Cars.pdf",
			"description": "This report by ENISA (European Union Agency for Cybersecurity) presents a comprehensive analysis of cybersecurity threats and best practices for smart cars, with a focus on connected and partially autonomous vehicles. The document addresses the increasing complexity and connectivity of in-vehicle systems and their exposure to cyber threats, offering actionable recommendations for OEMs, suppliers, and policymakers.\n The structure of the report follows the standard risk assessment methodology, identifying key assets, threats, and attack vectors. Critical assets include ECUs, on-board networks (e.g., CAN, LIN, FlexRay, Ethernet), telematics units, diagnostic interfaces, and OTA update systems. The threat landscape includes both remote (e.g., wireless, V2X) and local (e.g., OBD-II, USB, physical access) attack surfaces. ENISA classifies threats based on attacker profile (e.g., malicious insider, remote attacker, mechanic) and provides specific examples such as reprogramming ECUs, injecting spoofed CAN messages, or exploiting telematics vulnerabilities. \n Key technical good practices recommended in the report include: \n - Access Control to Physical Interfaces: Restricting and monitoring physical access points such as OBD-II ports, USB interfaces, and debugging ports, especially during service or production phases. \n - Secure Software Updates: Requiring signed and validated OTA updates, robust update authentication mechanisms, and maintaining software version traceability. \n - Network Segmentation and Isolation: Logical separation of safety-critical domains (e.g., braking, steering) from infotainment or external communication modules. ENISA promotes the use of security gateways and firewalls to prevent lateral movement across domains. \n - Intrusion Detection and Anomaly Monitoring: Encouraging the use of in-vehicle IDS to detect abnormal behaviour or message patterns, particularly on CAN or Ethernet networks. \n - ECU and Device Authentication: Implementing secure authentication of all ECUs and connected devices during startup and communication exchanges to prevent impersonation or spoofing. \n -  Post-Production Security Support: OEMs are advised to ensure cybersecurity monitoring and patching remain available throughout the vehicle’s lifecycle, including response plans for discovered vulnerabilities. \n The report also highlights organisational and lifecycle recommendations, such as: \n - Threat Modelling during Design: Integrating threat analysis and risk assessment early in the system design phase. \n - Supplier Security Management: Enforcing cybersecurity requirements on Tier-1 and Tier-2 suppliers, including validation of software and hardware integrity. \n - Training and Awareness: Promoting cybersecurity training for automotive engineers and service technicians. \n ENISA also underlines the need for alignment with emerging regulations like UNECE WP.29 (UN R155/R156) and ISO/SAE 21434, framing its practices as foundational to those more formal regulatory efforts."
		},
		{		
			"ID": "RE0097",
			"name": "Development of fail-safe algorithm for exteroceptive sensors of autonomous vehicles",
			"cite": "D. Shin, K. M. Park, and M. Park, “Development of fail-safe algorithm for exteroceptive sensors of autonomous vehicles,” Electron., vol. 9, no. 11, pp. 1–13, 2020, doi: 10.3390/electronics9111774.",
			"link": "https://doi.org/10.3390/electronics9111774",
			"description": "This paper proposes a fail-safe algorithm designed specifically for exteroceptive sensors (e.g. LiDAR, radar, cameras) in autonomous vehicles, which are critical for environmental perception. These sensors can fail due to external conditions (e.g. rain, snow, sunlight), internal faults, or interference. The fail-safe mechanism must detect sensor faults and prevent the vehicle from executing unsafe actions. \n The authors implement a multi-sensor redundancy and arbitration strategy. The system continuously monitors sensor health status via a health monitoring algorithm, which checks for abnormal patterns like missing data, inconsistent object detection, or sensor disconnection. Each sensor is assigned a confidence score, and if one fails, its data is removed from the fusion process. \n The vehicle’s control system uses a state-machine-based logic to define safe behaviour under sensor failure conditions: (1)If minor faults are detected, degraded modes (e.g., low-speed mode) are enabled. (2) For critical faults (e.g., total sensor blindness), the system initiates minimum-risk manoeuvres, such as controlled stopping in a safe zone. The system was tested in a real-time embedded platform using Robot Operating System (ROS) and validated on Hyundai’s autonomous vehicle platform. The results show that the algorithm can successfully detect sensor anomalies and transition the vehicle to a safe mode within acceptable time bounds, preventing collisions."
		},
		{		
			"ID": "RE0098",
			"name": "Fail-Operational Steer-By-Wire System for Autonomous Vehicles",
			"cite": "M. Li and L. Eckstein, Fail-Operational Steer-By-Wire System for Autonomous Vehicles, 2019 IEEE International Conference on Vehicular Electronics and Safety (ICVES), Cairo, Egypt, 2019, pp. 1-6, doi: 10.1109/ICVES.2019.8906395",
			"link": "https://doi.org/10.1109/ICVES.2019.8906395",
			"description": "This paper proposes and evaluates a fail-operational Steer-By-Wire (SBW) system architecture specifically designed for autonomous vehicles. The system ensures that steering functionality remains available even after one or more component failures, satisfying ISO 26262 safety goals up to ASIL D. Unlike traditional steering systems, SBW relies on electronic transmission of steering commands, removing mechanical linkage and demanding high redundancy. \n The authors introduce a dual-redundant electronic architecture comprising: (1) Two independent Steering Control Units (SCUs). (2) Redundant power supplies, communication channels, and sensors (steering angle, torque). (3) Multiple actuators for steering motor control. \n The safety concept is based on a degraded operation mode strategy. Under normal conditions, both SCUs work in parallel. If one SCU or any critical component fails, the remaining subsystem continues operation in a reduced but safe mode, such as limiting steering angle or vehicle speed. \n A Fault Tree Analysis (FTA) and Failure Modes and Effects Analysis (FMEA) were conducted to identify safety-critical failure points. The design follows ISO 26262’s V-model, with specific attention to diagnostic coverage, fault detection latency, and recovery logic. \n Experimental results from a test vehicle demonstrate that the system can tolerate: (1) Failure of one SCU without steering loss. (2) Sensor disconnection or drift using sensor voting logic. (3) Loss of one power rail while maintaining steering function. \n The paper concludes that fail-operational steering is not only feasible but necessary for higher levels of autonomy, where human fallback is not guaranteed."
		},
		{		
			"ID": "RE0099",
			"name": "Advancing the Design of Fail-Operational Architectures, Communication Modules, Electronic Components, and Systems for Highly Automated Driving",
			"cite": "O. Vermesan et al., Advancing the Design of Fail-Operational Architectures, Communication Modules, Electronic Components, and Systems for Future Autonomous/Automated Vehicles, vol. 1. Springer International Publishing, 2021. doi: 10.1007/978-3-030-65871-7_5.",
			"link": "https://doi.org/10.1007/978-3-030-65871-7_5",
			"description": "This paper presents results from the ENABLE-S3 project, focusing on developing fail-operational hardware and system architectures for Highly Automated Driving (HAD) vehicles. The work emphasises transitioning from fail-safe (safe stop) to fail-operational (safe continuation) systems that can maintain functionality even after faults. \n The proposed system architecture incorporates: (1) A centralised computing platform (fail-operational computer) with dual lockstep cores. (2) Cross-domain redundancy, enabling critical functions (e.g., steering, braking) to be re-executed on secondary control paths. (3) Dedicated Communication Control Units (CCUs) for separating safety-critical and non-critical networks using Time-Sensitive Networking (TSN) and TTEthernet. \n The paper highlights the use of hardware diversity, decentralised decision-making, and hardware-software co-design to increase system resilience. Techniques like logical partitioning, power domain separation, and hot-swapping ECU roles are used to ensure continuity of operations. \n In terms of communication, time-deterministic channels are implemented with redundant paths and gateway-based failover switching to prevent single points of failure. Control software components are deployed in containers, allowing them to migrate across processing units in case of hardware failure. \n A set of use cases and demonstrators are described, including: (1) An electric vehicle demonstrator with fail-operational lane keeping and automated braking. (2) A reference platform that supports real-time recovery within 10ms from processor failure. \n The paper concludes by advocating for cross-layer fail-operational design, combining hardware redundancy, deterministic networking, fault-tolerant software execution, and strong separation of safety domains. It supports future AV development that must move beyond simple emergency stop behaviours to continuous safe function in degraded states"
		},
		{		
			"ID": "RE0100",
			"name": "Highly Autonomous Vehicle (System) Design Patterns – Achieving Fail Operational and High Level of Safety and Security",
			"cite": "R. Messnarz, G. Macher, J. Stolfa, and S. Stolfa, Highly Autonomous Vehicle (System) Design Patterns – Achieving Fail Operational and High Level of Safety and Security, vol. 1060, no. November 2017. Springer International Publishing, 2019. doi: 10.1007/978-3-030-28005-5_36.",
			"link": "https://doi.org/10.1007/978-3-030-65871-7_5",
			"description": "This paper discusses architectural design patterns required for achieving fail-operational capabilities in highly autonomous vehicles (HAVs). The main thrust is that traditional fail-safe systems (which deactivate upon failure) are no longer sufficient due to the absence of driver fallback. The authors advocate for a fail-operational architecture that allows the vehicle to continue operating even after component failures. \n Examples of fail-operational implementations are given for steering, e-powertrain, and braking systems. Each system is designed with: (1) Two independent board nets (dual power supplies to prevent power loss from a single failure). (2) Two ASIL-D ECUs receiving identical commands via two independent buses. (3) Redundant actuators (e.g. 6-phase motors, dual braking mechanisms). (4) A limp-home mode ensuring degraded but safe operation. \n (5) The steering system uses dual 6-phase motors where even one half of a motor (3 phases) can function in degraded mode. \n (6) The e-powertrain design involves dual axle motors, allowing continued propulsion even with one failed motor. (7) The braking system is backed up by torque application through the e-motor when the primary ABS fails. \n The paper also touches on cybersecurity integration, suggesting a defence-in-depth approach with encrypted communication, secure app execution on central vehicle servers, and the importance of defining trust boundaries. \n A list of design patterns is proposed, including: (1) Dual nets and buses, (2) Dual ASIL-D controllers, (3) Decomposition strategies requiring 3–4 faults before critical failure, (4) Central multicore Linux servers managing control apps, (5) Partial fault-tolerant HV battery systems. \n The paper is largely architecture-focused, offering implementation-level insights and mapping emerging safety and cybersecurity demands into the design space for next-generation autonomous vehicles."
		},
		{		
			"ID": "RE0101",
			"name": "A Fail-safe System involving Shared Control Strategy for Driver Override",
			"cite": "W. Xue, Z. Wang, B. Yang, R. Zheng, and K. Nakano, “A Fail-safe System involving Shared Control Strategy for Driver Override,” IFAC-PapersOnLine, vol. 55, no. 27, pp. 478–483, 2022, doi: 10.1016/j.ifacol.2022.10.558.",
			"link": "https://doi.org/10.1016/j.ifacol.2022.10.558",
			"description": "This paper proposes a fail-safe control system for autonomous vehicles based on shared control strategies. It is aimed at situations where autonomous driving may be unsafe, allowing the human driver to override control and avoid potential danger. \n The system introduces a human–machine shared control mechanism governed by a decision-level arbitration module. The arbitration compares control inputs from both human and automation agents to determine who should have control at any moment. An emergency decision-making algorithm evaluates whether autonomous control poses a risk and initiates override conditions. \n System structure: (1) Lateral control (steering) and longitudinal control (speed) commands are monitored in real-time. (2) A shared control blending module dynamically adjusts the weights of manual and autonomous control inputs. (3) The driver override mechanism kicks in if the system detects a potential accident or unsafe state, using a hazard estimation model. \n Evaluation: (1) Simulations conducted using MATLAB/Simulink and dSPACE MicroAutoBox show improved performance in collision avoidance and path tracking. (2) Compared with full autonomy, the shared control model maintains safety by enabling rapid transition to manual control in hazardous scenarios. (3) The architecture includes redundant sensing and control paths, allowing safe degradation during system faults. \n This work focuses more on fail-safe transitions rather than continuous operation. It aligns with SAE Level 3-4 autonomy where driver fallback is still expected. However, the proposed mechanisms are foundational to transitional fail-safety in AVs."
		},
		{		
			"ID": "RE0102",
			"name": "HEAVENS 2.0 – an automotive risk assessment model",
			"cite": "A. Lautenbach, M. Almgren, T. Olovsson, Proposing heavens 2.0 – an automotive risk assessment model, in: Proceedings of the 5th ACM Computer Science in Cars Symposium, CSCS ’21, Association for Computing Machinery, New York, NY, USA, 2021. doi:10.1145/3488904.3493378.",
			"link": "https://doi.org/10.1145/3488904.3493378",
			"description": "HEAVENS (Healing Vulnerabilities to Enhance Software Security and Safety) project presents a structured method for analysing cyber threats and evaluating risks within automotive systems. The central element of the HEAVENS security model is a risk matrix. This matrix determines the final Security Level (SL) based on the assessed Threat Level (TL) and Impact Level (IL). \n The IL includes several aspects: safety, financial, operational, privacy, and legislation, each with its detailed valuation criteria. The model also provides comprehensive definitions and explanations for assigning values to each TL and IL attribute. Moreover, it links specific security attributes to corresponding threats, using the STRIDE threat model to categorise and assess the potential impact of various attacks. While the model is comprehensive and offers a high-level risk assessment for vehicles, it could benefit from further development in mitigation method evaluation and procedures for addressing specific vulnerabilities."
		},
		{		
			"ID": "RE0103",
			"name": "SarA: Security automotive risk analysis method",
			"cite": "J. P. Monteuuis, A. Boudguiga, J. Zhang, H. Labiod, A. Servel, and P. Urien, “SarA: Security automotive risk analysis method,” CPSS 2018 - Proc. 4th ACM Work. Cyber-Physical Syst. Secur. Co-located with ASIA CCS 2018, no. May, pp. 3–14, 2018, doi: 10.1145/3198458.3198465.",
			"link": "https://doi.org/10.1145/3198458.3198465",
			"description": "This paper proposed a comprehensive SARA framework for systematically analysing threats and assessing the risk of AV systems. This framework considers a broad range of factors influencing the network security of the AV system. These include human elements, vehicle control capacity, infrastructure sign recognition, and attack severity factors. They also expanded the STRIDE threat model to STRIDELC, introducing Linkability (the capacity to link anonymous data to identify its owner) and Confusion (authentic data structures with incorrect content, like damaged road signs). Like EVITA, the SARA framework also incorporates a risk matrix function that factors in controllability, attack severity, and attack likelihood."
		},
		{		
			"ID": "RE0104",
			"name": "A conceptual system dynamics model for cybersecurity assessment of connected and autonomous vehicles",
			"cite": "S. Khalid Khan, N. Shiwakoti, and P. Stasinopoulos, “A conceptual system dynamics model for cybersecurity assessment of connected and autonomous vehicles,” Accid. Anal. Prev., vol. 165, no. December 2021, p. 106515, 2022, doi: 10.1016/j.aap.2021.106515.",
			"link": "https://doi.org/10.1016/j.aap.2021.106515",
			"description": "This paper proposed a comprehensive system model to demonstrate the relationship between various security factors impacting a vehicle's security. The model impressively considers a broad range of variables, including in-vehicle network communication, physical access, human factors, trust within the industry, and public perception. They used a system dynamics model to show the relationships between elements, parameters, and factors, allowing users to analyse security in a complex context. The study also presents four archetypes to illustrate the model using qualitative analysis, demonstrating the impact of different scenarios such as hacker capabilities, human awareness, and regulatory laws. While the study is comprehensive, it remains a conceptual model that requires deeper analysis."
		},
		{		
			"ID": "RE0105",
			"name": "Upstream's AutoThreat Intelligence platform ",
			"cite": "Upstream Securiy, “AutoThreat Intelligence platforms,” [Online]",
			"link": "https://upstream.auto/autothreat-intelligence/",
			"description": "This platform is a dedicated automotive cybersecurity intelligence system that collects, correlates, and analyses data from millions of connected vehicles worldwide. It provides manufacturers and fleet operators with actionable insights into known and emerging cyber threats, such as malware signatures, communication anomalies, and ECU-specific vulnerabilities.\n AutoThreat Intelligence offers real-time alerts and risk assessments by aggregating data from sources like automotive-specific honeypots, dark web monitoring, and threat feed integration. It also supports forensic investigation, threat attribution, and predictive analytics to enhance proactive security strategies and inform patch management or software update planning."
		},
        {       
            "ID": "RE0106",
            "name": "Moving target defense for in-vehicle software-defined networking: IP shuffling in network slicing with multiagent deep reinforcement learning.",
            "cite": "UYoon, S., Cho, J.-H., Kim, D. S., Moore, T. J., Nelson, F. F., Lim, H., Leslie, N., & Kamhoua, C. A. (2020). Moving target defense for in-vehicle software-defined networking: IP shuffling in network slicing with multiagent deep reinforcement learning. 11413, 76. https://doi.org/10.1117/12.2557850",
            "link": "https://doi.org/10.1117/12.2557850",
            "description": "This paper proposes a Moving Target Defense framework designed for in-vehicle Software-Defined Networking (SDN) environments, where vehicle Electronic Control Units (ECUs) are virtualized with IP addresses that periodically change. The aim is to increase uncertainty for attackers and reduce the effectiveness of reconnaissance-based intrusions. The defence model is built upon IP shuffling—a form of address mutation—and is controlled using a multi-agent deep reinforcement learning (mDRL) system. The system partitions the vehicle network into logical slices, each managed by an SDN controller. These slices operate as individual agents that decide how often to shuffle IP addresses and how to allocate bandwidth based on Quality-of-Service (QoS) requirements and system vulnerabilities. \n The authors design the system’s state space to capture traffic load, packet loss, overhead, and vulnerability. The action space includes link bandwidth adjustments and shuffling intervals, with rewards structured to balance security improvements (e.g., reducing repeated IP use) and service performance. The proposed framework uses MADDPG (Multi-Agent Deep Deterministic Policy Gradient) to enable collaborative learning across agents, aiming for centralised learning and decentralised execution. Simulation experiments validate that their method provides strong QoS assurance while reducing vulnerability exposure and packet loss. It outperforms conventional DRL approaches such as DDPG, DQN, and REINFORCE in accumulated reward, bandwidth efficiency, and security robustness."
        },
        {       
            "ID": "RE0107",
            "name": "Moving target defense for the security and resilience of mixed time and event triggered cyber–physical systems.",
            "cite": "Potteiger, B., Dubey, A., Cai, F., Koutsoukos, X., & Zhang, Z. (2022). Moving target defense for the security and resilience of mixed time and event triggered cyber–physical systems. Journal of Systems Architecture, 125(October 2020), 102420. https://doi.org/10.1016/j.sysarc.2022.102420",
            "link": "https://doi.org/10.1016/j.sysarc.2022.102420",
            "description": "This work addresses the challenge of applying Moving Target Defense in safety-critical Cyber–Physical Systems (CPS), such as vehicles, that use mixed time-triggered and event-triggered architectures. The authors focus on defending against memory corruption attacks (e.g., code injection, reuse, and non-control data attacks) using a combined MTD architecture featuring Instruction Set Randomization (ISR), Address Space Randomization (ASR), and Data Space Randomization (DSR). These are integrated into the ARINC 653 partitioned OS standard to ensure isolation and predictable timing behaviour. \n The defence framework includes a Dynamic Binary Translator (DBT) for runtime code transformation, a Points-To Analysis Graph (PAG) for tracking memory-use relationships, and a Health Monitor for detecting attacks and triggering reconfiguration. The system employs a Simplex architecture with dual controllers (default and backup), allowing fallback to a safe controller during attack detection. Real-time constraints are preserved using ARINC 653’s static partition schedule and its event-triggered support for rapid response. \n Using a hardware-in-the-loop setup with the CARLA simulator and Jetson TX2 boards, the authors evaluate their design in an advanced emergency braking system (AEBS) scenario. The system is tested under three attacks: code injection, code reuse, and non-control data tampering. Results show that with MTD enabled, all attacks are detected and mitigated in time to maintain vehicle safety. Runtime performance overhead varies, with full ISR+ASR+DSR incurring up to 59% overhead, suggesting trade-offs between defence depth and system load. Overall, the architecture proves effective in securing CPS without compromising real-time performance."
        },
        {       
            "ID": "RE0108",
            "name": "In-car Gateway Architecture for Intra and Inter-vehicular Networks",
            "cite": "Hbaieb, A., Rhaiem, O. ben, & Chaari, L. (2018). In-car Gateway Architecture for Intra and Inter-vehicular Networks. 2018 14th International Wireless Communications and Mobile Computing Conference, IWCMC 2018, 1489–1494. https://doi.org/10.1109/IWCMC.2018.8450344",
            "link": "https://doi.org/10.1109/IWCMC.2018.8450344",
            "description": "This paper proposes a new in-car gateway architecture designed to support both intra- and inter-vehicle communication, with a focus on facilitating V2X (vehicle-to-everything) interactions. The proposed architecture includes hardware and software layers aligned with AUTOSAR standards. The hardware design integrates multiple communication interfaces (CAN, LIN, FlexRay, Ethernet, MOST), a CPU, memory, and I/O modules to handle sensors, actuators, and external wireless communication modules like 802.11p. \n The software stack consists of the application layer, middleware, and a real-time operating system (RTOS), supporting applications such as ADAS, telematics, and infotainment. The gateway bridges internal ECU networks with external vehicular communication systems, ensuring compatibility and control over message transmission. Use cases include ADAS scenarios where vehicle speed and positional data are exchanged through the gateway to enable cooperative speed control between vehicles."
        },
        {       
            "ID": "RE0109",
            "name": "Gateway Framework for In-Vehicle Networks Based on CAN, FlexRay, and Ethernet",
            "cite": "Kim, J. H., Seo, S. H., Hai, N. T., Cheon, B. M., Lee, Y. S., & Jeon, J. W. (2015). Gateway Framework for In-Vehicle Networks Based on CAN, FlexRay, and Ethernet. IEEE Transactions on Vehicular Technology, 64(10), 4472–4486. https://doi.org/10.1109/TVT.2014.2371470",
            "link": "https://doi.org/10.1109/TVT.2014.2371470",
            "description": "TThis paper presents a highly configurable and reusable gateway framework that supports routing between CAN, FlexRay, and Ethernet. The framework is modular and portable across platforms, using AUTOSAR MCAL and OS layers for compatibility. Key features include: \n Multiple routing methods: frame-based, PDU-based, and signal-based. \n Diagnostic routing: including translation between DoIP and UDS. \n Parallel ECU reprogramming across multiple buses. \n Dynamic routing update and multiple routing profiles. \n Security features: authentication, encryption, and configurable network management (NM). \n Automated configuration and verification tools via GUI software. \n A layered architecture separates the hardware interface, abstract platform drivers, routing logic, and add-on services. It supports domain controller units (DCUs) in backbone architectures, where each DCU manages a local network segment and communicates with others via Ethernet. The framework also supports conditional message forwarding based on network wake/sleep states."
        },
        {       
            "ID": "RE0110",
            "name": "CANtropy: Time Series Feature Extraction-Based Intrusion Detection Systems for Controller Area Networks",
            "cite": "Shahriar, H., Lou, W., & Hou, Y. T. (2023). CANtropy: Time Series Feature Extraction-Based Intrusion Detection Systems for Controller Area Networks. February.",
            "link": "https://www.ndss-symposium.org/ndss-paper/auto-draft-362/",
            "description": "This paper introduces CANtropy, an IDS designed to detect anomalies in Controller Area Network (CAN) traffic by using time-series-based entropy features. The authors highlight how traditional frequency-based IDS approaches may not effectively capture the dynamic nature of CAN message patterns, particularly under stealthy or slow-rate attacks. To overcome this, CANtropy leverages short, overlapping windows of CAN traffic to compute a set of statistical entropy features (like min, max, mean, and variance) for each ID, enabling the system to identify small but meaningful deviations in message distribution patterns. \n The proposed IDS employs a machine learning pipeline using these entropy features to train a classifier capable of distinguishing between benign and malicious traffic. The authors evaluate various models (e.g., Random Forest, Gradient Boosting) and find that the time-series entropy features significantly boost detection performance, even for stealthy attacks. They demonstrate the method’s robustness across multiple types of attack scenarios, including flooding, spoofing, and replay attacks, showing improved detection rates and low false positives. \n The paper concludes by stressing the feasibility of integrating such an approach in resource-constrained automotive ECUs. The entropy-based features are computationally lightweight and can be implemented in real time, making CANtropy a practical option for both network-based and ECU-based intrusion detection. The system's adaptability and low-overhead make it suitable for deployment in various in-vehicle IDS architectures."
        },
        {       
            "ID": "RE0111",
            "name": "Cyberattacks and Countermeasures for In-Vehicle Networks",
            "cite": "Aliwa, E., Rana, O., Perera, C., & Burnap, P. (2021). Cyberattacks and Countermeasures for In-Vehicle Networks. ACM Computing Surveys, 54(1), 1–37. https://doi.org/10.1145/3431233",
            "link": "https://doi.org/10.1145/3431233",
            "description": "This survey paper provides a broad overview of cyber threats and countermeasures for in-vehicle networks, with a major focus on IDS architectures and methodologies. It begins by detailing vulnerabilities in legacy protocols like CAN, highlighting the lack of authentication, encryption, and segmentation as key factors that allow adversaries to perform spoofing, replay, and DoS attacks. The paper classifies IDSs into network-based and host-based approaches, with examples and evaluations for each category. \n The authors analyse several IDS techniques, including anomaly-based and signature-based methods. Anomaly-based systems, which model normal traffic behaviour using statistical or machine learning methods, are more adaptable to unknown threats but suffer from higher false positives. Signature-based IDSs detect known patterns of attacks but may fail against zero-day exploits. The paper presents hybrid models that combine both approaches, leveraging the strengths of each. It also compares data sources for IDS, such as CAN traffic patterns, ECU logs, and sensor data, and discusses their trade-offs in coverage and performance. \n  Finally, the paper explores deployment strategies for IDS within the vehicle’s electronic architecture. Network-based IDSs are often located at gateways to monitor inter-ECU traffic, while ECU-based and host-based IDSs are embedded within critical nodes. The authors recommend layered IDS designs where both centralised (e.g., gateway) and distributed (e.g., per-ECU) detection mechanisms work in tandem. They also emphasise the need for real-time constraints, low resource usage, and attack coverage when designing IDSs for modern autonomous vehicles."
        },
        {       
            "ID": "RE0112",
            "name": "Automobile ECU Design to Avoid Data Tampering",
            "cite": "Aliwa, E., Rana, O., Perera, C., & Burnap, P. (2021). Cyberattacks and Countermeasures for In-Vehicle Networks. ACM Computing Surveys, 54(1), 1–37. https://doi.org/10.1145/3431233",
            "link": "https://doi.org/10.1145/3431233",
            "description": "This paper presents a set of defensive mechanisms to protect automotive ECUs from firmware tampering and data theft, especially through the OBD-II interface and memory bus vulnerabilities. The authors first analyse typical attack vectors in modern vehicles, identifying risks in both diagnostic communication channels and ECU memory configurations. They observe that attackers can sniff decrypted firmware updates sent over OBD-II or extract memory contents via physical probing of ECU buses. \n To counter these threats, the paper introduces multiple layered security measures. First, code obfuscation is applied before transmission to obscure logic and hinder reverse engineering. Second, code authentication is enforced using public-key cryptography, where the firmware includes an encrypted digest of its content to ensure integrity and authenticity. Third, on-the-fly decryption is proposed to secure the communication between internal and external ECU memory. In this scheme, encrypted firmware stored in external memory is decrypted during execution using a decryption module stored securely in internal memory and protected via hardware hardening and lock bits. \n Additionally, the paper introduces a deception-based security mechanism by deploying decoy vulnerabilities in ECUs to attract and trap attackers using rootkits. These “honeypot” vulnerabilities allow the system to detect, monitor, and study attacker behaviour. The attacker’s progression through the system is modelled using a Markov Decision Process (MDP), enabling dynamic assessment of attacker strategies and informing system responses. \n These mechanisms together aim to enhance the confidentiality, integrity, and resilience of ECU firmware, ensuring that only authenticated, untampered code executes within the vehicle and enabling proactive threat detection in embedded automotive environments."
        },
        {       
            "ID": "RE0113",
            "name": "Obfuscation-based location privacy-preserving scheme in cloud-enabled internet of vehicles.",
            "cite": "Benarous, L., & Kadri, B. (2022). Obfuscation-based location privacy-preserving scheme in cloud-enabled internet of vehicles. Peer-to-Peer Networking and Applications, 15(1), 461–472. https://doi.org/10.1007/s12083-021-01233-z",
            "link": "https://doi.org/10.1007/s12083-021-01233-z",
            "description": "This paper proposes a cooperative obfuscation-based strategy to preserve location privacy in cloud-enabled Internet of Vehicles (CE-IoV). Vehicles periodically broadcast safety messages (beacons) that include their identity and location, which can be exploited by attackers for tracking. The authors introduce a mechanism where vehicles synchronise pseudonym and VMID (virtual machine ID) changes using silent periods and coordinated obfuscation, reducing the success of linking attacks. Vehicles use a game-theoretic model to decide when to change identifiers, based on neighbourhood cooperation. \n The key technique involves flagging readiness to change (RDC) and executing the change (DC) once a threshold number of neighbours cooperate. During the pseudonym change, vehicles enter a silent period where no communication is made, making it hard for global passive attackers (GPA) to track them using semantic, syntactic, and mapping attacks. The method was validated through NS2 simulations and Mobisim, showing tracking success remained under 10% for all attacker models. \n The deception here lies in deliberate message obfuscation and silence, misleading attackers who rely on continuous message flow for correlation. However, the system doesn't create a fake environment or subsystem to attract attackers — it only modifies real communication behaviour."
        },
        {       
            "ID": "RE0114",
            "name": "Enhanced Obfuscation for Software Protection in Autonomous Vehicular Cloud Computing Platforms",
            "cite": "Hataba, M., Sherif, A., & Elkhouly, R. (2022). Enhanced Obfuscation for Software Protection in Autonomous Vehicular Cloud Computing Platforms. IEEE Access, 10, 33943–33953. https://doi.org/10.1109/ACCESS.2022.3159249",
            "link": "https://doi.org/10.1109/ACCESS.2022.3159249",
            "description": "This paper focuses on defending autonomous vehicular cloud computing (AVCC) platforms against timing side-channel attacks. The authors improve a compiler-level obfuscation technique that dynamically changes the control flow of software executed in AVCC platforms. Using LLVM-based compilation, they insert junk code and apply randomised branch transformation to create unpredictable execution paths, which makes it extremely difficult for adversaries to infer sensitive details through side-channel observation (e.g., power, timing). \n The obfuscation is applied at compile time using transformation passes that adjust conditional branches based on random flags. The system supports dynamic compilation to produce multiple runtime variants of the same program, thus diversifying attack surfaces. This reduces the feasibility of reverse engineering and inference attacks during remote execution on shared vehicular cloud infrastructure. \n Although the technique is highly deceptive (e.g., the actual logic is masked, and runtime characteristics are modified), it is confined to internal software behaviour. It doesn't present false system components to lure attackers or divert their attention from real targets."
        },
        {       
            "ID": "RE0115",
            "name": "CAN Obfuscation by Randomization ( CANORa ) A technology to prevent large-scale malware attacks on driverless autonomous vehicles",
            "cite": "Madl, T., Brückmann, J., & Hof, H. J. (2018). CAN Obfuscation by Randomization ( CANORa ) A technology to prevent large-scale malware attacks on driverless autonomous vehicles. 2nd ACM Computer Science in Cars Symposium (CSCS 2018), September, 1–7. https://doi.org/10.1145/3273946.3273953",
            "link": "https://doi.org/10.1145/3273946.3273953",
            "description": "This paper introduces CANORa, a system designed to prevent large-scale malware attacks on autonomous vehicles by obfuscating CAN messages using randomisation techniques. The main idea is to disrupt an attacker's ability to interpret or inject meaningful CAN messages by dynamically altering message identifiers (IDs) and payloads. CANORa adds a layer of encryption and randomisation between the sender and receiver ECUs, while maintaining compatibility with existing CAN protocols. Trusted ECUs share cryptographic keys and a synchronised random number generator, allowing them to correctly decode obfuscated messages in real time. \n The proposed system works in two steps: First, the sender ECU encrypts the original CAN ID and data field using a shared key and a random seed. This encrypted form is transmitted over the CAN bus. Second, the receiver ECU uses the same seed and key to decrypt and restore the original message before processing it. This prevents unauthorised ECUs (including malware-infected ones) from understanding or spoofing the network traffic. The authors also introduce replay protection, ensuring old or duplicated messages are ignored. A prototype was implemented on real automotive hardware, showing minimal added latency. \n CANORa intentionally makes CAN communication appear meaningless or misleading to unauthorised observers and adversaries, thereby deceiving potential attackers. It doesn't create a separate environment or fake system; rather, it manipulates the content of real messages to confuse and block malicious activity."
        },
        {       
            "ID": "RE0116",
            "name": "Vehicle Trajectory Obfuscation and Detection",
            "cite": "Ma, B., Zhao, Y., Wang, X., Liu, Z., Lin, X., Wang, Z., Ni, W., & Liu, R. P. (n.d.). Vehicle Trajectory Obfuscation and Detection. Springer International Publishing. https://doi.org/10.1007/978-3-031-24946-4",
            "link": "https://doi.org/10.1007/978-3-031-24946-4",
            "description": "This paper presents a dual-layer solution for protecting the privacy of vehicles by obfuscating their trajectories and detecting potential tracking attacks. The first component, PathMix, creates confusion by generating fake trajectories in the vehicle’s reported location data, mixing it with the real one to degrade the attacker's ability to trace the vehicle. It applies location anonymisation and mixing strategies while ensuring the modified paths still appear plausible. This layer leverages location updates and motion constraints to inject deceptive yet realistic movement patterns. \n The second component, PathIntrusion, detects if a vehicle is being targeted or tracked using trajectory similarity comparison. It monitors the consistency of received location requests and identifies anomalies that could indicate surveillance or profiling attempts. The combination of these two mechanisms allows the system to not only deceive attackers using misleading paths but also respond when an actual attack is detected. The method was validated using real GPS data and mobility traces, showing strong performance in reducing attack success while preserving service quality. \n PathMix actively generates fake trajectory data that is broadcast or shared with external systems (e.g., V2X or cloud services), however, it doesn’t construct a full fake system or subsystem to act as a honeypot or trap — it’s data-level deception."
        },
        {       
            "ID": "RE0117",
            "name": "HoneyCar: A Framework to Configure Honeypot Vulnerabilities on the Internet of Vehicles.",
            "cite": "Panda, S., & Rass, S. (2022). HoneyCar: A Framework to Configure Honeypot Vulnerabilities on the Internet of Vehicles. October, 104671–104685.",
            "link": "https://doi.org/10.1109/ACCESS.2022.3210117",
            "description": "This paper presents HoneyCar, a modular and flexible honeypot framework specifically designed for vehicles in the Internet of Vehicles (IoV). Its main goal is to simulate realistic in-vehicle environments by intentionally configuring vulnerabilities that can attract attackers. HoneyCar integrates various ECUs, services, and protocols and allows security researchers to emulate different security states or weaknesses within these systems. These honeypots are deployed on Raspberry Pi devices that act as ECU stand-ins, offering attacker interaction points such as open ports or vulnerable services. \n The HoneyCar architecture includes 3 main layers: (1) the hardware layer using Raspberry Pi and CAN transceivers, (2) the middleware for protocol handling (like CAN messages), and (3) the vulnerability layer where predefined attack surfaces are simulated. The system supports services such as insecure diagnostic ports, fake OTA update endpoints, and misconfigured software—luring attackers into these traps. Interaction logs and data are collected for analysis to improve detection and understanding of attacker behaviour in automotive contexts. \n HoneyCar is a fully separate environment built to attract attackers with intentionally configured vulnerabilities, however, it doesn’t inject false data into a real system — it presents a decoy rather than blending false information into real systems."
        },
        {       
            "ID": "RE0118",
            "name": "Investigating the Use of Honeypots in Vehicles.",
            "cite": "Eriksson, E., & Fahlbeck, L. (n.d.). Investigating the Use of Honeypots in Vehicles.",
            "link": "https://doi.org/10.1109/ACCESS.2022.3210117",
            "description": "This thesis explores how honeypots can be adapted to the automotive domain, especially with the rise of V2X and autonomous vehicle technologies. The research begins with a comprehensive overview of vehicular attack surfaces, particularly focusing on external interfaces (OBD-II, infotainment systems, Bluetooth, cellular, and Wi-Fi). The author discusses prior honeypot models from enterprise and ICS domains and highlights their limitations when applied to constrained embedded vehicle environments. The thesis aims to design a lightweight, emulated honeypot ECU that imitates authentic behaviour of in-vehicle components while remaining isolated and safe from real systems. \n The proposed design introduces a CAN honeypot module that simulates message reception and transmission using preloaded CAN DBC definitions. It records attacker inputs and can simulate response behaviour to maintain realism. Several attack scenarios are considered, including fuzzing, reverse engineering of CAN messages, and diagnostic protocol abuse. The honeypot system uses modular hardware such as microcontrollers or Raspberry Pi boards, enabling different deployment strategies—either embedded within a testbed vehicle or externally for analysis. \n The thesis concludes by implementing and testing this honeypot in a lab setup. The system successfully mimicked real ECUs and could attract common attack techniques. It’s emphasised that these honeypots do not actively interfere with real vehicular functions, but rather serve as controlled traps for observation and attacker engagement. The thesis offers insights on further improvements, such as integrating anomaly detection and extending to V2X simulations. \n This thesis clearly contributes to the design and deployment of maintained deceptive environments in vehicles."
        },
        {       
            "ID": "RE0119",
            "name": "Relay Attacks on Passive Keyless Entry and Start Systems in Modern Cars",
            "cite": "Francillon, A., Danev, B., & Capkun, S. (n.d.). ETH Library Relay Attacks on Passive Keyless Entry and Start Systems in Modern Cars. https://doi.org/10.3929/ethz-a-006708714",
            "link": "https://doi.org/10.3929/ethz-a-006708714",
            "description": "The paper investigates security vulnerabilities in Passive Keyless Entry and Start (PKES) systems used in modern cars. These systems operate using low-frequency (LF) communication (typically ~130 kHz) from the car to the key fob and ultra-high-frequency (UHF) communication (~300–400 MHz) from the key to the car. The key is expected to be physically near the vehicle for access/start. However, the authors show that adversaries can relay the signal between the car and key using analog hardware, making the car believe the key is nearby. The attack is practical, hardware-agnostic, and bypasses cryptographic protections by relaying at the physical layer, with no need to interpret or decrypt messages. \n Two forms of attack setups were demonstrated. The wired relay uses loop antennas and coaxial cables (up to 60 m) to capture and forward the LF signal. The wireless relay up-converts the LF signal to 2.5 GHz, transmits it over the air, then down-converts it back to LF near the key. In both cases, the key is tricked into thinking the car is nearby and sends a UHF response to unlock or start the car. These setups were tested on 10 different car models and found to be effective, with relay distances up to 60 m for the car–key gap and 8 m from relay antenna to key, enabling attackers to trigger entry/start from outside buildings or across parking lots. \n The authors propose both short-term and long-term countermeasures. Immediate user-level defences include shielding the key (Faraday cage) or removing the battery to disable RF responses. However, these reduce usability. More robust solutions include distance bounding protocols, where the car measures the round-trip time of challenge–response signals to verify true proximity, with timing accuracy down to nanoseconds. They also discuss weaknesses in using signal strength or cryptographic improvements alone, as these do not prevent physical-layer relays."
        },
        {       
            "ID": "RE0120",
            "name": "Diversity-based moving-target defense for secure wireless vehicular communications",
            "cite": "Ghourab, E. M., Samir, E., Azab, M., & Eltoweissy, M. (2018). Diversity-based moving-target defense for secure wireless vehicular communications. Proceedings - 2018 IEEE Symposium on Security and Privacy Workshops, SPW 2018, 287–292. https://doi.org/10.1109/SPW.2018.00046",
            "link": "https://doi.org/10.1109/SPW.2018.00046",
            "description": "The paper proposes a spatiotemporal Moving Target Defense (MTD) for securing Vehicle-to-Vehicle (V2V) communications. It leverages a dynamic vehicular relay network where moving vehicles on a multi-lane highway act as temporary relays. A traffic model based on Nagel-Schreckenberg cellular automata rules determines vehicle speed, location, and lane changes over time. These vehicle dynamics generate diversified multi-hop paths between a source and destination, which change constantly. This runtime diversification creates path-level confusion that hinders eavesdroppers from reconstructing the full message. \n A dynamic Lookup Table (LUT) is used to map which nearby vehicles can serve as relays at any given moment. At each time instant, the source selects a random subset of nearby vehicles, splitting the message into different data chunks (fine-grained or coarse-grained) and forwarding them through distinct paths. The paper introduces a Confusion Factor (CF)metric to quantify the difficulty an attacker faces in tracking the signal. Higher CF values (achieved by path randomisation) increase channel secrecy but may reduce system reliability due to wireless interference and fading. \n Monte Carlo simulations show how the system’s channel secrecy capacity improves with increased CF and fine-grained data splitting, making interception harder. The intercept probability decreases as path randomness increases, while outage probability (due to lost packets) increases. The authors highlight a security–reliability trade-off (SRT), where stronger security (via diversity and CF) leads to higher risk of transmission errors in wireless channels. Figures and graphs demonstrate that while intercepting complete data becomes nearly impossible, reliability can drop if the system isn't properly tuned."
        },
        {       
            "ID": "RE0121",
            "name": "Infotainment System Matters: Understanding the Impact and Implications of In-Vehicle Infotainment System Hacking with Automotive Grade Linux",
            "cite": "Jeong, S., Ryu, M., Kang, H., & Kim, H. K. (2023). Infotainment System Matters: Understanding the Impact and Implications of In-Vehicle Infotainment System Hacking with Automotive Grade Linux. CODASPY 2023 - Proceedings of the 13th ACM Conference on Data and Application Security and Privacy, 201–212. https://doi.org/10.1145/3577923.3583650",
            "link": "https://doi.org/10.1145/3577923.3583650",
            "description": "This paper investigates the impact of IVI system vulnerabilities through a large-scale hacking competition using Automotive Grade Linux (AGL). The researchers set up a Raspberry Pi-based IVI testbed running AGL and invited cybersecurity teams to submit proofs-of-concept (PoCs). Across 33 verified exploit submissions, participants uncovered critical vulnerabilities in multiple AGL services such as the dashboard, homescreen, and Bluetooth daemons. \n A key technical finding was the use of insecure inter-process communication (IPC) across open TCP ports with no encryption or authentication, allowing unauthorised remote access. Additionally, services were found to be running with coarse-grained permissions and privileged execution rights. For instance, exploitation of afbd-homescreen and bluetoothd revealed that privileged services could be accessed without user interaction or proper access control. \n The paper highlights that improper permission boundaries between services and the lack of role-based access control significantly expanded the attack surface. The study concludes with mitigation suggestions including applying least privilege principles and isolating processes based on their roles."
        }
		
    ]
}
